{"version":3,"file":"182.parkhang-dev.js","sources":["webpack://parkhang/./app/components/Editors/EditorContainer.js"],"sourcesContent":["import Editor from \"./Editor\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as reducers from \"reducers\";\r\nimport * as actions from \"actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    const selectedText = reducers.getSelectedText(state);\r\n    const selectedText2 = reducers.getSelectedText2(state);\r\n\r\n    let selectedWitness;\r\n    let selectedWitness2;\r\n    let witnesses;\r\n    let witnesses2;\r\n    if (selectedText) {\r\n        witnesses = reducers.getTextWitnesses(state, selectedText.id);\r\n        const selectedWitnessId = reducers.getSelectedTextWitnessId(\r\n            state,\r\n            selectedText.id\r\n        );\r\n        if (selectedWitnessId) {\r\n            selectedWitness = reducers.getWitness(state, selectedWitnessId);\r\n        } else {\r\n            selectedWitness = reducers.getWorkingWitness(\r\n                state,\r\n                selectedText.id\r\n            );\r\n        }\r\n    }\r\n    if (selectedText2) {\r\n        witnesses2 = reducers.getTextWitnesses2(state, selectedText2.id);\r\n        const selectedWitnessId2 = reducers.getSelectedTextWitnessId2(\r\n            state,\r\n            selectedText2.id\r\n        );\r\n        if (selectedWitnessId2) {\r\n            selectedWitness2 = reducers.getWitness2(state, selectedWitnessId2);\r\n        } else {\r\n            selectedWitness2 = reducers.getWorkingWitness2(\r\n                state,\r\n                selectedText2.id\r\n            );\r\n        }\r\n    }\r\n\r\n    if (!state.user.userId === -1) {\r\n        user = state.user;\r\n    }\r\n    return {\r\n        selectedText,\r\n        selectedWitness,\r\n        selectedText2,\r\n        selectedWitness2,\r\n        title: reducers.getTranslation(state, \"header.title\"),\r\n        page: state.page,\r\n        isAnnotating: reducers.isAnnotating(state),\r\n        isSecondWindowOpen: reducers.isSecondWindowOpen(state),\r\n        theme: reducers.getTheme(state),\r\n        isPanelLinked: reducers.isPanelLinked(state),\r\n        textListIsVisible: reducers.getTextListVisible(state),\r\n    };\r\n};\r\n\r\nconst matchDispatchToProps = (dispatch) => {\r\n    return {\r\n        onChangedTextWidth: (width: number) => {\r\n            dispatch(actions.changedTextListWidth(width));\r\n        },\r\n        onChangedTextListVisible: (isVisible: boolean) => {\r\n            dispatch(actions.changedTextListVisible(isVisible));\r\n        },\r\n        changeIsAnnotating: (payload) => {\r\n            dispatch(actions.changeIsAnnotating(payload));\r\n            if (payload === false) {\r\n                const dismissTextAnnotation =\r\n                    actions.changedActiveTextAnnotation(null);\r\n                dispatch(dismissTextAnnotation);\r\n                dispatch(actions.changedActiveTextAnnotation(null));\r\n            }\r\n        },\r\n        onChangeWindowOpen: (data: boolean, textId) => {\r\n            dispatch(actions.toggleSecondWindow(data, textId));\r\n        },\r\n        onChangePanelLink: (data: boolean) => {\r\n            dispatch(actions.changePanelLink(data));\r\n        },\r\n    };\r\n};\r\n\r\nconst EditorContainer = connect(mapStateToProps, matchDispatchToProps)(Editor);\r\n\r\nexport default EditorContainer;\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AACA;AAEA;;;;A","sourceRoot":""}