{"version":3,"file":"61.parkhang-dev.js","sources":["webpack://parkhang/./app/components/MediaComponent/Image.css","webpack://parkhang/./app/components/MediaComponent/Image.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"ThirdWindow-Height\":\"300px\",\"header-Height\":\"35px\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"ThirdWindowHeight\":\"250px\",\"ThirdWindow\":\"Image---ThirdWindow\",\"ThirdWindowPortrait\":\"Image---ThirdWindowPortrait\",\"header\":\"Image---header\",\"listOfImages\":\"Image---listOfImages\",\"ImageStyle\":\"Image---ImageStyle\",\"imageSection\":\"Image---imageSection\"};","import React, { useState, useRef, useEffect, memo, useCallback } from \"react\";\r\nimport styles from \"./Image.css\";\r\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\r\nimport _ from \"lodash\";\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\r\nimport {\r\n    IconButton,\r\n    NativeSelect,\r\n    MenuItem,\r\n    FormControl,\r\n    Box,\r\n    InputLabel,\r\n    AppBar,\r\n} from \"@mui/material\";\r\nimport classnames from \"classnames\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport ChevronLeftIcon from \"@mui/icons-material/ChevronLeft\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport CancelIcon from \"@mui/icons-material/Cancel\";\r\nfunction HttpUrl(data = \"\") {\r\n    if (data.includes(\"https\")) return data;\r\n    return \"https://\" + data;\r\n}\r\nasync function fetchImage(url) {\r\n    const res = await fetch(url);\r\n    const imageBlob = await res.blob();\r\n    const imageObjectURL = URL.createObjectURL(imageBlob);\r\n    return imageObjectURL;\r\n}\r\n\r\nfunction Image(props) {\r\n    const selectRef = useRef(null);\r\n    let imageList = props.imageData?.alignment;\r\n    let message = props.imageData?.message;\r\n    let imageRef = React.useRef(\"\");\r\n    let textIdfromAlignment = props.alignmentData.text;\r\n    let imageAlignmentById = props.imageAlignmentById;\r\n    let imageScrollId = props.imageScrollId;\r\n    let isPortraitImage = props.isImagePortrait;\r\n    let [imageSelected, SetSelected] = useState(0);\r\n    let [imageHeight, setImageHeight] = useState(\"50vh\");\r\n    let imageIdList = [];\r\n    let syncIdOnClick = props.syncIdOnClick;\r\n    let [loading, setLoading] = useState(false);\r\n    const [img, setImg] = useState();\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        if (!_.isEmpty(imageList)) {\r\n            let url = HttpUrl(imageList[imageSelected].target_segment);\r\n            let imageObjectURL = fetchImage(url, imageList);\r\n            imageObjectURL\r\n                .then((data) => {\r\n                    setImg(data);\r\n                    setLoading(false);\r\n                })\r\n                .catch((e) => console.log(e));\r\n\r\n            let image = imageList[imageSelected];\r\n            props.changeSelectedImage(image);\r\n            let imageDocId = image.source_segment.start;\r\n        }\r\n    }, [imageList, imageSelected]);\r\n\r\n    if (!_.isEmpty(imageList)) {\r\n        imageIdList = imageList.map((l) => parseInt(l.source_segment.start));\r\n    }\r\n\r\n    useEffect(() => {\r\n        let IDtoSync = parseInt(imageScrollId.id.start);\r\n        if (\r\n            textIdfromAlignment === props.selectedText.id &&\r\n            imageScrollId.from === 1\r\n        ) {\r\n            if (!_.isEmpty(imageList)) {\r\n                let findSegment = imageList.find(\r\n                    (l) =>\r\n                        l.source_segment.start <= IDtoSync &&\r\n                        l.source_segment.end > IDtoSync\r\n                );\r\n                let index = imageList.findIndex(\r\n                    (l) => l?.source_segment === findSegment.source_segment\r\n                );\r\n                if (parseInt(index) >= 0) {\r\n                    SetSelected(index);\r\n                }\r\n            }\r\n        }\r\n    }, [imageScrollId]);\r\n\r\n    useEffect(() => {\r\n        selectRef.current.value = props.witness;\r\n        setLoading(true);\r\n        fetchImage();\r\n    }, [props.witness]);\r\n\r\n    useEffect(() => {\r\n        if (textIdfromAlignment === props.selectedText.id) {\r\n            let ClickId = syncIdOnClick.toString().replace(\"s_\", \"\");\r\n            if (imageList?.length > 0 && ClickId > 0) {\r\n                let findSegment = imageList.find(\r\n                    (l) =>\r\n                        l.source_segment.start < ClickId &&\r\n                        l.source_segment.end > ClickId\r\n                );\r\n                let index = imageList.findIndex(\r\n                    (l) => l?.source_segment === findSegment?.source_segment\r\n                );\r\n                if (index >= 0) {\r\n                    SetSelected(index);\r\n                }\r\n            }\r\n        }\r\n    }, [syncIdOnClick]);\r\n\r\n    const isPortrait = ({ target: img }) => {\r\n        //this Check if the provided Image is a portrait or a landScape\r\n        let tempHeight = img.naturalHeight;\r\n        setImageHeight(img.naturalHeight);\r\n        let tempWIdth = img.naturalWidth;\r\n        if (tempHeight === 0 || tempWIdth === 0) return null;\r\n        props.changeIsImagePortrait(tempHeight >= tempWIdth);\r\n        setLoading(false);\r\n    };\r\n    const handleChangeImage = (data) => {\r\n        let currentid = imageAlignmentById.find((l) => {\r\n            return l.id === imageSelected;\r\n        });\r\n        console.log(currentid);\r\n        if (data === \"prev\" && imageSelected > 0) {\r\n            SetSelected((prev) => prev - 1);\r\n        }\r\n        if (data === \"next\" && imageSelected < imageIdList.length) {\r\n            SetSelected((prev) => prev + 1);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                isPortraitImage\r\n                    ? styles.ThirdWindowPortrait\r\n                    : styles.ThirdWindow\r\n            }\r\n            // onResize={handleResize}\r\n        >\r\n            <Box\r\n                className={styles.header}\r\n                sx={{\r\n                    boxShadow: 1,\r\n                    bgcolor: \"primary\",\r\n                }}\r\n            >\r\n                <Box position=\"relative\" zIndex={2}>\r\n                    <FormControl sx={{ m: 1, minWidth: 120 }} size=\"small\">\r\n                        <NativeSelect\r\n                            labelid=\"demo-select-small\"\r\n                            inputRef={selectRef}\r\n                            onChange={(e) =>\r\n                                props.changeImageVersion(e.target.value)\r\n                            }\r\n                            inputProps={{\r\n                                name: \"age\",\r\n                                id: \"uncontrolled-native\",\r\n                            }}\r\n                        >\r\n                            {props.witnesses.map((witness) => {\r\n                                return (\r\n                                    <option\r\n                                        key={witness.id}\r\n                                        value={witness.id}\r\n                                        style={{ textAlign: \"center\" }}\r\n                                    >\r\n                                        {witness.source.name}\r\n                                    </option>\r\n                                );\r\n                            })}\r\n                        </NativeSelect>\r\n                    </FormControl>\r\n                </Box>\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    style={{ position: \"absolute\", right: 10 }}\r\n                    onClick={() => props.changeMediaSelection(null)}\r\n                >\r\n                    <CancelIcon />\r\n                </IconButton>\r\n            </Box>\r\n            <Box className={styles.imageSection}>\r\n                {_.isEmpty(imageList) ? (\r\n                    <>\r\n                        {message ? (\r\n                            <h1>{message}</h1>\r\n                        ) : (\r\n                            <Box sx={{ height: \"30vh\" }}>\r\n                                <CircularProgress color=\"secondary\" />\r\n                            </Box>\r\n                        )}\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <center height=\"100%\">\r\n                            {!loading ? (\r\n                                <TransformWrapper>\r\n                                    <TransformComponent>\r\n                                        <LazyLoadImage\r\n                                            itemRef={imageRef}\r\n                                            className={styles.ImageStyle}\r\n                                            src={img}\r\n                                            alt=\"imagepecha\"\r\n                                            onLoad={isPortrait}\r\n                                        />\r\n                                    </TransformComponent>\r\n                                </TransformWrapper>\r\n                            ) : (\r\n                                <Box sx={{ height: \"30vh\" }}>\r\n                                    <CircularProgress color=\"secondary\" />\r\n                                </Box>\r\n                            )}\r\n                        </center>\r\n                        <IconButton\r\n                            onClick={() => handleChangeImage(\"prev\")}\r\n                            sx={{\r\n                                position: \"absolute\",\r\n                                left: 20,\r\n                                top: 100,\r\n                            }}\r\n                            color=\"primary\"\r\n                        >\r\n                            <ChevronLeftIcon fill=\"currentColor\" />\r\n                        </IconButton>\r\n                        <IconButton\r\n                            color=\"primary\"\r\n                            onClick={() => handleChangeImage(\"next\")}\r\n                            sx={{\r\n                                position: \"absolute\",\r\n                                right: 20,\r\n                                top: 100,\r\n                            }}\r\n                        >\r\n                            <ChevronRightIcon fill=\"currentColor\" />\r\n                        </IconButton>\r\n                    </>\r\n                )}\r\n            </Box>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default memo(Image);\r\n"],"mappings":";;;;;;;;;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAOA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AASA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AANA;AAYA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAQA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAMA;AAAA;AAKA;AACA;AACA;AACA;AACA;AALA;AAUA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AASA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAHA;AASA;AAAA;AAOA;AACA;AACA;;;;A","sourceRoot":""}