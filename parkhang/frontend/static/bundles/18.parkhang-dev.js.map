{"version":3,"file":"18.parkhang-dev.js","sources":["webpack://parkhang/./app/components/TextDetail2/HeaderMenu/Settings.js","webpack://parkhang/./app/components/UI/Slider.css","webpack://parkhang/./app/components/UI/Slider.js","webpack://parkhang/./app/images/wrench.svg"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport WrenchIcon from \"images/wrench.svg\";\r\nimport Slider from \"../../UI/Slider\";\r\nimport useLocalStorage from \"components/utility/useLocalStorage\";\r\n\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport {\r\n    IconButton,\r\n    MenuList,\r\n    MenuItem,\r\n    Divider,\r\n    Grow,\r\n    Box,\r\n    ClickAwayListener,\r\n} from \"@mui/material\";\r\nimport { FONT_LIST } from \"app_constants\";\r\n\r\nfunction Settings(props) {\r\n    let [showOption, setShowOption] = useState(false);\r\n    let [fontSelect, setFontSelect] = useLocalStorage(\r\n        \"WindowTwoFont\",\r\n        \"Tibetan\"\r\n    );\r\n    useEffect(() => {\r\n        document.body.style.setProperty(\"--tibetan-fonts2\", fontSelect);\r\n    }, []);\r\n    const handleClick = () => {\r\n        setShowOption((prev) => !prev);\r\n    };\r\n    const handlefont = (value) => {\r\n        setFontSelect(value);\r\n        document.body.style.setProperty(\"--tibetan-fonts2\", `${value}`);\r\n        let update = document.getElementById(\"updateList2\");\r\n        let times = 1;\r\n        let timer = setInterval(() => {\r\n            update.click();\r\n            times++;\r\n            console.log(\"ran\");\r\n            if (times > 4) {\r\n                clearInterval(timer);\r\n            }\r\n        }, 800);\r\n        setShowOption(false);\r\n    };\r\n    return (\r\n        <ClickAwayListener onClickAway={() => setShowOption(false)}>\r\n            <Box position=\"relative\">\r\n                <IconButton onClick={handleClick} size=\"small\" variant=\"text\">\r\n                    <WrenchIcon height={20} width={20} fill=\"currentColor\" />\r\n                </IconButton>\r\n                <Grow in={showOption}>\r\n                    <MenuList\r\n                        dense\r\n                        sx={{\r\n                            position: \"absolute\",\r\n                            right: 0,\r\n                            zIndex: 2,\r\n                            top: 40,\r\n                            bgcolor: \"heading.main\",\r\n                        }}\r\n                    >\r\n                        <Slider\r\n                            max={20}\r\n                            min={7}\r\n                            initialvalue={props.textFontSize}\r\n                            changeSize={props.onChangedFontSize}\r\n                        />\r\n                        <Divider />\r\n                        <FontSelection\r\n                            selectFont={handlefont}\r\n                            selectedfont={fontSelect}\r\n                        />\r\n                        <MenuItem onClick={() => props.onExport()}>\r\n                            Export Document\r\n                            {props.exportingWitness && <CheckIcon />}\r\n                        </MenuItem>\r\n                    </MenuList>\r\n                </Grow>\r\n            </Box>\r\n        </ClickAwayListener>\r\n    );\r\n}\r\n\r\nexport default Settings;\r\n\r\nconst FontSelection = ({ selectFont, selectedfont }) => {\r\n    let fontAvailable = FONT_LIST || [];\r\n\r\n    return (\r\n        <Box textAlign={\"center\"}>\r\n            <span>Font:</span>{\" \"}\r\n            <select\r\n                onChange={(e) => selectFont(e.target.value)}\r\n                value={selectedfont}\r\n            >\r\n                {fontAvailable.map((font, index) => {\r\n                    return (\r\n                        <option key={index + \"-fontselect\"} value={font}>\r\n                            {font}\r\n                        </option>\r\n                    );\r\n                })}\r\n            </select>\r\n        </Box>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputRanges\":\"Slider---inputRanges\",\"inputRange\":\"Slider---inputRange\"};","import React, { useEffect, useState } from \"react\";\r\nimport styles from \"./Slider.css\";\r\nimport _ from \"lodash\";\r\nfunction Slider({\r\n    max,\r\n    min,\r\n    initialvalue,\r\n    changeSize = (r) => console.log(r),\r\n}) {\r\n    let initialPercent = (initialvalue / max) * 100;\r\n    const [tempValue, setTempValue] = useState(initialPercent);\r\n    const submitValue = _.debounce((e) => {\r\n        let currentPercent = (tempValue / 100) * max;\r\n        changeSize(Math.floor(parseInt(currentPercent)));\r\n    }, 500);\r\n\r\n    return (\r\n        <div className={styles.inputRanges}>\r\n            <span\r\n                style={{ fontSize: 13, top: \"-5px\" }}\r\n                onClick={() => changeSize(initialvalue - 2)}\r\n            >\r\n                ཀ\r\n            </span>\r\n            <input\r\n                type=\"range\"\r\n                style={{ width: \"70%\" }}\r\n                className={styles.inputRange}\r\n                min={40}\r\n                max={100}\r\n                smooth=\"yes\"\r\n                step={1}\r\n                value={tempValue}\r\n                onChange={(e) => setTempValue(e.target.value)}\r\n                onMouseUp={submitValue}\r\n                onTouchEnd={submitValue}\r\n            />\r\n            <span\r\n                style={{ fontSize: 18, top: \"-10px\" }}\r\n                onClick={() => changeSize(initialvalue + 2)}\r\n            >\r\n                ཀ\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Slider;\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref =\n/*#__PURE__*/\n\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M507.73 109.1c-2.24-9.03-13.54-12.09-20.12-5.51l-74.36 74.36-67.88-11.31-11.31-67.88 74.36-74.36c6.62-6.62 3.43-17.9-5.66-20.16-47.38-11.74-99.55.91-136.58 37.93-39.64 39.64-50.55 97.1-34.05 147.2L18.74 402.76c-24.99 24.99-24.99 65.51 0 90.5 24.99 24.99 65.51 24.99 90.5 0l213.21-213.21c50.12 16.71 107.47 5.68 147.37-34.22 37.07-37.07 49.7-89.32 37.91-136.73zM64 472c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z\"\n});\n\nvar SvgWrench = function SvgWrench(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 512 512\"\n  }, props), _ref);\n};\n\nexport default SvgWrench;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AASA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AAIA;AAIA;;;;;;;;;;;ACzGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAXA;AAcA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAQA;AACA;AACA;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}