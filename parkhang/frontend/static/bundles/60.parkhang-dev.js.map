{"version":3,"file":"60.parkhang-dev.js","sources":["webpack://parkhang/./app/components/TextsSearch/TextsSearch.css","webpack://parkhang/./app/components/TextsSearch/TextsSearch.js","webpack://parkhang/./app/components/TextsSearch/TextsSearchContainer.js","webpack://parkhang/./app/images/search.svg"],"sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textsSearchContainer\":\"TextsSearch---textsSearchContainer\",\"textsSearch\":\"TextsSearch---textsSearch\",\"minify\":\"TextsSearch---minify\"};","// @flow\r\nimport React, { useTransition } from \"react\";\r\nimport styles from \"./TextsSearch.css\";\r\nimport * as constants from \"app_constants\";\r\n\r\nimport { injectIntl } from \"react-intl\";\r\nimport Button from \"components/UI/Button\";\r\nimport SearchIcon from \"images/search.svg\";\r\n\r\ntype Props = {\r\n    searchValue: string,\r\n    searchChanged: (searchTerm: string) => void,\r\n    selectedSearchOption?: (e: SyntheticEvent<HTMLSelectElement>) => void,\r\n    minimiseButtonClicked: () => void,\r\n    intl: { formatMessage: ({ [id: string]: string }) => string },\r\n    searchTerm: string,\r\n    textListWidth: number,\r\n};\r\n\r\nconst TextsSearch = (props: Props) => {\r\n    let textInput: { current: null | HTMLInputElement } = React.createRef();\r\n    const [ispending, startTransition] = useTransition();\r\n\r\n    const initiateSearch = (e: SyntheticEvent<HTMLElement>) => {\r\n        e.preventDefault();\r\n        if (textInput.current instanceof HTMLInputElement) {\r\n            const searchTerm = textInput.current.value;\r\n            startTransition(() => {\r\n                props.searchChanged(searchTerm);\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        startTransition(() => {\r\n            if (e.target.value === \"\") {\r\n                props.searchChanged(null);\r\n                return;\r\n            }\r\n            props.searchChanged(e.target.value);\r\n        });\r\n    };\r\n    console.log(props.textListWidth);\r\n    return (\r\n        <div\r\n            className={styles.textsSearchContainer}\r\n            style={{ maxWidth: props.textListWidth }}\r\n        >\r\n            <div className={styles.textsSearch}>\r\n                <form onSubmit={initiateSearch}>\r\n                    <input\r\n                        onChange={handleChange}\r\n                        style={{ outline: \"none\", width: 150 }}\r\n                        type=\"text\"\r\n                        id=\"textSearchInput\"\r\n                        placeholder={props.intl.formatMessage({\r\n                            id: \"leftbar.search\",\r\n                        })}\r\n                        ref={textInput}\r\n                    />\r\n                    <Button\r\n                        backgroundColor=\"#35BF5C\"\r\n                        onClick={initiateSearch}\r\n                        // title={props.intl.formatMessage({\r\n                        //     id: \"leftbar.search\",\r\n                        // })}\r\n                        noBezel={true}\r\n                        icon={<SearchIcon />}\r\n                    />\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default injectIntl(TextsSearch);\r\n","// @flow\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport TextsSearch from \"./TextsSearch\";\r\nimport { changedSearchValue } from \"actions\";\r\nimport type { AppState } from \"reducers\";\r\nimport * as reducers from \"reducers\";\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        searchTerm: reducers.getSearchValue(state),\r\n        searchValue: state.ui.searchValue,\r\n        textListWidth: reducers.getTextListWidth(state),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    // const { dispatch } = dispatchProps;\r\n    // const { selectedText } = stateProps;\r\n    return {\r\n        searchChanged: (searchTerm: string) => {\r\n            dispatch(changedSearchValue(searchTerm));\r\n        },\r\n    };\r\n};\r\n\r\nconst TextsSearchContainer = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TextsSearch);\r\n\r\nexport default TextsSearchContainer;\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref =\n/*#__PURE__*/\n\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M9 2C5.146 2 2 5.146 2 9s3.146 7 7 7a6.959 6.959 0 004.574-1.719l.426.426V16l6 6 2-2-6-6h-1.293l-.426-.426A6.959 6.959 0 0016 9c0-3.854-3.146-7-7-7zm0 2c2.773 0 5 2.227 5 5s-2.227 5-5 5-5-2.227-5-5 2.227-5 5-5z\"\n});\n\nvar SvgSearch = function SvgSearch(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24\n  }, props), _ref);\n};\n\nexport default SvgSearch;"],"mappings":";;;;;;;;;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAWA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;AAWA;AACA;AAEA;AACA;AALA;AAMA;AACA;AAPA;AAaA;AACA;AACA;;;;;;;;;;;;AC1EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAKA;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}