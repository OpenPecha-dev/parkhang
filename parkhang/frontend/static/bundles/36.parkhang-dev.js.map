{"version":3,"file":"36.parkhang-dev.js","sources":["webpack://parkhang/./app/components/TextDetail/ExportControl.js","webpack://parkhang/./app/components/TextDetail/FontSize.css","webpack://parkhang/./app/components/TextDetail/FontSize.js","webpack://parkhang/./app/components/TextDetail/ImageToggle.css","webpack://parkhang/./app/components/TextDetail/ImageToggle.js","webpack://parkhang/./app/components/TextDetail/TabBar.css","webpack://parkhang/./app/components/TextDetail/TabBar.js","webpack://parkhang/./app/components/TextDetail/TextHeading.css","webpack://parkhang/./app/components/TextDetail/TextHeading.js","webpack://parkhang/./app/images/export.svg"],"sourcesContent":["import React from \"react\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport Button from \"components/UI/Button\";\r\nimport ExportIcon from \"images/export.svg\";\r\n\r\ntype Props = {\r\n    onClick?: () => void,\r\n    intl: { formatMessage: ({ [id: string]: string }) => string }\r\n};\r\n\r\nclass ExportControl extends React.Component<Props> {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button\r\n                    icon={\r\n                        <ExportIcon\r\n                            style={{ fill: \"#fff\" }}\r\n                            width={15}\r\n                            height={15}\r\n                        />\r\n                    }\r\n                    title={this.props.intl.formatMessage({\r\n                        id: \"header.export\"\r\n                    })}\r\n                    onClick={this.props.onClick}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default injectIntl(ExportControl);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fontSize\":\"FontSize---fontSize\"};","import React from \"react\";\r\nimport styles from \"./FontSize.css\";\r\n\r\ntype Props = {\r\n    fontSize: number,\r\n    onChange: (fontSize: number) => void\r\n};\r\n\r\nconst FontSize = (props: Props) => {\r\n    const minimumSize = 14;\r\n    const maximumSize = 48;\r\n    const options = new Array(maximumSize - minimumSize)\r\n        .fill()\r\n        .map((value: any, index: number) => {\r\n            const size = minimumSize + index;\r\n            return (\r\n                <option value={size} key={size}>\r\n                    {size}\r\n                </option>\r\n            );\r\n        });\r\n    const onChange = (e: Event) => {\r\n        const target = event.target;\r\n        const fontSize = Number(target.value);\r\n        props.onChange(fontSize);\r\n    }\r\n    return (\r\n        <div className={styles.fontSize}>\r\n            <label htmlFor=\"fontSize\">Font Size</label>\r\n            <select value={props.fontSize} onChange={onChange}>\r\n                {options}\r\n            </select>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FontSize;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imageToggle\":\"ImageToggle---imageToggle\"};","import React from \"react\";\r\nimport styles from \"./ImageToggle.css\";\r\n\r\ntype Props = {\r\n    showImages: boolean,\r\n    onChange: () => void\r\n};\r\n\r\nconst ImageToggle = (props: Props) => (\r\n    <div className={styles.imageToggle}>\r\n        <label htmlFor=\"showPageImages\">Show Images</label>\r\n        <input\r\n            id=\"showPageImages\"\r\n            type=\"checkbox\"\r\n            checked={props.showImages}\r\n            onChange={(e: Event) => {\r\n                const target = event.target;\r\n                const checked = target.checked;\r\n                props.onChange(checked);\r\n            }}\r\n        />\r\n    </div>\r\n);\r\n\r\nexport default ImageToggle;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"tabBar\":\"TabBar---tabBar\",\"tab\":\"TabBar---tab\",\"selected\":\"TabBar---selected\"};","// @flow\r\nimport React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport styles from \"./TabBar.css\";\r\nimport Witness from \"lib/Witness\";\r\n\r\nexport type Props = {\r\n    witnesses: Witness[],\r\n    activeWitness: Witness | null,\r\n    onSelectedWitness: (witness: Witness) => void\r\n};\r\n\r\nexport default class TabBar extends React.Component<Props> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let tabs = [];\r\n        if (this.props.witnesses) {\r\n            const witnesses = this.props.witnesses.map(witness => witness);\r\n            witnesses.sort((a, b) => {\r\n                if (a.isWorking) {\r\n                    return -1;\r\n                }\r\n                if (b.isWorking) {\r\n                    return 1;\r\n                }\r\n                if (a.isBase) {\r\n                    return -1;\r\n                }\r\n                if (b.isBase) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            });\r\n            for (let witness of witnesses) {\r\n                let classes = [styles.tab];\r\n                if (witness === this.props.activeWitness) {\r\n                    classes.push(styles.selected);\r\n                }\r\n                let tabName = witness.source.name;\r\n                if (witness.isWorking) {\r\n                    tabName = (\r\n                        <FormattedMessage id=\"annotation.workingEdition\" />\r\n                    );\r\n                }\r\n                tabs.push(\r\n                    <div\r\n                        className={classnames(...classes)}\r\n                        onClick={() => {\r\n                            this.props.onSelectedWitness(witness);\r\n                        }}\r\n                        key={witness.id}\r\n                    >\r\n                        {tabName}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return <div className={styles.tabBar}>{tabs}</div>;\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"headingContainer\":\"TextHeading---headingContainer\",\"textHeading\":\"TextHeading---textHeading\",\"topRow\":\"TextHeading---topRow\",\"textHeadingloader\":\"TextHeading---textHeadingloader\",\"controls\":\"TextHeading---controls\"};","// @flow\r\nimport React from \"react\";\r\nimport addTibetanShay from \"lib/addTibetanShay\";\r\nimport styles from \"./TextHeading.css\";\r\nimport TabBar from \"./TabBar\";\r\nimport Witness from \"lib/Witness\";\r\nimport type { TextData } from \"api\";\r\nimport ExportControl from \"./ExportControl\";\r\nimport Loader from \"react-loader\";\r\nimport ImageToggle from \"./ImageToggle\";\r\nimport FontSize from \"./FontSize\";\r\n\r\nexport type Props = {\r\n    witnesses: Witness[],\r\n    selectedText: TextData,\r\n    selectedWitness: Witness,\r\n    exportingWitness: boolean,\r\n    showPageImages: boolean,\r\n    textFontSize: number,\r\n    onToggledPageImages: () => void,\r\n    onSelectedWitness: () => void,\r\n    onChangedFontSize: () => void,\r\n    onExport?: () => void\r\n};\r\n\r\nconst TextHeading = (props: Props) => {\r\n    let name = \"\";\r\n    if (props.selectedText && props.selectedText.name) {\r\n\r\n        name = addTibetanShay(props.selectedText.name);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.headingContainer}>\r\n          \r\n            <div className={styles.topRow}>\r\n            <TabBar\r\n                witnesses={props.witnesses}\r\n                activeWitness={props.selectedWitness}\r\n                onSelectedWitness={props.onSelectedWitness}\r\n            />\r\n                {props.selectedWitness && (\r\n                    <div className={styles.controls}>\r\n                        {!props.selectedWitness.isWorking && (\r\n                            <ImageToggle\r\n                                showImages={props.showPageImages}\r\n                                onChange={props.onToggledPageImages}\r\n                            />\r\n                        )}\r\n                        <FontSize\r\n                            fontSize={props.textFontSize}\r\n                            onChange={props.onChangedFontSize}\r\n                        />\r\n                        {!props.exportingWitness && (\r\n                            <ExportControl onClick={props.onExport} />\r\n                        )}\r\n                         {/* <div className={styles.textHeadingloader}>\r\n                            <Loader loaded={!props.exportingWitness} scale={0.5} />\r\n                       </div> */}\r\n                    </div>\r\n                )}            \r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TextHeading;\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref =\n/*#__PURE__*/\n\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2z\"\n});\n\nvar _ref2 =\n/*#__PURE__*/\n\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fill: \"none\",\n  d: \"M0 0h24v24H0z\"\n});\n\nvar SvgExport = function SvgExport(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 24 24\"\n  }, props), _ref, _ref2);\n};\n\nexport default SvgExport;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;;;;;;AACA;AACA;AAGA;AAEA;AAAA;AAAA;AACA;AACA;AAHA;AAMA;AACA;AADA;AAGA;AAXA;AAeA;;;;AAnBA;AACA;AAqBA;;;;;;;;;;;AChCA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAKA;AACA;AACA;;;;;;;;;;;ACpCA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAHA;AACA;AAeA;;;;;;;;;;;ACxBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAOA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAjBA;AAAA;AACA;AADA;AAAA;AAAA;AAkBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AA7BA;AACA;AAgBA;AAAA;AAsBA;AAvCA;AAAA;AAAA;AAAA;AAAA;AAwCA;AACA;AACA;AAAA;AAAA;AACA;;;;AAlDA;AACA;;;;;;;;;;;;ACdA;AACA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AAAA;AAGA;AACA;AAFA;AAMA;AACA;AAFA;AAKA;AAAA;AAUA;AACA;AACA;;;;;;;;;;;;AClEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}