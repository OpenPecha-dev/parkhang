{"version":3,"file":"66.parkhang-dev.js","sources":["webpack://parkhang/./app/components/TextDetail/Button.css","webpack://parkhang/./app/components/TextDetail/QuestionEditor.css","webpack://parkhang/./app/components/TextDetail/QuestionEditor.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"save\":\"Button---save\",\"cancel\":\"Button---cancel\",\"buttonContainer\":\"Button---buttonContainer\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"editorContainer\":\"QuestionEditor---editorContainer\",\"textEditor\":\"QuestionEditor---textEditor\"};","import React from \"react\";\r\nimport styles from \"./QuestionEditor.css\";\r\nimport buttonStyles from \"./Button.css\";\r\nimport Annotation from \"lib/Annotation\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\ntype Props = {\r\n    question: Annotation,\r\n    questionQuote: React.Element<typeof React.Component>,\r\n    defaultTitle: string,\r\n    saveQuestion: (\r\n        question: Annotation,\r\n        title: string,\r\n        content: string\r\n    ) => void,\r\n    cancel: () => void\r\n};\r\n\r\ntype State = {\r\n    content: string\r\n};\r\n\r\nexport default class QuestionEditor extends React.Component<Props> {\r\n    textarea: HTMLTextAreaElement | null;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            content: props.question.content\r\n        };\r\n    }\r\n\r\n    save() {\r\n        const content = this.textarea ? this.textarea.value : \"\";\r\n\r\n        this.props.saveQuestion(\r\n            this.props.question,\r\n            this.props.defaultTitle,\r\n            content\r\n        );\r\n    }\r\n\r\n    cancel() {\r\n        this.props.cancel();\r\n    }\r\n\r\n    handleChange(e: Event) {\r\n        const content =\r\n            e.target instanceof HTMLTextAreaElement ? e.target.value : \"\";\r\n        this.setState((prevState, props) => {\r\n            return {\r\n                content: content\r\n            };\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.editorContainer}>\r\n                <div>{this.props.questionQuote}</div>\r\n                <textarea\r\n                    className={styles.textEditor}\r\n                    ref={(textarea: HTMLTextAreaElement | null) =>\r\n                        (this.textarea = textarea)\r\n                    }\r\n                    value={this.state.content}\r\n                    onChange={this.handleChange.bind(this)}\r\n                />\r\n                <div className={buttonStyles.buttonContainer}>\r\n                    <div\r\n                        className={buttonStyles.save}\r\n                        onClick={this.save.bind(this)}\r\n                    >\r\n                        <FormattedMessage id=\"annotation.save\" />\r\n                    </div>\r\n                    <div\r\n                        className={buttonStyles.cancel}\r\n                        onClick={this.cancel.bind(this)}\r\n                    >\r\n                        <FormattedMessage id=\"annotation.cancel\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;AAAA;AACA;;;;;;;;;;;ACDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AAiBA;;;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AADA;AAHA;AAMA;AACA;;;AACA;AACA;AAEA;AAKA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAGA;AACA;AANA;AAQA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AAGA;AACA;AAFA;AAIA;AAAA;AAKA;;;;AA/DA;AACA;;;;;A","sourceRoot":""}