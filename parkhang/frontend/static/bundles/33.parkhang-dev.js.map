{"version":3,"file":"33.parkhang-dev.js","sources":["webpack://parkhang/./app/components/Editors/TextSheet.js","webpack://parkhang/./app/components/Editors/resizerStyle.css","webpack://parkhang/./app/components/ErrorBoundary/ErrorBoundary.js","webpack://parkhang/./app/components/MediaComponent/MediaContainer.js","webpack://parkhang/./app/components/MediaComponent/MediaOptions.css","webpack://parkhang/./app/components/MediaComponent/MediaOptions.js","webpack://parkhang/./app/components/MediaComponent/index.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as reducers from \"reducers\";\r\nimport * as actions from \"actions\";\r\nimport MediaComponent from \"components/MediaComponent\";\r\nimport { batchActions } from \"redux-batched-actions\";\r\nimport { Box, Divider } from \"@mui/material\";\r\nimport Loader from \"react-loader\";\r\nimport ErrorBoundary from \"components/ErrorBoundary/ErrorBoundary\";\r\nimport SplitPane from \"react-split-pane\";\r\nimport styles from \"./resizerStyle.css\";\r\nimport classnames from \"classnames\";\r\nimport DraggableMedia from \"../MediaComponent/DraggableMedia\";\r\nconst TextDetailContainer2 = React.lazy(() =>\r\n    import(\"components/TextDetail2/TextDetailContainer\")\r\n);\r\nconst TextDetailContainer = React.lazy(() =>\r\n    import(\"components/TextDetail/TextDetailContainer\")\r\n);\r\n\r\nfunction TextSheet(props) {\r\n    let [landScape, setLandScape] = useState(true);\r\n    let editorRef = useRef(null);\r\n    const handleResize = (e) => {\r\n        let width = editorRef.current.clientWidth;\r\n        let height = editorRef.current.clientHeight;\r\n        if (width > height) {\r\n            setLandScape(true);\r\n        } else {\r\n            setLandScape(false);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        handleResize();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []);\r\n\r\n    return (\r\n        <div\r\n            ref={editorRef}\r\n            style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                overflow: \"hidden\",\r\n                position: \"relative\",\r\n            }}\r\n        >\r\n            {/* <SplitPane\r\n                defaultSize={props.Media.isPanelVisible ? \"35vh\" : 0}\r\n                size={props.Media.isPanelVisible ? \"35vh\" : 0}\r\n                split=\"horizontal\"\r\n                resizerClassName={classnames(styles.Resizer, styles.horizontal)}\r\n                resizerStyle={{\r\n                    display: !props.Media.isPanelVisible ? \"none\" : \"block\",\r\n                }}\r\n            >\r\n                {props.Media.isPanelVisible ? <MediaComponent /> : <div />} */}\r\n            <SplitPane\r\n                split={landScape ? \"vertical\" : \"horizontal\"}\r\n                size={props.isSecondWindowOpen ? \"50%\" : \"100%\"}\r\n                resizerClassName={classnames(\r\n                    styles.Resizer,\r\n                    { [styles.vertical]: landScape },\r\n                    { [styles.horizontal]: !landScape }\r\n                )}\r\n                onDragFinished={(width: number) => {\r\n                    if (width > 0) window.dispatchEvent(new Event(\"resize\"));\r\n                }}\r\n            >\r\n                <ErrorBoundary>\r\n                    <TextDetailContainer />\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    {props.isSecondWindowOpen && <TextDetailContainer2 />}\r\n                </ErrorBoundary>\r\n            </SplitPane>\r\n            {props.Media.isPanelVisible && (\r\n                <ErrorBoundary>\r\n                    <MediaComponent />\r\n                </ErrorBoundary>\r\n            )}\r\n            {/* </SplitPane> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): { user: User } => {\r\n    const isSecondWindowOpen = reducers.isSecondWindowOpen(state);\r\n    const Media = reducers.getMediaData(state);\r\n    return {\r\n        isSecondWindowOpen,\r\n        Media,\r\n    };\r\n};\r\n\r\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\r\n    const { dispatch } = dispatchProps;\r\n\r\n    return {\r\n        ...ownProps,\r\n        ...stateProps,\r\n    };\r\n};\r\nconst TextSheetContainer = connect(\r\n    mapStateToProps,\r\n    null,\r\n    mergeProps\r\n)(TextSheet);\r\n\r\nexport default TextSheetContainer;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Resizer\":\"resizerStyle---Resizer\",\"horizontal\":\"resizerStyle---horizontal\",\"vertical\":\"resizerStyle---vertical\",\"disabled\":\"resizerStyle---disabled\"};","import React from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        // Update state so the next render will show the fallback UI.\r\n        return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        // You can also log the error to an error reporting service\r\n        console.log(error, errorInfo);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            // You can render any custom fallback UI\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as reducers from \"reducers\";\r\nimport * as actions from \"actions\";\r\nimport MediaOptions from \"./MediaOptions\";\r\nimport DraggableMedia from \"./DraggableMedia\";\r\nconst mapStateToProps = (state) => {\r\n    const scrollToId = reducers.getScrollToId(state);\r\n    const syncIdOnClick = reducers.getSyncIdOnClick(state);\r\n    const imageData = reducers.getImageData(state);\r\n    const videoData = reducers.getVideoData(state);\r\n    let Media = reducers.getMediaData(state);\r\n    const selectedText = reducers.getSelectedText(state);\r\n    const isImagePortrait = reducers.isImagePortrait(state);\r\n    const alignmentData = reducers.getAlignment(state);\r\n    const witness = reducers.getSelectedTextWitnessId(state, selectedText.id);\r\n    const witnesses = reducers.getTextWitnesses(state, selectedText.id);\r\n    const ImageVersion = reducers.getSelectedImageVersion(state);\r\n    const selectedImage = reducers.getSelectedImage(state);\r\n    const imageScrollId = reducers.getImageScrollId(state);\r\n    const imageAlignmentById = reducers.getImageAlignmentById(state);\r\n    //  const selectedSegmentId=reducers.getSelectedSegmentId(state);\r\n\r\n    return {\r\n        scrollToId,\r\n        syncIdOnClick,\r\n        imageData,\r\n        videoData,\r\n        selectedMedia: Media,\r\n        selectedText,\r\n        isImagePortrait,\r\n        // selectedSegmentId,\r\n        alignmentData,\r\n        witness,\r\n        witnesses,\r\n        ImageVersion,\r\n        selectedImage,\r\n        imageScrollId,\r\n        imageAlignmentById,\r\n    };\r\n};\r\n\r\nconst matchDispatchToProps = (dispatch) => {\r\n    const toggleImage = (data) => dispatch(actions.changedShowPageImages(data));\r\n    const changeMediaSelection = (data) =>\r\n        dispatch(actions.mediaSelection(data));\r\n    const changeIsImagePortrait = (payload) =>\r\n        dispatch(actions.setIsImagePortrait(payload));\r\n    const changeImageVersion = (imageVersionId) =>\r\n        dispatch(actions.selectImageVersion(imageVersionId));\r\n    const changeSelectedImage = (payload) =>\r\n        dispatch(actions.selectImage(payload));\r\n    const onSelectedSearchResult = (\r\n        text: api.TextData,\r\n        start: number,\r\n        length: number,\r\n        selectedText: api.TextData | null\r\n    ) => {\r\n        if (!selectedText || selectedText.id !== text.id) {\r\n            dispatch(\r\n                batchActions([\r\n                    actions.selectedSearchResult(text.id, start, length),\r\n                    actions.selectedText(text),\r\n                ])\r\n            );\r\n        } else {\r\n            dispatch(actions.selectedSearchResult(text.id, start, length));\r\n        }\r\n    };\r\n    return {\r\n        toggleImage,\r\n        onSelectedSearchResult,\r\n        changeMediaSelection,\r\n        changeIsImagePortrait,\r\n        changeImageVersion,\r\n        changeSelectedImage,\r\n        changeSelectedRange: (payload) => {\r\n            dispatch(actions.changeSelectedRange(payload));\r\n        },\r\n        changeScrollToId: (payload) =>\r\n            dispatch(actions.changeScrollToId(payload)),\r\n    };\r\n};\r\n\r\nconst MediaContainer = connect(\r\n    mapStateToProps,\r\n    matchDispatchToProps\r\n)(DraggableMedia);\r\n\r\nexport default MediaContainer;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"MediaOption\":\"MediaOptions---MediaOption\",\"header\":\"MediaOptions---header\",\"closeBtn\":\"MediaOptions---closeBtn\"};","import React from \"react\";\r\nimport ImageComponent from \"./Image\";\r\nimport AudioComponent from \"./Audio\";\r\nimport VideoComponent from \"./Video\";\r\nimport styles from \"./MediaOptions.css\";\r\nimport CancelIcon from \"@mui/icons-material/Cancel\";\r\nimport { Box, IconButton } from \"@mui/material\";\r\n\r\nfunction MediaOptions(props) {\r\n    // if (props.selectedMedia.isImageVisible)\r\n    //     return <ImageComponent {...props} />;\r\n\r\n    return (\r\n        <Box\r\n            className={styles.MediaOption}\r\n            sx={{\r\n                boxShadow: 2,\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n            }}\r\n        >\r\n            <Box\r\n                className={styles.header}\r\n                sx={{ bgcolor: \"heading.main\", color: \"text.primary\" }}\r\n            >\r\n                <h3>\r\n                    {props.selectedMedia.isVideoVisible && \"VIDEO\"}\r\n                    {props.selectedMedia.isAudioVisible && \"AUDIO\"}\r\n                    {/* {isPortraitImage?\"portrait\":\"landscape\"} */}\r\n                </h3>\r\n                <IconButton\r\n                    className={styles.closeBtn}\r\n                    onClick={() => props.changeMediaSelection(null)}\r\n                >\r\n                    <CancelIcon />\r\n                </IconButton>\r\n            </Box>\r\n            <Box\r\n                sx={{\r\n                    height: \"100%\",\r\n                    paddingInline: 2,\r\n                    bgcolor: \"navbar.main\",\r\n                    color: \"texts.main\",\r\n                }}\r\n            >\r\n                {/* {props.selectedMedia.isVideoVisible && (\r\n                    <VideoComponent {...props} />\r\n                )}\r\n                {props.selectedMedia.isAudioVisible && (\r\n                    <AudioComponent {...props} />\r\n                )} */}\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default MediaOptions;\r\n","export { default } from \"./MediaContainer\";\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAsBA;AACA;AACA;AAKA;AACA;AACA;AAVA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAAA;AAMA;;;;;;;;;;;AChHA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AAFA;AAGA;AACA;;;AAMA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAjBA;AACA;AACA;AAAA;AAAA;AACA;;;;AATA;AACA;AAyBA;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAVA;AAaA;AACA;AACA;AAKA;;;;;;;;;;;ACzFA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAFA;AASA;AACA;AAAA;AAAA;AAAA;AAFA;AAUA;AACA;AAAA;AAAA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAJA;AADA;AAiBA;AACA;AACA;;;;;;;;;;;;ACxDA;AAAA;AAAA;AAAA;;;;;A","sourceRoot":""}