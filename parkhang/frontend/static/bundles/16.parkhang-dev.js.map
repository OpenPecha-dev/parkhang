{"version":3,"file":"16.parkhang-dev.js","sources":["webpack://parkhang/./app/components/MediaComponent/Audio.js","webpack://parkhang/./app/components/MediaComponent/DraggableMedia.js","webpack://parkhang/./app/components/MediaComponent/Video.js"],"sourcesContent":["import { Collapse } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport Player from \"react-howler-player\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nfunction Audio(props) {\r\n    const theme = useTheme();\r\n    let url = \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3\";\r\n    let playerRef = React.useRef(null);\r\n    const handleSeek = (e) => {\r\n        console.log(e);\r\n    };\r\n    const onPlayerReady = (data) => {\r\n        console.log(data);\r\n    };\r\n\r\n    return (\r\n        <Collapse in={props.open}>\r\n            <Player\r\n                profile=\"top_progress\"\r\n                src={[url]}\r\n                isDark={theme.palette.mode === \"dark\" ? true : false}\r\n                onLoad={onPlayerReady}\r\n                speedPanel={\"bottom\"}\r\n                ref={playerRef}\r\n                onPlay={handleSeek}\r\n            />\r\n        </Collapse>\r\n    );\r\n}\r\n\r\nexport default Audio;\r\n","import React from \"react\";\r\nimport Draggable from \"react-draggable\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport Paper, { PaperProps } from \"@mui/material/Paper\";\r\nimport { ResizableBox } from \"react-resizable\";\r\nimport Video from \"./Video\";\r\nimport Audio from \"./Audio\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { IconButton } from \"@mui/material\";\r\nfunction PaperComponent(props: PaperProps) {\r\n    return (\r\n        <Draggable handle=\"#draggable-dialog-title\" bounds=\"parent\">\r\n            <Paper {...props} />\r\n        </Draggable>\r\n    );\r\n}\r\n\r\nfunction DraggableMedia(props) {\r\n    const [hide, setHide] = React.useState(true);\r\n\r\n    const handleClose = () => {\r\n        props.changeMediaSelection(null);\r\n    };\r\n    const toggleHide = () => {\r\n        setHide((prev) => !prev);\r\n    };\r\n    if (props.selectedMedia.isImageVisible) return null;\r\n\r\n    return (\r\n        <PaperComponent\r\n            sx={{ position: \"absolute\", zIndex: 1, right: 0 }}\r\n\r\n            // onClose={handleClose}\r\n        >\r\n            {/* <ResizableBox height={350} width={400}> */}\r\n            <div className=\"Resizable-media-div\">\r\n                <div\r\n                    style={{\r\n                        cursor: \"move\",\r\n                        paddingInline: 20,\r\n                        paddingTop: 10,\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        alignItems: \"center\",\r\n                    }}\r\n                    id=\"draggable-dialog-title\"\r\n                >\r\n                    <h3>{props.selectedMedia.isVideoVisible && \"VIDEO\"}</h3>\r\n                    <h3>{props.selectedMedia.isAudioVisible && \"AUDIO\"}</h3>\r\n                    <div className=\"buttons-hide-close\">\r\n                        <IconButton onClick={toggleHide} disableRipple>\r\n                            {hide ? \"-\" : \"+\"}\r\n                        </IconButton>\r\n                        <IconButton onClick={handleClose} disableRipple>\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                </div>\r\n                <>\r\n                    {props.selectedMedia.isVideoVisible && (\r\n                        <Video {...props} open={hide} setOpen={setHide} />\r\n                    )}\r\n                    {props.selectedMedia.isAudioVisible && (\r\n                        <Audio open={hide} setOpen={setHide} />\r\n                    )}\r\n                </>\r\n            </div>\r\n            {/* </ResizableBox> */}\r\n        </PaperComponent>\r\n    );\r\n}\r\n\r\nexport default DraggableMedia;\r\n","import React, { useRef, useEffect, useState, useCallback } from \"react\";\r\nimport ReactPlayer from \"react-player\";\r\nimport _ from \"lodash\";\r\nimport { Collapse } from \"@mui/material\";\r\n\r\nfunction toHMS(seconds) {\r\n    var date = new Date(null);\r\n    date.setSeconds(seconds);\r\n    return date.toISOString().substr(11, 8);\r\n}\r\nfunction toSec(hms = \"\") {\r\n    var a = hms.split(\":\"); // split it at the colons\r\n    // minutes are worth 60 seconds. Hours are worth 60 minutes.\r\n    var seconds = +a[0] * 60 * 60 + +a[1] * 60 + +a[2];\r\n    return seconds;\r\n}\r\nfunction calTimeToSeek(maxValue, currentTime) {\r\n    let i = toSec(currentTime) / maxValue;\r\n    return parseFloat(i);\r\n}\r\nfunction getClosestNumber(arr, d) {\r\n    return arr.reduce((a, b) => (b <= d && a < b ? b : a), 0);\r\n}\r\nfunction Video(props) {\r\n    let textIdfromAlignment = props.alignmentData.text;\r\n    let sourceId = props?.videoData?.source?.text;\r\n    const VideoData = props?.videoData?.alignment || [];\r\n    const url = \"https://www.youtube.com/watch?v=2MMM_ggekfE\";\r\n    const [interval, setInterval] = useState({});\r\n    let VideoIdList = [];\r\n\r\n    // const syncIdOnScroll = props.syncIdOnScroll;\r\n    const syncIdOnClick = props.syncIdOnClick;\r\n    const [state, setState] = useState({\r\n        played: 0,\r\n        duration: 0,\r\n        playing: true,\r\n    });\r\n    if (!_.isEmpty(VideoData)) {\r\n        VideoIdList = VideoData.map((l) => parseInt(l.source_segment.start));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (textIdfromAlignment === props.selectedText.id) {\r\n            //     let intersection = syncIdOnScroll.filter(element => VideoIdList.includes(element));\r\n            //     newList= VideoData.filter(d=>d.source_segment===intersection[0]);\r\n            //     jumpToTime(newList[0]?.target_segment.start)\r\n            let ClickId = syncIdOnClick;\r\n            let closestID = getClosestNumber(VideoIdList, ClickId);\r\n            let data = VideoData.find(\r\n                (l) => l.source_segment.start === closestID.toString()\r\n            );\r\n            if (!_.isEmpty(data)) {\r\n                jumpToTime(data.target_segment.start);\r\n            }\r\n        }\r\n    }, [syncIdOnClick]);\r\n\r\n    const changeTextBackground = useCallback(() => {\r\n        let current = interval;\r\n        if (textIdfromAlignment === props.selectedText.id) {\r\n            for (let i = current.start; i < current.end; i++) {\r\n                let currentIds = document.getElementById(`s_${i}`);\r\n                if (currentIds) {\r\n                    currentIds.style.fontWeight = \"bold\";\r\n                }\r\n            }\r\n        }\r\n    }, [interval.start]);\r\n\r\n    useEffect(() => {\r\n        let timer = setTimeout(() => changeTextBackground(), 800);\r\n        let current = interval;\r\n        if (interval.start) {\r\n            props.changeScrollToId({\r\n                id: current.start || null,\r\n                from: \"video\",\r\n            });\r\n        }\r\n        return () => {\r\n            clearTimeout(timer);\r\n            for (let i = current.start; i < current.end; i++) {\r\n                let currentIds = document.getElementById(`s_${i}`);\r\n                if (currentIds) {\r\n                    currentIds.style.fontWeight = \"normal\";\r\n                }\r\n            }\r\n        };\r\n    }, [interval.start]);\r\n\r\n    const videoRef = useRef();\r\n\r\n    const jumpToTime = (time) => {\r\n        let newData = calTimeToSeek(state.duration, time);\r\n        videoRef.current.seekTo(parseFloat(newData));\r\n    };\r\n\r\n    const handleProgress = (e) => {\r\n        const played = e.playedSeconds;\r\n        const Interval = VideoData.find(\r\n            (time) =>\r\n                toSec(time.target_segment.start) < played &&\r\n                toSec(time.target_segment.end) > played\r\n        );\r\n        if (!_.isEmpty(Interval)) {\r\n            let source_segment = Interval.source_segment;\r\n            changeTextBackground();\r\n            setInterval({ ...source_segment });\r\n        }\r\n    };\r\n    if (VideoData.length === 0) return <div />;\r\n    if (sourceId !== props.selectedText.id) return <div />;\r\n    return (\r\n        <Collapse in={props.open}>\r\n            <ReactPlayer\r\n                url={url}\r\n                style={{ maxWidth: \"100%\" }}\r\n                ref={videoRef}\r\n                controls={true}\r\n                onDuration={(duration) =>\r\n                    setState({ ...state, duration: duration })\r\n                }\r\n                light\r\n                playing\r\n                onPlay={() => setState({ ...state, playing: true })}\r\n                onPause={() => setState({ ...state, playing: false })}\r\n                onProgress={handleProgress}\r\n                onError={() => console.log(\"error in media sec\")}\r\n            />\r\n        </Collapse>\r\n    );\r\n}\r\n\r\nexport default Video;\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AATA;AAaA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAOA;AAAA;AAAA;AAGA;AAAA;AAAA;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxbA;AAiBA;AACA;AACA;;;;A","sourceRoot":""}