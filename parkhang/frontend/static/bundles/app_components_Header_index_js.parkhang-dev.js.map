{"version":3,"file":"app_components_Header_index_js.parkhang-dev.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;;AAOA;AACA;AACA;AAEA;;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;;AAEA;AACA;AAIA;AACA;AACA;AADA;AAGA;AAJA;AAMA;;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAPA;AAWA;AAAA;AAAA;AAAA;AAFA;AAOA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUA;AACA;AACA;AADA;AAGA;AAMA;AACA;AAAA;AAAA;AAAA;AAFA;AAKA;AAAA;AAOA;AACA;AAAA;AAAA;AAAA;AAFA;AAKA;AAAA;AAOA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AAMA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAHA;AASA;AAAA;AAIA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAYA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAxCA;AAuDA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAVA;AAFA;AARA;AAmCA;AAAA;AAAA;AAAA;AAIA;AAaA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AAFA;AAKA;;AAEA;AACA;AADA;AAIA;AAAA;AACA;AAAA;AADA;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA;AACA;AACA;;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;;AAHA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AADA;AASA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAYA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AATA;AAWA;AAAA;AAGA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAIA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAdA;AAgBA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;;AAJA;AAOA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAKA;AACA;AACA;AADA;AAFA;AAQA;AACA;AACA;AAFA;AAOA;AACA;AATA;AAiBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AASA;AACA;AAFA;AAQA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;;AAEA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AAfA;AAiBA;;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1bA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AE/BA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAMA;;;;;;;;;;;;;AACA;AAAA;;AACA;AACA;AAEA;AACA;AACA;AAHA;AAaA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAHA;AASA;;;;AA9BA;;AAiCA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;;AACA;AACA;AACA;;;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAEA;AAAA;AAIA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;;AAEA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AAFA;AAAA;AAAA;;AAKA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;ACtBA;;;;;;;;;;ACAA;AACA;;;;;;;;;;ACDA;AACA;;;;;;;;;;ACDA;AACA;;;;;;;;;;ACDA;AACA","sources":["webpack://parkhang/./app/images/discourse_user.svg","webpack://parkhang/./app/images/hamburger.svg","webpack://parkhang/./app/components/Header/AccountButton.js","webpack://parkhang/./app/components/Header/AccountOverlay.js","webpack://parkhang/./app/components/Header/Header.js","webpack://parkhang/./app/components/Header/ToggleTheme.js","webpack://parkhang/./app/components/Header/index.js","webpack://parkhang/./app/components/LocaleSwitcher/LocaleSwitcher.js","webpack://parkhang/./app/components/UI/NavigationButton.js","webpack://parkhang/./app/components/utility/useLocalStorage.js","webpack://parkhang/./app/images/lopenling_logo_173x.png","webpack://parkhang/./app/components/Header/AccountOverlay.css","webpack://parkhang/./app/components/Header/Header.css","webpack://parkhang/./app/components/LocaleSwitcher/LocaleSwitcher.css","webpack://parkhang/./app/components/UI/NavigationButton.css"],"sourcesContent":["var _path;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nvar SvgDiscourseUser = function SvgDiscourseUser(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 448 512\",\n    fill: \"currentColor\"\n  }, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm89.6 32h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-74.2-60.2-134.4-134.4-134.4z\"\n  })));\n};\n\nexport default SvgDiscourseUser;","var _style, _path;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nvar SvgHamburger = function SvgHamburger(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 20\",\n    className: \"hamburger_svg__hamburgerIcon\"\n  }, props), _style || (_style = /*#__PURE__*/React.createElement(\"style\", null, \".hamburger_svg__hamburgerIcon .hamburger_svg__line{stroke:currentColor;stroke-width:3px}\")), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"hamburger_svg__line\",\n    d: \"M0 2h24M0 10h24M0 18h24\"\n  })));\n};\n\nexport default SvgHamburger;","// @flow\nimport React from \"react\";\nimport { Avatar, Tooltip, IconButton } from \"@mui/material\";\n\ntype Props = {\n    name: string,\n    onClick: () => void,\n};\n\nfunction stringToColor(string: string) {\n    let hash = 0;\n    let i;\n\n    /* eslint-disable no-bitwise */\n    for (i = 0; i < string.length; i += 1) {\n        hash = string.charCodeAt(i) + ((hash << 5) - hash);\n    }\n\n    let color = \"#\";\n\n    for (i = 0; i < 3; i += 1) {\n        const value = (hash >> (i * 8)) & 0xff;\n        color += `00${value.toString(16)}`.slice(-2);\n    }\n    /* eslint-enable no-bitwise */\n\n    return color;\n}\n\nfunction stringAvatar(name: string) {\n    let nameformat =\n        name.split(\" \")[1] !== undefined\n            ? `${name.split(\" \")[0][0]}${name.split(\" \")[1][0]}`\n            : `${name.split(\" \")[0][0]}`;\n    return {\n        sx: {\n            bgcolor: stringToColor(name),\n        },\n        children: nameformat,\n    };\n}\n\nconst AccountButton = (props: Props) => {\n    return (\n        <Tooltip title=\"Account settings\">\n            <IconButton\n                onClick={props.onClick}\n                id=\"account-menu-button\"\n                size=\"small\"\n                sx={{ ml: 2 }}\n                aria-controls={open ? \"account-menu\" : undefined}\n                aria-haspopup=\"true\"\n                aria-expanded={open ? \"true\" : undefined}\n            >\n                <Avatar\n                    {...stringAvatar(props.name)}\n                    sx={{ width: 28, height: 28 }}\n                />\n            </IconButton>\n        </Tooltip>\n    );\n};\n\nexport default AccountButton;\n","// @flow\nimport React from \"react\";\nimport { FormattedMessage, injectIntl } from \"react-intl\";\nimport User from \"lib/User\";\nimport styles from \"./AccountOverlay.css\";\nimport { Avatar, MenuItem, Divider, ListItemIcon, Link } from \"@mui/material\";\nimport PersonAdd from \"@mui/icons-material/PersonAdd\";\nimport Settings from \"@mui/icons-material/Settings\";\nimport Logout from \"@mui/icons-material/Logout\";\n\ntype Props = {\n    top: number,\n    right: number,\n    user: User,\n    intl: { formatMessage: ({ [id: string]: string }) => string },\n    visible: Boolean,\n};\n\nconst AccountOverlay = (props: Props) => {\n    let signOutTitle = props.intl.formatMessage({\n        id: \"header.logout\",\n    });\n    return (\n        <>\n            <MenuItem>{props.user.name || \"Guest\"}</MenuItem>\n            <Divider />\n            <MenuItem>\n                <Link\n                    href=\"https://www.lopenling.org\"\n                    style={{ textDecoration: \"none\", color: \"gray\" }}\n                >\n                    <ListItemIcon>\n                        <Settings fontSize=\"small\" />\n                    </ListItemIcon>\n                    Settings\n                </Link>\n            </MenuItem>\n            <MenuItem>\n                <Link\n                    href=\"/discourse/logout/\"\n                    style={{ textDecoration: \"none\", color: \"gray\" }}\n                >\n                    <ListItemIcon>\n                        <Logout fontSize=\"small\" />\n                    </ListItemIcon>\n                    {signOutTitle}\n                </Link>\n            </MenuItem>\n        </>\n    );\n};\n\nexport default injectIntl(AccountOverlay);\n","// @flow\nimport React, { useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport classnames from \"classnames\";\nimport styles from \"./Header.css\";\nimport User from \"lib/User\";\nimport type { AppState } from \"reducers\";\nimport { FormattedMessage, injectIntl } from \"react-intl\";\nimport LocaleSwitcher from \"components/LocaleSwitcher/LocaleSwitcher\";\nimport NavigationButton from \"components/UI/NavigationButton\";\nimport AccountButton from \"./AccountButton\";\nimport AccountOverlay from \"./AccountOverlay\";\nimport {\n    getTextListVisible,\n    getAccountOverlayVisible,\n    getUser,\n    getActiveLocale,\n    getTheme,\n    getSelectedText,\n} from \"reducers\";\nimport * as actions from \"actions\";\nimport lopenlingLogo from \"images/lopenling_logo_173x.png\";\nimport UserIcon from \"images/discourse_user.svg\";\nimport { NavLink } from \"redux-first-router-link\";\nimport ToggleTheme from \"./ToggleTheme\";\nimport { pageList } from \"reducers/pages\";\nimport {\n    Button,\n    Tooltip,\n    Stack,\n    Box,\n    Menu,\n    IconButton,\n    MenuItem,\n    AppBar,\n} from \"@mui/material\";\nimport { Person as PersonIcon, Menu as MenuIcon } from \"@mui/icons-material\";\nimport _ from \"lodash\";\ntype LoginProps = {\n    successRedirect: string,\n    csrfToken: string,\n};\nlet linkToEditor = \"/editor\";\n\nexport const LoginControls = (props: LoginProps) => (\n    <Stack direction=\"row\" spacing={2}>\n        <a href={SSO_SIGNUP_URL}>\n            <Button\n                variant=\"contained\"\n                className={styles.ButtonText}\n                style={{\n                    padding: \"6px 10px\",\n                    boxShadow:\n                        \"0px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%)\",\n                }}\n            >\n                <FormattedMessage id=\"header.signUp\" />\n            </Button>\n        </a>\n\n        <form method=\"post\" action=\"/discourse/login_redirect/\">\n            {/* <IconButton>\n                <UserIcon width=\"11\" />\n            </IconButton> */}\n            <Button\n                variant=\"contained\"\n                type=\"submit\"\n                className={styles.ButtonText}\n                sx={{\n                    padding: \"6px 10px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    boxShadow:\n                        \"0px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%)\",\n                }}\n            >\n                <PersonIcon style={{ height: 16, width: 16 }} />\n                <FormattedMessage id=\"header.login\" />\n            </Button>\n            <input\n                type=\"hidden\"\n                name=\"csrfmiddlewaretoken\"\n                value={props.csrfToken}\n            />\n            <input\n                type=\"hidden\"\n                name=\"success_redirect\"\n                value={props.successRedirect}\n            />\n        </form>\n    </Stack>\n);\n\ntype LoggedInControlsProps = {\n    user: User,\n    overlayVisible: boolean,\n    accountButtonClicked: () => void,\n};\n\nexport const LoggedInControls = (props: LoggedInControlsProps) => {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n        props.accountButtonClicked();\n        setAnchorEl(event.currentTarget);\n    };\n    return (\n        <div className={styles.controls}>\n            <AccountButton name={props.user.name} onClick={handleClick} />\n            <Menu\n                anchorEl={anchorEl}\n                id=\"account-menu\"\n                open={props.overlayVisible || false}\n                onClose={props.accountButtonClicked}\n                transformOrigin={{ horizontal: \"right\", vertical: \"top\" }}\n                anchorOrigin={{ horizontal: \"right\", vertical: \"top\" }}\n                style={{ top: 20 }}\n                PaperProps={{\n                    elevation: 0,\n                    sx: {\n                        overflow: \"visible\",\n                        filter: \"drop-shadow(0px 2px 8px rgba(0,0,0,0.32))\",\n                        mt: 1.5,\n                        \"& .MuiAvatar-root\": {\n                            width: 32,\n                            height: 32,\n                            ml: -0.5,\n                            mr: 1,\n                        },\n                        \"&:before\": {\n                            content: '\"\"',\n                            display: \"block\",\n                            position: \"absolute\",\n                            top: 0,\n                            right: 14,\n                            width: 10,\n                            height: 10,\n                            bgcolor: \"background.paper\",\n                            transform: \"translateY(-50%) rotate(45deg)\",\n                            zIndex: 0,\n                        },\n                    },\n                }}\n            >\n                <AccountOverlay top={60} right={0} user={props.user} />\n            </Menu>\n        </div>\n    );\n};\n\ntype HeaderProps = {\n    user: User,\n    activeLocale: string,\n    accountOverlayVisible: boolean,\n    navigationButtonClicked: () => void,\n    intl: { formatMessage: ({ [id: string]: string }) => string },\n    accountButtonClicked: () => void,\n    successRedirect: string,\n    csrfToken: string,\n};\n\nexport const Header = (props: HeaderProps) => {\n    const [anchorElNav, setAnchorElNav] = React.useState(null);\n    const selectedText = props.selectedText;\n    let controls = null;\n    if (props.user.isLoggedIn) {\n        controls = (\n            <LoggedInControls\n                user={props.user}\n                overlayVisible={props.accountOverlayVisible}\n                accountButtonClicked={props.accountButtonClicked}\n            />\n        );\n    } else {\n        controls = (\n            <LoginControls\n                successRedirect={props.successRedirect}\n                csrfToken={props.csrfToken}\n            />\n        );\n    }\n\n    let toggleTitle = props.intl?.formatMessage({\n        id: \"header.toggleTextList\",\n    });\n\n    const LinkRef = React.forwardRef((props, ref) => (\n        <div ref={ref}>\n            <NavLink {...props} />\n        </div>\n    ));\n    React.useEffect(() => {\n        if (selectedText) {\n            linkToEditor = `/texts/${selectedText.id}`;\n        }\n    }, [selectedText]);\n\n    const handleOpenNavMenu = (event) => {\n        setAnchorElNav(event.currentTarget);\n    };\n    const handleCloseNavMenu = () => {\n        setAnchorElNav(null);\n    };\n    const themeChange = useCallback((e) => props.themeButtonClicked(e), []);\n    return (\n        <AppBar\n            position=\"static\"\n            color=\"navbar\"\n            sx={{ boxShadow: 1, zIndex: 3 }}\n            // className={styles.header}\n        >\n            <Stack\n                direction=\"row\"\n                alignItems=\"center\"\n                justifyContent={\"space-between\"}\n                sx={{\n                    height: \"100%\",\n                    maxWidth: \"100%\",\n                    paddingInline: 1,\n                }}\n            >\n                <Box\n                    sx={{\n                        flexGrow: 1,\n                        gap: 3,\n                        display: { xs: \"none\", md: \"flex\" },\n                        alignItems: { md: \"center\" },\n                    }}\n                >\n                    {props.page !== \"Editors\" && (\n                        <NavLink to=\"/\">\n                            <div className={styles.logo}>\n                                <img\n                                    src={lopenlingLogo}\n                                    height=\"37\"\n                                    width={173}\n                                    alt=\"parkhang-logo\"\n                                />\n                            </div>\n                        </NavLink>\n                    )}\n\n                    {props.page === \"Editors\" && (\n                        <NavigationButton\n                            onClick={props.navigationButtonClicked}\n                            className={styles.navigationButton}\n                            title={toggleTitle}\n                            isListVisible={props.textListVisible}\n                        />\n                    )}\n                    <Box display={{ xs: \"none\", md: \"flex\" }}>\n                        {pageList.map((page, i) => {\n                            return (\n                                <Button\n                                    to={\n                                        page.pageName === \"Editors\"\n                                            ? linkToEditor\n                                            : page.url\n                                    }\n                                    variant=\"text\"\n                                    component={LinkRef}\n                                    color=\"links\"\n                                    key={page.id}\n                                >\n                                    <FormattedMessage id={page.id} />\n                                </Button>\n                            );\n                        })}\n\n                        <Tooltip title=\"Forum\">\n                            <Button\n                                href={\"https://lopenling.org\"}\n                                variant=\"text\"\n                                component={\"a\"}\n                                color=\"links\"\n                            >\n                                <FormattedMessage id={\"lopenlingForum\"} />\n                            </Button>\n                        </Tooltip>\n                        <Button\n                            href={\"https://www.nalanda.works\"}\n                            variant=\"text\"\n                            component={\"a\"}\n                            color=\"links\"\n                        >\n                            <FormattedMessage id={\"Nalanda\"} />\n                        </Button>\n                    </Box>\n                </Box>\n                <Box sx={{ display: { xs: \"block\", md: \"none\" } }}>\n                    <IconButton\n                        size=\"small\"\n                        aria-label=\"account of current user\"\n                        aria-controls=\"account-appbar\"\n                        aria-haspopup=\"true\"\n                        onClick={handleOpenNavMenu}\n                        color=\"inherit\"\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Menu\n                        id=\"menu-appbar\"\n                        anchorEl={anchorElNav}\n                        anchorOrigin={{\n                            vertical: \"bottom\",\n                            horizontal: \"left\",\n                        }}\n                        keepMounted\n                        transformOrigin={{\n                            vertical: \"top\",\n                            horizontal: \"left\",\n                        }}\n                        open={Boolean(anchorElNav)}\n                        onClose={handleCloseNavMenu}\n                        sx={{ display: { xs: \"block\", md: \"none\" } }}\n                    >\n                        <MenuItem onClick={handleCloseNavMenu}>\n                            <Button\n                                to={\"/\"}\n                                color=\"links\"\n                                component={LinkRef}\n                                variant=\"text\"\n                            >\n                                <FormattedMessage id={\"header.texts\"} />\n                            </Button>\n                        </MenuItem>\n                        <MenuItem onClick={handleCloseNavMenu}>\n                            <Button\n                                to={linkToEditor}\n                                component={LinkRef}\n                                variant=\"text\"\n                                color=\"links\"\n                                // disabled={_.isEmpty(props.text)}\n                            >\n                                <FormattedMessage id={\"header.editor\"} />\n                            </Button>\n                        </MenuItem>\n                        <MenuItem onClick={handleCloseNavMenu}>\n                            <Button\n                                href={\"https://www.lopenling.org\"}\n                                color=\"links\"\n                                variant=\"text\"\n                                component={\"a\"}\n                            >\n                                <FormattedMessage id={\"lopenlingForum\"} />\n                            </Button>\n                        </MenuItem>\n                        <MenuItem onClick={handleCloseNavMenu}>\n                            <Button\n                                href={\"https://www.nalanda.works\"}\n                                color=\"links\"\n                                variant=\"text\"\n                                component={\"a\"}\n                            >\n                                <FormattedMessage id={\"Nalanda\"} />\n                            </Button>\n                        </MenuItem>\n\n                        <MenuItem\n                            onClick={handleCloseNavMenu}\n                            sx={{\n                                display:\n                                    props.page !== \"Editors\" ? \"none\" : \"block\",\n                            }}\n                        >\n                            <Button\n                                sx={{\n                                    color: \"links\",\n                                    display:\n                                        props.page !== \"Editors\"\n                                            ? \"none\"\n                                            : \"block\",\n                                }}\n                                variant=\"text\"\n                                onClick={props.navigationButtonClicked}\n                            >\n                                Options\n                            </Button>\n                        </MenuItem>\n                    </Menu>\n                </Box>\n                <Stack\n                    direction=\"row\"\n                    alignItems=\"center\"\n                    sx={{ float: { sx: \"right\" } }}\n                >\n                    <LocaleSwitcher />\n                    {/* <TranslateButton /> */}\n                    {controls}\n                    <ToggleTheme\n                        theme={props.theme}\n                        changeTheme={themeChange}\n                    />\n                </Stack>\n            </Stack>\n        </AppBar>\n    );\n};\n\nconst mapStateToProps = (state: AppState): { user: User } => {\n    const user = getUser(state);\n    const activeLocale = getActiveLocale(state);\n    const successRedirect = document.location.pathname;\n    // TODO: move global CSRF_TOKEN into redux\n    const csrfToken = CSRF_TOKEN;\n    const page = state.page;\n    return {\n        user: user,\n        activeLocale: activeLocale,\n        textListIsVisible: getTextListVisible(state),\n        accountOverlayVisible: getAccountOverlayVisible(state),\n        textListVisible: getTextListVisible(state),\n        successRedirect: successRedirect,\n        csrfToken: csrfToken,\n        theme: getTheme(state),\n        text: getSelectedText(state),\n        page,\n        selectedText: getSelectedText(state),\n    };\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\n    return {\n        ...ownProps,\n        ...stateProps,\n        navigationButtonClicked: () => {\n            dispatchProps.dispatch(\n                actions.changedTextListVisible(!stateProps.textListIsVisible)\n            );\n        },\n        accountButtonClicked: () => {\n            dispatchProps.dispatch(\n                actions.changedAccountOverlay(!stateProps.accountOverlayVisible)\n            );\n        },\n        themeButtonClicked: (payload) => {\n            dispatchProps.dispatch(actions.changeTheme(payload));\n        },\n    };\n};\n\nconst HeaderContainer = connect(mapStateToProps, null, mergeProps)(Header);\n\nexport default injectIntl(HeaderContainer);\n","import { Box, IconButton } from \"@mui/material\";\nimport React, { useEffect } from \"react\";\nimport Brightness4Icon from \"@mui/icons-material/Brightness4\";\nimport Brightness7Icon from \"@mui/icons-material/Brightness7\";\nimport { useTheme } from \"@mui/material/styles\";\nimport useLocalStorage from \"components/utility/useLocalStorage\";\nfunction ToggleTheme({ changeTheme }) {\n    const [selectedMode, setSelectedMode] = useLocalStorage(\"theme\", \"light\");\n    const theme = useTheme();\n    const handleThemeChange = () => {\n        if (theme.palette.mode === \"dark\") {\n            setSelectedMode(\"light\");\n        } else {\n            setSelectedMode(\"dark\");\n        }\n    };\n    useEffect(() => {\n        changeTheme(selectedMode);\n    }, [selectedMode]);\n\n    return (\n        <IconButton sx={{ ml: 1 }} onClick={handleThemeChange} color=\"inherit\">\n            {theme.palette.mode === \"dark\" ? (\n                <Brightness7Icon />\n            ) : (\n                <Brightness4Icon />\n            )}\n        </IconButton>\n    );\n}\n\nexport default ToggleTheme;\n","export { default } from \"./Header\";\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport classnames from \"classnames\";\nimport LanguageIcon from \"@mui/icons-material/Language\";\nimport * as reducers from \"reducers\";\nimport * as actions from \"actions\";\nimport { LocalesList } from \"reducers/locales\";\nimport type { AppState } from \"reducers\";\nimport styles from \"./LocaleSwitcher.css\";\nimport { Select } from \"@mui/material\";\ntype Props = {\n  locales: LocalesList,\n  selectLocale: (locale: string) => void,\n};\n\nclass LocaleSwitcher extends React.Component<Props> {\n  render() {\n    let locales = this.props.locales.map((localeData) => {\n      return (\n        <option\n          key={localeData.locale}\n          value={localeData.locale}\n          className={styles.localeOption}\n        >\n          {/* <div\n            key={localeData.locale}\n            // onClick={() => this.props.selectLocale(localeData.locale)}\n          > */}\n          {localeData.displayName}\n          {/* </div> */}\n        </option>\n      );\n    });\n    return (\n      <div style={{ display: \"flex\" }}>\n        <LanguageIcon />\n        <select\n          onChange={(e) => this.props.selectLocale(e.target.value)}\n          value={this.props.activeLocale}\n          className={styles.localeOptions}\n        >\n          {locales}\n        </select>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: AppState) {\n  const locales = reducers.getLocales(state);\n  const activeLocale = reducers.getActiveLocale(state);\n  return {\n    locales: locales,\n    activeLocale,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    selectLocale: (locale: string) => {\n      dispatch(actions.selectedLocale(locale));\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocaleSwitcher);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport styles from \"./NavigationButton.css\";\nimport HamburgerIcon from \"images/hamburger.svg\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\ntype Props = {\n    onClick?: () => void,\n    className?: string,\n    title?: string,\n    isListVisible: Boolean,\n};\n\nconst NavigationButton = (props: Props) => {\n    let classNames = [styles.button];\n    if (props.className) {\n        classNames.push(props.className);\n    }\n    // if (props.isListVisible) return null;\n    return (\n        <IconButton\n            aria-label=\"Navigation\"\n            className={classnames(...classNames)}\n            onClick={props.onClick}\n            title={props.title}\n        >\n            {!props.isListVisible ? (\n                <HamburgerIcon fill=\"currentColor\" />\n            ) : (\n                <CloseIcon fill=\"currentColor\" />\n            )}\n        </IconButton>\n    );\n};\n\nexport default NavigationButton;\n","import {useState,useEffect} from 'react'\n\nfunction getSavedValue(key,initialValue){\n    const savedValue=JSON.parse(localStorage.getItem(key))\n    if (savedValue) return savedValue\n    \n    // if (initialValue instanceof function) return initialValue()\n\n    return initialValue\n}\n\nexport default function useLocalStorage(key,initialValue){\n    const [value,setValue]=useState(()=>{\n        return getSavedValue(key,initialValue)\n         })\n\n\n         useEffect(()=>{\n        localStorage.setItem(key,JSON.stringify(value))\n         },[value])\n    return [value,setValue]\n\n}","export default __webpack_public_path__ + \"ea9a1cd4d17aad5a9c5bdfde6acaad2e.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"AccountOverlay---overlay\",\"username\":\"AccountOverlay---username\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"header-height\":\"40px\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"headerHeight\":\"40px\",\"header\":\"Header---header\",\"logo\":\"Header---logo\",\"navigationButton\":\"Header---navigationButton\",\"loginButton\":\"Header---loginButton\",\"ButtonText\":\"Header---ButtonText\",\"buttonLink\":\"Header---buttonLink\",\"controls\":\"Header---controls\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"localeOptions\":\"LocaleSwitcher---localeOptions\",\"localeOption\":\"LocaleSwitcher---localeOption\",\"selected\":\"LocaleSwitcher---selected\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"NavigationButton---button\"};"],"names":[],"sourceRoot":""}