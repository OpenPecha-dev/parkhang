{"version":3,"file":"14.parkhang-dev.js","sources":["webpack://parkhang/./app/components/TextDetail/AnnotationDetail.css","webpack://parkhang/./app/components/TextDetail/AnnotationDetail.js","webpack://parkhang/./app/images/check_circle.svg"],"sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"annotationDetail\":\"AnnotationDetail---annotationDetail\",\"active\":\"AnnotationDetail---active\",\"annotationHeader\":\"AnnotationDetail---annotationHeader\",\"activeIcon\":\"AnnotationDetail---activeIcon\",\"editing\":\"AnnotationDetail---editing\",\"actionButtons\":\"AnnotationDetail---actionButtons\",\"edit\":\"AnnotationDetail---edit\",\"editImage\":\"AnnotationDetail---editImage\",\"save\":\"AnnotationDetail---save\",\"cancel\":\"AnnotationDetail---cancel\"};","// @flow\r\nimport React, { useState } from \"react\";\r\nimport classnames from \"classnames\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport styles from \"./AnnotationDetail.css\";\r\nimport type { AnnotationData } from \"api\";\r\nimport CheckIcon from \"images/check_circle.svg\";\r\nimport colours from \"css/colour.css\";\r\nimport ApplyTooltip from \"../UI/ApplyTooltip\";\r\nexport type Props = {\r\n    annotationData: AnnotationData,\r\n    isActive: boolean,\r\n    selectAnnotationHandler: () => void,\r\n    isLoggedIn: boolean,\r\n    editAnnotationHandler: () => void,\r\n    fontSize: Number,\r\n    isWorkingSection: boolean,\r\n};\r\nconst MAXIMUM_TEXT_LENGTH = 250;\r\n\r\nconst AnnotationDetail = (props: Props) => {\r\n    const [imageUrl, setImageUrl] = useState(null);\r\n\r\n    function longest_str_in_array(arra) {\r\n        var max_str = arra[0].length;\r\n        var ans = arra[0].length;\r\n        for (var i = 0; i < arra.length; i++) {\r\n            var maxi = arra[i].length;\r\n            if (maxi > max_str) {\r\n                ans = arra[i].length;\r\n                max_str = maxi;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n    function mergeArray(arr) {\r\n        var textCount = arr.length;\r\n        var maxPerLine = 55;\r\n\r\n        for (\r\n            var i = 0;\r\n            i < Math.ceil(arr.join().length / maxPerLine) + 1;\r\n            i++\r\n        ) {\r\n            if (arr[i] && arr[i + 1] && arr[i].length < maxPerLine) {\r\n                arr[i] = arr[i] + \" \" + arr[i + 1];\r\n                arr.splice(i + 1, 1);\r\n                mergeArray(arr);\r\n            } else if (arr[i] && arr[i + 1] && arr[i].length > maxPerLine) {\r\n                // code to cut selected text should be here\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    let desc = (\r\n        <p>\r\n            &lt;\r\n            <FormattedMessage id=\"annotation.delete\" />\r\n            &gt;\r\n        </p>\r\n    );\r\n\r\n    let content = props.annotationData.content;\r\n\r\n    if (content.trim() !== \"\") {\r\n        if (content.length > MAXIMUM_TEXT_LENGTH) {\r\n            content = content.substr(0, MAXIMUM_TEXT_LENGTH) + \"â€¦\";\r\n        }\r\n        // content variable is the selected trimmed context\r\n        desc = <p>{content}</p>;\r\n    }\r\n\r\n    let classes = [styles.annotationDetail];\r\n\r\n    if (props.isActive) {\r\n        classes.push(styles.active);\r\n    }\r\n\r\n    let className = classnames(...classes);\r\n    return (\r\n        <div className={className} onClick={props.selectAnnotationHandler}>\r\n            <div className={styles.annotationHeader}>\r\n                {props.isActive && (\r\n                    <div className={styles.activeIcon}>\r\n                        <CheckIcon\r\n                            style={{ fill: colours.activeButton }}\r\n                            width={15}\r\n                            height={15}\r\n                        />\r\n                    </div>\r\n                )}\r\n                <h3>{props.annotationData.name}</h3>\r\n                {props.isLoggedIn && props.isActive && (\r\n                    <button\r\n                        style={{ display: \"none\" }}\r\n                        className={styles.edit}\r\n                        onClick={props.editAnnotationHandler}\r\n                        id=\"editBtn\"\r\n                    ></button>\r\n                )}\r\n            </div>\r\n\r\n            {!props.isWorkingSection && desc}\r\n\r\n            {/* {props.isWorkingSection  && <ShareButton props={props}/>} */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnnotationDetail;\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref =\n/*#__PURE__*/\n\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M0 0h24v24H0z\",\n  fill: \"none\"\n});\n\nvar _ref2 =\n/*#__PURE__*/\n\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n});\n\nvar SvgCheckCircle = function SvgCheckCircle(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 24 24\"\n  }, props), _ref, _ref2);\n};\n\nexport default SvgCheckCircle;"],"mappings":";;;;;;;;;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAUA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAHA;AAUA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAcA;AACA;AACA;;;;;;;;;;;;AC9GA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}