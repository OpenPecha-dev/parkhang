{"version":3,"file":"67.parkhang-dev.js","sources":["webpack://parkhang/./app/components/TextDetail/TextList.css","webpack://parkhang/./app/components/TextDetail/TextList.js","webpack://parkhang/./app/components/TextDetail/TextListContainer.js","webpack://parkhang/./node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textlist\":\"TextList---textlist\",\"open\":\"TextList---open\"};","import React, {\r\n    useState,\r\n    useRef,\r\n    useCallback,\r\n    useMemo,\r\n    useEffect,\r\n} from \"react\";\r\nimport {\r\n    List,\r\n    AutoSizer,\r\n    CellMeasurer,\r\n    CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport classname from \"classnames\";\r\nimport styles from \"./TextList.css\";\r\nimport {\r\n    TextField,\r\n    ClickAwayListener,\r\n    Box,\r\n    Typography,\r\n    Button,\r\n    Grow,\r\n} from \"@mui/material\";\r\nimport addShay from \"lib/addTibetanShay\";\r\nimport { filter } from \"lodash\";\r\nfunction TextList(props) {\r\n    const temptext = useRef(props.texts);\r\n    const [textslist, setTextList] = useState(temptext.current);\r\n    const [filterValue, setFilterValue] = useState(null);\r\n    const onSelectedText = props.onSelectedText;\r\n    const selectedText = props.selectedText;\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    let selected = selectedText?.name;\r\n    const cache = useRef(\r\n        new CellMeasurerCache({\r\n            fixedHeight: true,\r\n            defaultHeight: 40,\r\n        })\r\n    );\r\n\r\n    let classes = [styles.textlist];\r\n    useEffect(() => {\r\n        let temp = [];\r\n        if (filterValue === \"\") {\r\n            setTextList([...temptext.current]);\r\n        }\r\n        if (filterValue !== null && filterValue !== \"\") {\r\n            temp = temptext.current.filter((val) => {\r\n                return val.name.includes(filterValue);\r\n            });\r\n            setTextList([...temp]);\r\n        }\r\n    }, [filterValue]);\r\n    const handleClick = () => {\r\n        setIsOpen((prev) => !prev);\r\n        if (isOpen === false) classes.push(styles.open);\r\n    };\r\n    const handleChange = (e) => {\r\n        let value = e.target.value;\r\n        setFilterValue(value);\r\n    };\r\n\r\n    const rowRenderer = React.useCallback(\r\n        ({ key, index, style, parent }) => {\r\n            let data = textslist[index];\r\n            return (\r\n                <CellMeasurer\r\n                    key={`optionvalues-${key}`}\r\n                    cache={cache.current}\r\n                    parent={parent}\r\n                    columnIndex={0}\r\n                    rowIndex={index}\r\n                >\r\n                    <div\r\n                        style={style}\r\n                        onClick={() => {\r\n                            setIsOpen(false);\r\n                            onSelectedText(data);\r\n                        }}\r\n                    >\r\n                        <Box\r\n                            sx={{\r\n                                overflow: \"hidden\",\r\n                                textOverflow: \"ellipsis\",\r\n                                width: \"13rem\",\r\n                                paddingLeft: 2,\r\n                                fontSize: {\r\n                                    lg: 12,\r\n                                    md: 11,\r\n                                    sm: 10,\r\n                                    xs: 10,\r\n                                },\r\n                                color: \"text.primary\",\r\n                            }}\r\n                            component=\"div\"\r\n                        >\r\n                            <Typography noWrap={true}>\r\n                                {addShay(data.name)}\r\n                            </Typography>\r\n                        </Box>\r\n                    </div>\r\n                </CellMeasurer>\r\n            );\r\n        },\r\n        [textslist]\r\n    );\r\n    return (\r\n        <ClickAwayListener onClickAway={() => setIsOpen(false)}>\r\n            <div style={{ position: \"relative\", marginLeft: 10 }}>\r\n                <Button\r\n                    onClick={handleClick}\r\n                    component=\"div\"\r\n                    variant=\"outlined\"\r\n                    sx={{\r\n                        overflow: \"hidden\",\r\n                        textOverflow: \"ellipsis\",\r\n                        width: \"10rem\",\r\n                        height: \"100%\",\r\n                        color: \"text.primary\",\r\n                    }}\r\n                >\r\n                    <Typography noWrap={true}>{selected}</Typography>\r\n                </Button>\r\n\r\n                <Grow in={isOpen}>\r\n                    <Box\r\n                        className={classname(classes)}\r\n                        sx={{\r\n                            position: \"absolute\",\r\n                            bgcolor: \"heading.main\",\r\n                            zIndex: 1,\r\n                        }}\r\n                    >\r\n                        <TextField\r\n                            onChange={handleChange}\r\n                            id=\"standard-basic\"\r\n                            label=\"filter\"\r\n                            variant=\"standard\"\r\n                            style={{ width: \"100%\" }}\r\n                        />\r\n                        <AutoSizer>\r\n                            {({ width, height }) => (\r\n                                <List\r\n                                    width={width}\r\n                                    height={height}\r\n                                    rowHeight={40}\r\n                                    deferredMeasurementCache={cache.current}\r\n                                    rowCount={textslist.length}\r\n                                    rowRenderer={rowRenderer}\r\n                                />\r\n                            )}\r\n                        </AutoSizer>\r\n                    </Box>\r\n                </Grow>\r\n            </div>\r\n        </ClickAwayListener>\r\n    );\r\n}\r\n\r\nexport default React.memo(TextList);\r\n","// @flow\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport TextList from \"./TextList\";\r\nimport * as actions from \"actions\";\r\nimport { getSelectedText } from \"reducers\";\r\nimport type { AppState } from \"reducers\";\r\nimport * as api from \"api\";\r\nimport * as reducers from \"reducers\";\r\nimport { batchActions } from \"redux-batched-actions\";\r\nimport { reduce } from \"lodash\";\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    // TODO: display search results or spinner depending on when anything\r\n    // returned\r\n    let texts = reducers.getTexts(state);\r\n    let selectedText = reducers.getSelectedText(state);\r\n    return {\r\n        texts,\r\n        selectedText,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSelectedText: (text: api.TextData) => {\r\n            dispatch(actions.selectedText(text));\r\n        },\r\n    };\r\n};\r\n\r\nconst TextListContainer = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TextList);\r\n\r\nexport default React.memo(TextListContainer);\r\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction componentWillMount() {\n  // Call this.constructor.gDSFP to support sub-classes.\n  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);\n  if (state !== null && state !== undefined) {\n    this.setState(state);\n  }\n}\n\nfunction componentWillReceiveProps(nextProps) {\n  // Call this.constructor.gDSFP to support sub-classes.\n  // Use the setState() updater to ensure state isn't stale in certain edge cases.\n  function updater(prevState) {\n    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);\n    return state !== null && state !== undefined ? state : null;\n  }\n  // Binding \"this\" is important for shallow renderer support.\n  this.setState(updater.bind(this));\n}\n\nfunction componentWillUpdate(nextProps, nextState) {\n  try {\n    var prevProps = this.props;\n    var prevState = this.state;\n    this.props = nextProps;\n    this.state = nextState;\n    this.__reactInternalSnapshotFlag = true;\n    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(\n      prevProps,\n      prevState\n    );\n  } finally {\n    this.props = prevProps;\n    this.state = prevState;\n  }\n}\n\n// React may warn about cWM/cWRP/cWU methods being deprecated.\n// Add a flag to suppress these warnings for this special case.\ncomponentWillMount.__suppressDeprecationWarning = true;\ncomponentWillReceiveProps.__suppressDeprecationWarning = true;\ncomponentWillUpdate.__suppressDeprecationWarning = true;\n\nfunction polyfill(Component) {\n  var prototype = Component.prototype;\n\n  if (!prototype || !prototype.isReactComponent) {\n    throw new Error('Can only polyfill class components');\n  }\n\n  if (\n    typeof Component.getDerivedStateFromProps !== 'function' &&\n    typeof prototype.getSnapshotBeforeUpdate !== 'function'\n  ) {\n    return Component;\n  }\n\n  // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n  // Error if any of these lifecycles are present,\n  // Because they would work differently between older and newer (16.3+) versions of React.\n  var foundWillMountName = null;\n  var foundWillReceivePropsName = null;\n  var foundWillUpdateName = null;\n  if (typeof prototype.componentWillMount === 'function') {\n    foundWillMountName = 'componentWillMount';\n  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {\n    foundWillMountName = 'UNSAFE_componentWillMount';\n  }\n  if (typeof prototype.componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'componentWillReceiveProps';\n  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n  }\n  if (typeof prototype.componentWillUpdate === 'function') {\n    foundWillUpdateName = 'componentWillUpdate';\n  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {\n    foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n  }\n  if (\n    foundWillMountName !== null ||\n    foundWillReceivePropsName !== null ||\n    foundWillUpdateName !== null\n  ) {\n    var componentName = Component.displayName || Component.name;\n    var newApiName =\n      typeof Component.getDerivedStateFromProps === 'function'\n        ? 'getDerivedStateFromProps()'\n        : 'getSnapshotBeforeUpdate()';\n\n    throw Error(\n      'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n        componentName +\n        ' uses ' +\n        newApiName +\n        ' but also contains the following legacy lifecycles:' +\n        (foundWillMountName !== null ? '\\n  ' + foundWillMountName : '') +\n        (foundWillReceivePropsName !== null\n          ? '\\n  ' + foundWillReceivePropsName\n          : '') +\n        (foundWillUpdateName !== null ? '\\n  ' + foundWillUpdateName : '') +\n        '\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\n' +\n        'https://fb.me/react-async-component-lifecycle-hooks'\n    );\n  }\n\n  // React <= 16.2 does not support static getDerivedStateFromProps.\n  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.\n  // Newer versions of React will ignore these lifecycles if gDSFP exists.\n  if (typeof Component.getDerivedStateFromProps === 'function') {\n    prototype.componentWillMount = componentWillMount;\n    prototype.componentWillReceiveProps = componentWillReceiveProps;\n  }\n\n  // React <= 16.2 does not support getSnapshotBeforeUpdate.\n  // As a workaround, use cWU to invoke the new lifecycle.\n  // Newer versions of React will ignore that lifecycle if gSBU exists.\n  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {\n    if (typeof prototype.componentDidUpdate !== 'function') {\n      throw new Error(\n        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'\n      );\n    }\n\n    prototype.componentWillUpdate = componentWillUpdate;\n\n    var componentDidUpdate = prototype.componentDidUpdate;\n\n    prototype.componentDidUpdate = function componentDidUpdatePolyfill(\n      prevProps,\n      prevState,\n      maybeSnapshot\n    ) {\n      // 16.3+ will not execute our will-update method;\n      // It will pass a snapshot value to did-update though.\n      // Older versions will require our polyfilled will-update value.\n      // We need to handle both cases, but can't just check for the presence of \"maybeSnapshot\",\n      // Because for <= 15.x versions this might be a \"prevContext\" object.\n      // We also can't just check \"__reactInternalSnapshot\",\n      // Because get-snapshot might return a falsy value.\n      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.\n      var snapshot = this.__reactInternalSnapshotFlag\n        ? this.__reactInternalSnapshot\n        : maybeSnapshot;\n\n      componentDidUpdate.call(this, prevProps, prevState, snapshot);\n    };\n  }\n\n  return Component;\n}\n\nexport { polyfill };\n"],"mappings":";;;;;;;;;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AAOA;AAMA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAFA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAXA;AAaA;AAdA;AAgBA;AAAA;AAOA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAJA;AAYA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAFA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAQA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAgBA;AACA;AACA;;;;;;;;;;;;AC9JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAKA;;;;;;;;;;;;ACpsourceRoot":""}