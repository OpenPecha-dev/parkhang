{"version":3,"file":"2.parkhang-dev.js","sources":["webpack://parkhang/./app/components/App/Switcher.js","webpack://parkhang/./app/components/App/components.js","webpack://parkhang/./app/components/Editors/Editor.css","webpack://parkhang/./app/components/Editors/Editor.js","webpack://parkhang/./app/components/Editors/EditorContainer.js","webpack://parkhang/./app/components/Editors/TextSheet.js","webpack://parkhang/./app/components/Editors/index.js","webpack://parkhang/./app/components/Editors/resizerStyle.css","webpack://parkhang/./app/components/ErrorBoundary/ErrorBoundary.js","webpack://parkhang/./app/components/Header/Header.css","webpack://parkhang/./app/components/HomePage/Filter.js","webpack://parkhang/./app/components/HomePage/Footer.js","webpack://parkhang/./app/components/HomePage/HomePage.css","webpack://parkhang/./app/components/HomePage/HomePage.js","webpack://parkhang/./app/components/HomePage/HomePageContainer.js","webpack://parkhang/./app/components/HomePage/index.js","webpack://parkhang/./app/components/HomePage/pagination.js","webpack://parkhang/./app/components/MediaComponent/Audio/Audio.js","webpack://parkhang/./app/components/MediaComponent/Audio/index.js","webpack://parkhang/./app/components/MediaComponent/DraggableMedia.js","webpack://parkhang/./app/components/MediaComponent/MediaContainer.js","webpack://parkhang/./app/components/MediaComponent/Video/Chapters.css","webpack://parkhang/./app/components/MediaComponent/Video/Chapters.js","webpack://parkhang/./app/components/MediaComponent/Video/Video.js","webpack://parkhang/./app/components/MediaComponent/Video/index.js","webpack://parkhang/./app/components/MediaComponent/index.js","webpack://parkhang/./app/components/Sidebar/Sidebar.css","webpack://parkhang/./app/components/Sidebar/Sidebar.js","webpack://parkhang/./app/components/Sidebar/SidebarOptions/About.css","webpack://parkhang/./app/components/Sidebar/SidebarOptions/About.js","webpack://parkhang/./app/components/Sidebar/SidebarOptions/Discussions.js","webpack://parkhang/./app/components/Sidebar/SidebarOptions/FullTextSearch.js","webpack://parkhang/./app/components/Sidebar/SidebarOptions/ResourceOption.css","webpack://parkhang/./app/components/Sidebar/SidebarOptions/Resources.css","webpack://parkhang/./app/components/Sidebar/SidebarOptions/Resources.js","webpack://parkhang/./app/components/Sidebar/SidebarOptions/index.js","webpack://parkhang/./app/components/Sidebar/index.js","webpack://parkhang/./app/components/TextDetail/AddButton.css","webpack://parkhang/./app/components/TextDetail/AddButton.js","webpack://parkhang/./app/components/TextDetail/AnnotationControls.css","webpack://parkhang/./app/components/TextDetail/AnnotationControls.js","webpack://parkhang/./app/components/TextDetail/AnnotationControlsContainer.js","webpack://parkhang/./app/components/TextDetail/AnnotationControlsHeader.css","webpack://parkhang/./app/components/TextDetail/AnnotationControlsHeader.js","webpack://parkhang/./app/components/TextDetail/AnnotationControlsHeading.css","webpack://parkhang/./app/components/TextDetail/AnnotationControlsHeading.js","webpack://parkhang/./app/components/TextDetail/AnnotationDetail.css","webpack://parkhang/./app/components/TextDetail/AnnotationDetail.js","webpack://parkhang/./app/components/TextDetail/AnnotationDetailEdit.js","webpack://parkhang/./app/components/TextDetail/AnnotationProtal.js","webpack://parkhang/./app/components/TextDetail/AnswerView.css","webpack://parkhang/./app/components/TextDetail/AnswerView.js","webpack://parkhang/./app/components/TextDetail/Button.css","webpack://parkhang/./app/components/TextDetail/HeaderMenu/HighlightedString.js","webpack://parkhang/./app/components/TextDetail/HeaderMenu/Search.js","webpack://parkhang/./app/components/TextDetail/HeaderMenu/SearchList.js","webpack://parkhang/./app/components/TextDetail/HeaderMenu/SearchStyle.css","webpack://parkhang/./app/components/TextDetail/HeaderMenu/Settings.js","webpack://parkhang/./app/components/TextDetail/HeaderMenu/TableOfContent.js","webpack://parkhang/./app/components/TextDetail/Note.css","webpack://parkhang/./app/components/TextDetail/Note.js","webpack://parkhang/./app/components/TextDetail/NoteEditor.css","webpack://parkhang/./app/components/TextDetail/NoteEditor.js","webpack://parkhang/./app/components/TextDetail/QuestionEditor.css","webpack://parkhang/./app/components/TextDetail/QuestionEditor.js","webpack://parkhang/./app/components/TextDetail/QuestionView.css","webpack://parkhang/./app/components/TextDetail/QuestionView.js","webpack://parkhang/./app/components/TextDetail/QuestionsLoading.css","webpack://parkhang/./app/components/TextDetail/QuestionsLoading.js","webpack://parkhang/./app/components/TextDetail/SelectVersion.css","webpack://parkhang/./app/components/TextDetail/SelectVersion.js","webpack://parkhang/./app/components/TextDetail/SplitText.css","webpack://parkhang/./app/components/TextDetail/SplitText.js","webpack://parkhang/./app/components/TextDetail/TableOfContent/Commentary.js","webpack://parkhang/./app/components/TextDetail/TableOfContent/TableOfContent.css","webpack://parkhang/./app/components/TextDetail/TableOfContent/TableOfContent.js","webpack://parkhang/./app/components/TextDetail/Text.css","webpack://parkhang/./app/components/TextDetail/Text.js","webpack://parkhang/./app/components/TextDetail/TextDetail.css","webpack://parkhang/./app/components/TextDetail/TextDetail.js","webpack://parkhang/./app/components/TextDetail/TextDetailContainer.js","webpack://parkhang/./app/components/TextDetail/TextDetailHeading.css","webpack://parkhang/./app/components/TextDetail/TextDetailHeading.js","webpack://parkhang/./app/components/TextDetail/TextDetailHeadingContainer.js","webpack://parkhang/./app/components/TextDetail/TextList.css","webpack://parkhang/./app/components/TextDetail/TextList.js","webpack://parkhang/./app/components/TextDetail/TextListContainer.js","webpack://parkhang/./app/components/TextDetail/index.js","webpack://parkhang/./app/components/TextDetail2/HeaderMenu/HighlightedString.js","webpack://parkhang/./app/components/TextDetail2/HeaderMenu/Search.js","webpack://parkhang/./app/components/TextDetail2/HeaderMenu/SearchList.js","webpack://parkhang/./app/components/TextDetail2/HeaderMenu/SearchStyle.css","webpack://parkhang/./app/components/TextDetail2/HeaderMenu/Settings.js","webpack://parkhang/./app/components/TextDetail2/HeaderMenu/TableOfContent.js","webpack://parkhang/./app/components/TextDetail2/SelectVersion.js","webpack://parkhang/./app/components/TextDetail2/SplitText.js","webpack://parkhang/./app/components/TextDetail2/TableOfContent/TableOfContent.js","webpack://parkhang/./app/components/TextDetail2/TestHtml.js","webpack://parkhang/./app/components/TextDetail2/Text.js","webpack://parkhang/./app/components/TextDetail2/TextDetail.js","webpack://parkhang/./app/components/TextDetail2/TextDetailContainer.js","webpack://parkhang/./app/components/TextDetail2/TextDetailHeading.js","webpack://parkhang/./app/components/TextDetail2/TextDetailHeadingContainer.js","webpack://parkhang/./app/components/TextDetail2/TextList.js","webpack://parkhang/./app/components/TextDetail2/TextListContainer.js","webpack://parkhang/./app/components/TextList/HighlightedString.js","webpack://parkhang/./app/components/TextList/LoadMore.css","webpack://parkhang/./app/components/TextList/LoadMore.js","webpack://parkhang/./app/components/TextList/ResultCount.js","webpack://parkhang/./app/components/TextList/TextList.css","webpack://parkhang/./app/components/TextList/TextList.js","webpack://parkhang/./app/components/TextList/TextListTab.css","webpack://parkhang/./app/components/TextList/TextListTab.js","webpack://parkhang/./app/components/TextList/TextListTabContainer.js","webpack://parkhang/./app/components/TextList/index.js","webpack://parkhang/./app/components/TextsSearch/TextsSearch.css","webpack://parkhang/./app/components/TextsSearch/TextsSearch.js","webpack://parkhang/./app/components/TextsSearch/TextsSearchContainer.js","webpack://parkhang/./app/components/TextsSearch/index.js","webpack://parkhang/./app/components/UI/Accessory.css","webpack://parkhang/./app/components/UI/Accessory.js","webpack://parkhang/./app/components/UI/AnnotationAvatar.css","webpack://parkhang/./app/components/UI/AnnotationAvatar.js","webpack://parkhang/./app/components/UI/ApplyTooltip.js","webpack://parkhang/./app/components/UI/Button.css","webpack://parkhang/./app/components/UI/Button.js","webpack://parkhang/./app/components/UI/ShareButton.js","webpack://parkhang/./app/components/UI/Sharebutton.css","webpack://parkhang/./app/components/UI/Voting/Vote.css","webpack://parkhang/./app/components/UI/Voting/index.js","webpack://parkhang/./app/components/UI/muiIcon/index.js","webpack://parkhang/./app/components/textDetail/FontSize.css","webpack://parkhang/./app/components/textDetail/fontSize.js","webpack://parkhang/./app/components/utility/discourseForum.js","webpack://parkhang/./app/components/utility/discourseforumsettings.js","webpack://parkhang/./app/components/utility/embedingVote.css","webpack://parkhang/./app/components/utility/embedingVote.js","webpack://parkhang/./app/components/utility/imageZoom.js","webpack://parkhang/./app/components/utility/useLocalStorage.js","webpack://parkhang/./app/containers/TextListContainer.js","webpack://parkhang/./app/css/colour.css","webpack://parkhang/./app/images/Indrajala_logo.png","webpack://parkhang/./app/images/PencilAltIcon.svg","webpack://parkhang/./app/images/check_circle.svg","webpack://parkhang/./app/images/note.svg","webpack://parkhang/./app/images/options.svg","webpack://parkhang/./app/images/page_break_icon.svg","webpack://parkhang/./app/images/question_answer.svg","webpack://parkhang/./app/images/wrench.svg","webpack://parkhang/./app/lib/SplitText.js","webpack://parkhang/./app/lib/addTibetanShay.js","webpack://parkhang/./app/lib/shallowEqual.js","webpack://parkhang/./app/lib/text_splitters/positionSplitter.js","webpack://parkhang/./app/shortcuts.js","webpack://parkhang/./app/state_helpers/TextStore2.js","webpack://parkhang/./node_modules/react-universal-component/dist/requireById sync ^.*$"],"sourcesContent":["import React from \"react\";\r\nimport universal from \"react-universal-component\";\r\nimport Loader from \"react-loader\";\r\nimport { connect } from \"react-redux\";\r\nimport * as components from \"./components\";\r\n\r\nfunction Switcher(props) {\r\n    const { page, isLoading } = props;\r\n    const Component = components[page];\r\n\r\n    return (\r\n        // <UniversalComponent\r\n        //     page={page}\r\n        //     isLoading={page === \"Editors\" ? isLoading : false}\r\n        // />\r\n        <Component />\r\n    );\r\n}\r\n\r\n// const UniversalComponent = universal(\r\n//     (props) => import(`components/${props.page}`),\r\n//     {\r\n//         minDelay: 300,\r\n//         chunkName: (props) => props.page,\r\n//         loading: () => <Loader />,\r\n//         ignoreBabelRename: true,\r\n//         error: (e) => (\r\n//             <div className=\"notFound\">\r\n//                 PAGE NOT FOUND - 404, click <a href=\"/\">Here</a>\r\n//                 {`${e.toString()}`}\r\n//             </div>\r\n//         ),\r\n//         loadingTransition: true,\r\n//     }\r\n// );\r\nconst mapState = ({ page, direction, ...state }) => ({\r\n    page,\r\n    isLoading: !state.data.loadedInitialData,\r\n});\r\n\r\nexport default connect(mapState)(Switcher);\r\n","// components.js\r\nimport React, { Suspense } from \"react\";\r\nimport EditorContainer from \"components/Editors\";\r\nimport HomePageContainer from \"components/HomePage\";\r\nimport VoteComponent from \"components/utility/embedingVote\";\r\nconst HomePage = () => <HomePageContainer />;\r\n\r\nconst Editors = () => <EditorContainer />;\r\nconst Vote = () => <VoteComponent />;\r\n\r\nconst NotFound = () => <h3>404</h3>;\r\n\r\nexport { HomePage, Editors, Vote, NotFound };\r\n\r\nconst mapStateToProps = ({ location }) => ({\r\n    userId: location.payload.id,\r\n});\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Editor---container\",\"interface\":\"Editor---interface\",\"listContainer\":\"Editor---listContainer\",\"showListContainer\":\"Editor---showListContainer\",\"hideListContainer\":\"Editor---hideListContainer\"};","import React, { useState, useEffect } from \"react\";\r\nimport TextsSearchContainer from \"components/TextsSearch/TextsSearchContainer\";\r\nimport TextListContainer from \"containers/TextListContainer\";\r\nimport TextListTabContainer from \"components/TextList/TextListTabContainer\";\r\nimport * as constants from \"app_constants\";\r\nimport lopenlingLogo from \"images/lopenling_logo.png\";\r\nimport headerStyles from \"components/Header/Header.css\";\r\nimport Sidebar from \"components/Sidebar\";\r\nimport styles from \"./Editor.css\";\r\nimport classnames from \"classnames\";\r\nimport utilStyles from \"css/util.css\";\r\nimport TextSheet from \"./TextSheet\";\r\nimport {\r\n    SpeedDial,\r\n    SpeedDialAction,\r\n    SpeedDialIcon,\r\n    Snackbar,\r\n    Alert,\r\n    Collapse,\r\n} from \"components/UI/muiComponent\";\r\nimport { Edit, Share, VerticalSplit, SyncAlt } from \"components/UI/muiIcon\";\r\nconst Editor = (props) => {\r\n    let textListClassnames = [styles.listContainer];\r\n    let bodyHeight;\r\n    let minSize = constants.MIN_TEXT_LIST_WIDTH;\r\n    let maxSize = constants.MAX_TEXT_LIST_WIDTH;\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    let defaultSize = constants.DEFAULT_TEXT_LIST_WIDTH;\r\n    let size = props.textListWidth;\r\n    if (props.textListIsVisible) {\r\n        textListClassnames.push(styles.showListContainer);\r\n    } else {\r\n        size = 0;\r\n        textListClassnames.push(styles.hideListContainer);\r\n    }\r\n\r\n    bodyHeight = \"calc(100vh - \" + headerStyles.headerHeight + \")\";\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === \"clickaway\") {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n    const handleShare = () => {\r\n        let textid = props.selectedText;\r\n        let textid2 = props.selectedText2;\r\n        let witnessid = props.selectedWitness;\r\n        let witnessid2 = props.selectedWitness2;\r\n        let url = \"\";\r\n        if (textid2 && witnessid2) {\r\n            url =\r\n                window.location.origin +\r\n                `/texts/${textid.id}/witnesses/${witnessid?.id}/texts2/${textid2.id}/witnesses2/${witnessid2.id}`;\r\n        } else {\r\n            url =\r\n                window.location.origin +\r\n                `/texts/${textid.id}/witnesses/${witnessid?.id}`;\r\n        }\r\n        navigator.clipboard\r\n            .writeText(url)\r\n            .then()\r\n            .catch((e) => console.log(e.message))\r\n            .finally(() => setOpen(true));\r\n    };\r\n    const actions = [\r\n        {\r\n            icon: (\r\n                <Edit htmlColor={props.isAnnotating ? \"#ff7961\" : undefined} />\r\n            ),\r\n            name: \"Annotate\",\r\n            condition: props.isAnnotating,\r\n            function: () => props.changeIsAnnotating(!props.isAnnotating),\r\n        },\r\n        {\r\n            icon: (\r\n                <SyncAlt\r\n                    htmlColor={props.isPanelLinked ? \"#ff7961\" : undefined}\r\n                />\r\n            ),\r\n            name: \"Link Panel\",\r\n            condition: props.isPanelLinked,\r\n            function: () => props.onChangePanelLink(!props.isPanelLinked),\r\n        },\r\n        {\r\n            icon: <Share />,\r\n            name: \"Share\",\r\n            function: handleShare,\r\n        },\r\n        {\r\n            icon: (\r\n                <VerticalSplit\r\n                    htmlColor={props.isSecondWindowOpen ? \"#ff7961\" : undefined}\r\n                />\r\n            ),\r\n            name: \"Split Window\",\r\n            condition: props.isSecondWindowOpen,\r\n            function: () =>\r\n                props.onChangeWindowOpen(!props.isSecondWindowOpen, 140),\r\n        },\r\n    ];\r\n    useEffect(() => {\r\n        let timer = setTimeout(() => {\r\n            window.dispatchEvent(new Event(\"resize\"));\r\n        }, 1000);\r\n        return () => clearTimeout(timer);\r\n    }, [props.textListIsVisible]);\r\n    return (\r\n        <div className={classnames(styles.interface, utilStyles.flex)}>\r\n            <Sidebar />\r\n            <TextSheet bodyHeight={bodyHeight} />\r\n            <SpeedDial\r\n                ariaLabel=\"SpeedDial basic\"\r\n                sx={{ position: \"absolute\", bottom: 60, right: 16 }}\r\n                icon={<SpeedDialIcon />}\r\n            >\r\n                {actions.map((action) => (\r\n                    <SpeedDialAction\r\n                        key={action.name}\r\n                        icon={action.icon}\r\n                        tooltipTitle={action.name}\r\n                        onClick={action.function}\r\n                        open={action.condition}\r\n                    />\r\n                ))}\r\n            </SpeedDial>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert\r\n                    onClose={handleClose}\r\n                    severity=\"success\"\r\n                    sx={{ width: \"100%\" }}\r\n                >\r\n                    The Url Copied to Clipboard !\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Editor;\r\n","import Editor from \"./Editor\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as reducers from \"reducers\";\r\nimport * as actions from \"actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    const selectedText = reducers.getSelectedText(state);\r\n    const selectedText2 = reducers.getSelectedText2(state);\r\n\r\n    let selectedWitness;\r\n    let selectedWitness2;\r\n    let witnesses;\r\n    let witnesses2;\r\n    if (selectedText) {\r\n        witnesses = reducers.getTextWitnesses(state, selectedText.id);\r\n        const selectedWitnessId = reducers.getSelectedTextWitnessId(\r\n            state,\r\n            selectedText.id\r\n        );\r\n        if (selectedWitnessId) {\r\n            selectedWitness = reducers.getWitness(state, selectedWitnessId);\r\n        } else {\r\n            selectedWitness = reducers.getWorkingWitness(\r\n                state,\r\n                selectedText.id\r\n            );\r\n        }\r\n    }\r\n    if (selectedText2) {\r\n        witnesses2 = reducers.getTextWitnesses2(state, selectedText2.id);\r\n        const selectedWitnessId2 = reducers.getSelectedTextWitnessId2(\r\n            state,\r\n            selectedText2.id\r\n        );\r\n        if (selectedWitnessId2) {\r\n            selectedWitness2 = reducers.getWitness2(state, selectedWitnessId2);\r\n        } else {\r\n            selectedWitness2 = reducers.getWorkingWitness2(\r\n                state,\r\n                selectedText2.id\r\n            );\r\n        }\r\n    }\r\n\r\n    return {\r\n        selectedText,\r\n        selectedWitness,\r\n        selectedText2,\r\n        selectedWitness2,\r\n        title: reducers.getTranslation(state, \"header.title\"),\r\n        page: state.page,\r\n        isAnnotating: reducers.isAnnotating(state),\r\n        isSecondWindowOpen: reducers.isSecondWindowOpen(state),\r\n        theme: reducers.getTheme(state),\r\n        isPanelLinked: reducers.isPanelLinked(state),\r\n        textListIsVisible: reducers.getTextListVisible(state),\r\n        isPanelVisible: reducers.isPanelVisible(state),\r\n    };\r\n};\r\n\r\nconst matchDispatchToProps = (dispatch) => {\r\n    return {\r\n        onChangedTextWidth: (width: number) => {\r\n            dispatch(actions.changedTextListWidth(width));\r\n        },\r\n        onChangedTextListVisible: (isVisible: boolean) => {\r\n            dispatch(actions.changedTextListVisible(isVisible));\r\n        },\r\n        changeIsAnnotating: (payload) => {\r\n            dispatch(actions.changeIsAnnotating(payload));\r\n            if (payload === false) {\r\n                const dismissTextAnnotation =\r\n                    actions.changedActiveTextAnnotation(null);\r\n                dispatch(dismissTextAnnotation);\r\n                dispatch(actions.changedActiveTextAnnotation(null));\r\n            }\r\n        },\r\n        onChangeWindowOpen: (data: boolean) => {\r\n            dispatch(actions.toggleSecondWindow(data));\r\n        },\r\n        onChangePanelLink: (data: boolean) => {\r\n            dispatch(actions.changePanelLink(data));\r\n        },\r\n    };\r\n};\r\n\r\nconst EditorContainer = connect(mapStateToProps, matchDispatchToProps)(Editor);\r\n\r\nexport default EditorContainer;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as reducers from \"reducers\";\r\nimport * as actions from \"actions\";\r\nimport MediaComponent from \"components/MediaComponent\";\r\nimport { batchActions } from \"redux-batched-actions\";\r\nimport { Box, Divider } from \"components/UI/muiComponent\";\r\nimport Loader from \"react-loader\";\r\nimport ErrorBoundary from \"components/ErrorBoundary/ErrorBoundary\";\r\nimport SplitPane from \"react-split-pane\";\r\nimport styles from \"./resizerStyle.css\";\r\nimport classnames from \"classnames\";\r\nimport TextDetailContainer2 from \"components/TextDetail2/TextDetailContainer\";\r\nimport TextDetailContainer from \"components/TextDetail/TextDetailContainer\";\r\nimport { handleKeyDown } from \"../../shortcuts\";\r\n\r\nfunction TextSheet(props) {\r\n    let editorRef = useRef(null);\r\n\r\n    return (\r\n        <Box\r\n            ref={editorRef}\r\n            sx={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                // bgcolor: \"#d4dde5\",\r\n                width: \"100%\",\r\n                height: props.bodyHeight,\r\n                position: \"relative\",\r\n            }}\r\n            onKeyDown={(e: SyntheticKeyboardEvent<*>) => {\r\n                handleKeyDown(e, props.state, props.dispatch);\r\n            }}\r\n        >\r\n            <SplitPane\r\n                size={\r\n                    props.isSecondWindowOpen && props.selectedText\r\n                        ? \"50%\"\r\n                        : \"100%\"\r\n                }\r\n                pane1Style={{ display: \"flex\", justifyContent: \"center\" }}\r\n                resizerStyle={{\r\n                    display: !props.isSecondWindowOpen ? \"none\" : \"block\",\r\n                }}\r\n                onDragFinished={(width: number) => {\r\n                    if (width > 0) window.dispatchEvent(new Event(\"resize\"));\r\n                }}\r\n            >\r\n                <ErrorBoundary>\r\n                    <TextDetailContainer />\r\n                </ErrorBoundary>\r\n                {props.isSecondWindowOpen && props.selectedText ? (\r\n                    <ErrorBoundary>\r\n                        <TextDetailContainer2 />\r\n                    </ErrorBoundary>\r\n                ) : (\r\n                    <div />\r\n                )}\r\n            </SplitPane>\r\n            {props.Media.isPanelVisible && (\r\n                <ErrorBoundary>\r\n                    <MediaComponent />\r\n                </ErrorBoundary>\r\n            )}\r\n        </Box>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): { user: User } => {\r\n    const isSecondWindowOpen = reducers.isSecondWindowOpen(state);\r\n    const Media = reducers.getMediaData(state);\r\n    const selectedText = reducers.getSelectedText(state);\r\n    return {\r\n        state,\r\n        selectedText,\r\n        isSecondWindowOpen,\r\n        Media,\r\n    };\r\n};\r\n\r\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\r\n    const { dispatch } = dispatchProps;\r\n\r\n    return {\r\n        dispatch,\r\n        ...ownProps,\r\n        ...stateProps,\r\n    };\r\n};\r\nconst TextSheetContainer = connect(\r\n    mapStateToProps,\r\n    null,\r\n    mergeProps\r\n)(TextSheet);\r\n\r\nexport default TextSheetContainer;\r\n","export { default } from \"./EditorContainer\";\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Resizer\":\"resizerStyle---Resizer\",\"horizontal\":\"resizerStyle---horizontal\",\"vertical\":\"resizerStyle---vertical\",\"disabled\":\"resizerStyle---disabled\"};","import React from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        // Update state so the next render will show the fallback UI.\r\n        return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        // You can also log the error to an error reporting service\r\n        console.log(error, errorInfo);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            // You can render any custom fallback UI\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"header-height\":\"40px\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"headerHeight\":\"40px\",\"header\":\"Header---header\",\"logo\":\"Header---logo\",\"navigationButton\":\"Header---navigationButton\",\"loginButton\":\"Header---loginButton\",\"ButtonText\":\"Header---ButtonText\",\"buttonLink\":\"Header---buttonLink\",\"controls\":\"Header---controls\"};","import React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { TextField } from \"components/UI/muiComponent\";\r\nimport {\r\n    Box,\r\n    Chip,\r\n    Slider,\r\n    Stack,\r\n    Typography,\r\n    Autocomplete,\r\n    Checkbox,\r\n} from \"components/UI/muiComponent\";\r\nimport _ from \"lodash\";\r\nimport {\r\n    CheckBoxOutlineBlank as CheckBoxOutlineBlankIcon,\r\n    CheckBox as CheckBoxIcon,\r\n} from \"components/UI/muiIcon\";\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\nfunction Filter({\r\n    setFiltered,\r\n    // setLengthRange,\r\n    // setCategoryList,\r\n    // setAuthor = () => {},\r\n    featureText = [],\r\n}) {\r\n    const handleChange = (e) => {\r\n        setFiltered(e.target.value);\r\n    };\r\n    useEffect(() => {\r\n        setFiltered(featureText);\r\n    }, []);\r\n\r\n    return (\r\n        <Stack\r\n            direction={{ md: \"row\", xs: \"column\" }}\r\n            justifyContent={\"space-around\"}\r\n            alignItems={{ md: \"center\" }}\r\n            gap={2}\r\n            mx={{ md: 3 }}\r\n            sx={{ boxShadow: 3, padding: 2 }}\r\n        >\r\n            <Typography>Filter</Typography>\r\n            <Box flex={1}>\r\n                <SearchBar handleChange={handleChange} />\r\n            </Box>\r\n            {/* <Box flex={1}>\r\n                <Author setAuthor={setAuthor} AuthorList={AuthorList} />\r\n            </Box> */}\r\n            {/* <Box flex={0}>\r\n                <Typography>Category</Typography>\r\n                <Category setCategoryList={setCategoryList} />\r\n            </Box> */}\r\n\r\n            {/* <Box flex={2}>\r\n                <Typography mt={2}>Text Length</Typography>\r\n                <TextLength setLengthRange={setLengthRange} />\r\n            </Box> */}\r\n        </Stack>\r\n    );\r\n}\r\n\r\nexport default Filter;\r\n\r\nconst SearchBar = ({ handleChange }) => (\r\n    <TextField\r\n        id=\"search-bar\"\r\n        className=\"text\"\r\n        onInput={handleChange}\r\n        label=\"Title\"\r\n        variant=\"outlined\"\r\n        placeholder=\"Search...\"\r\n        size=\"small\"\r\n    />\r\n);\r\n// const Category = ({ setCategoryList }) => {\r\n//     const CATEGORY_LIST = [\"root\", \"commentary\"];\r\n//     const [selectedCategory, setSelectedCategory] = useState([]);\r\n//     function handleChipClick(e) {\r\n//         let arr = [...selectedCategory];\r\n//         if (arr.includes(e)) {\r\n//             arr.splice(arr.indexOf(e), 1);\r\n//         } else {\r\n//             arr.push(e);\r\n//         }\r\n//         setSelectedCategory([...arr]);\r\n//         setCategoryList([...arr]);\r\n//     }\r\n//     return (\r\n//         <Stack direction=\"row\" gap={2}>\r\n//             {CATEGORY_LIST.map((category, index) => {\r\n//                 let condition = selectedCategory.includes(category);\r\n//                 return (\r\n//                     <Chip\r\n//                         key={category + \"-\" + index}\r\n//                         label={category}\r\n//                         size=\"small\"\r\n//                         variant={condition ? \"filled\" : \"outlined\"}\r\n//                         sx={{\r\n//                             cursor: \"pointer\",\r\n//                         }}\r\n//                         onClick={() => handleChipClick(category)}\r\n//                     />\r\n//                 );\r\n//             })}\r\n//         </Stack>\r\n//     );\r\n// };\r\n\r\n// const TextLength = ({ setLengthRange }) => {\r\n//     const MinLength = 1000;\r\n//     const MaxLength = 30000;\r\n//     const [value, setValue] = React.useState([MinLength, MaxLength]);\r\n//     const debounce_change = _.debounce(function (event, newValue) {\r\n//         setLengthRange(newValue);\r\n//     }, 1000);\r\n//     const handleChange = (event, newValue) => {\r\n//         setValue(newValue);\r\n//         debounce_change(event, newValue);\r\n//     };\r\n\r\n//     return (\r\n//         <Slider\r\n//             max={MaxLength}\r\n//             min={MinLength}\r\n//             getAriaLabel={() => \"TextLength range\"}\r\n//             value={value}\r\n//             onChange={handleChange}\r\n//             valueLabelDisplay=\"auto\"\r\n//             // getAriaValueText={valuetext}\r\n//         />\r\n//     );\r\n// };\r\nconst Author = ({ setAuthor, AuthorList }) => {\r\n    const handleChange = (e, value) => {\r\n        setAuthor([...value]);\r\n    };\r\n    return (\r\n        <Autocomplete\r\n            multiple\r\n            id=\"checkboxes-tags-demo\"\r\n            options={AuthorList}\r\n            onChange={handleChange}\r\n            disableCloseOnSelect\r\n            getOptionLabel={(option) => option}\r\n            renderOption={(props, option, { selected }) => (\r\n                <li {...props}>\r\n                    <Checkbox\r\n                        icon={icon}\r\n                        checkedIcon={checkedIcon}\r\n                        style={{ marginRight: 8 }}\r\n                        checked={selected}\r\n                    />\r\n                    {option}\r\n                </li>\r\n            )}\r\n            style={{ width: 500 }}\r\n            renderInput={(params) => (\r\n                <TextField\r\n                    {...params}\r\n                    label=\"Author\"\r\n                    placeholder=\"Name\"\r\n                    size=\"small\"\r\n                />\r\n            )}\r\n        />\r\n    );\r\n};\r\n","import { Box, Paper, Stack, Typography } from \"components/UI/muiComponent\";\r\nimport React from \"react\";\r\nimport Indrajala from \"images/Indrajala_logo.png\";\r\n\r\nexport default function GuestFooter() {\r\n    return (\r\n        <Paper\r\n            sx={{\r\n                marginTop: \"calc(10% + 60px)\",\r\n                width: \"100%\",\r\n                position: \"fixed\",\r\n                bottom: 0,\r\n                width: \"100%\",\r\n            }}\r\n            component=\"footer\"\r\n            square\r\n            variant=\"outlined\"\r\n        >\r\n            <Stack\r\n                sx={{\r\n                    width: \"100%\",\r\n                    position: \"fixed\",\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                    bottom: 0,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        height: \"100%\",\r\n                        display: \"flex\",\r\n                        background: \"#292826\",\r\n                        width: \"100%\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                        height: 55,\r\n                    }}\r\n                >\r\n                    <Typography\r\n                        textAlign={\"center\"}\r\n                        variant=\"h6\"\r\n                        fontSize={{ md: \"20px\", xs: \"10px\" }}\r\n                        textTransform={\"capitalize\"}\r\n                        color=\"white\"\r\n                    >\r\n                        Our Trusted partner\r\n                    </Typography>\r\n\r\n                    <img\r\n                        src={Indrajala}\r\n                        alt=\"indrajala logo\"\r\n                        style={{\r\n                            objectFit: \"contain\",\r\n                            maxHeight: \"100%\",\r\n                            marginLeft: \"40px\",\r\n                        }}\r\n                    />\r\n                </Box>\r\n            </Stack>\r\n        </Paper>\r\n    );\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"HomePage---title\",\"list\":\"HomePage---list\"};","import React, { useEffect, useState } from \"react\";\r\nimport _ from \"lodash\";\r\nimport Link from \"redux-first-router-link\";\r\nimport addTibetanShay from \"lib/addTibetanShay\";\r\nimport styles from \"./HomePage.css\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport {\r\n    Typography,\r\n    Container,\r\n    Stack,\r\n    Box,\r\n    Card,\r\n    CardContent,\r\n    IconButton,\r\n    Collapse,\r\n    Pagination,\r\n    Tooltip,\r\n} from \"components/UI/muiComponent\";\r\nimport { FilterAlt as FilterAltIcon } from \"components/UI/muiIcon\";\r\nimport Filter from \"./Filter\";\r\nimport { motion } from \"framer-motion\";\r\nimport Footer from \"./Footer\";\r\nimport usePagination from \"./pagination\";\r\nconst PER_PAGE = 4;\r\n\r\nfunction HomePage(props) {\r\n    let { Textdata } = props;\r\n    let { activeText, detail } = Textdata;\r\n    let [page, setPage] = useState(1);\r\n    console.log(detail);\r\n    const [filteredData, setFilteredData] = useState(detail);\r\n    const [showFilter, setShowFilter] = useState(false);\r\n    const [filteredTitle, setFilteredTitle] = useState(\"\");\r\n    // const [categorySelected, setCategorySelected] = useState([]);\r\n    // const [author, setAuthor] = useState([]);\r\n    // const [lengthRange, setLengthRange] = useState([]);\r\n    const count = Math.ceil(filteredData.length / PER_PAGE);\r\n    let _DATA = usePagination(filteredData, PER_PAGE) || [];\r\n\r\n    const handleChange = (e, p) => {\r\n        setPage(p);\r\n        _DATA.jump(p);\r\n    };\r\n\r\n    const handleToggleFilter = React.useCallback(() => {\r\n        setShowFilter((prev) => !prev);\r\n    }, []);\r\n    const listRef = React.useRef(null);\r\n    useEffect(() => {\r\n        let tempData = [];\r\n        if (filteredTitle !== null) {\r\n            tempData = detail?.filter((val) => {\r\n                if (filteredTitle === \"\" || filteredTitle === []) return val;\r\n                else return val.title.includes(filteredTitle);\r\n            });\r\n        } else {\r\n            tempData = detail;\r\n        }\r\n        // if (categorySelected.length) {\r\n        //     tempData = tempData.filter((val) => {\r\n        //         return categorySelected.includes(val.category);\r\n        //     });\r\n        // }\r\n        // if (lengthRange.length) {\r\n        //     tempData = tempData.filter((val) => {\r\n        //         return (\r\n        //             val.length >= lengthRange[0] && val.length < lengthRange[1]\r\n        //         );\r\n        //     });\r\n        // }\r\n        // if (author.length) {\r\n        //     tempData = tempData.filter((val) => {\r\n        //         return author.includes(val.author);\r\n        //     });\r\n        // }\r\n        setFilteredData(tempData.sort((a, b) => a?.order - b?.order));\r\n    }, [filteredTitle, detail]);\r\n\r\n    return (\r\n        <Stack sx={{ height: \"100vh\" }}>\r\n            <Box\r\n                sx={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-between\",\r\n                    alignItems: \"center\",\r\n                    height: \"4rem\",\r\n                }}\r\n                m={4}\r\n            >\r\n                <h3 className={styles.title} mx={3}>\r\n                    <FormattedMessage id={\"library\"} />\r\n                </h3>\r\n\r\n                <IconButton onClick={handleToggleFilter}>\r\n                    <FilterAltIcon />\r\n                </IconButton>\r\n            </Box>\r\n            <Collapse in={showFilter}>\r\n                <Filter\r\n                    setFiltered={setFilteredTitle}\r\n                    // setCategoryList={setCategorySelected}\r\n                    // setLengthRange={setLengthRange}\r\n                    // setAuthor={setAuthor}\r\n                />\r\n            </Collapse>\r\n            <Container\r\n                sx={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    flexDirection: \"column\",\r\n                }}\r\n            >\r\n                {filteredData.length > PER_PAGE && (\r\n                    <Pagination\r\n                        count={count}\r\n                        size=\"small\"\r\n                        page={page}\r\n                        variant=\"outlined\"\r\n                        shape=\"rounded\"\r\n                        onChange={handleChange}\r\n                        sx={{ alignSelf: \"flex-end\", marginTop: 2 }}\r\n                    />\r\n                )}\r\n                <Box\r\n                    mt={2}\r\n                    py={1}\r\n                    display=\"flex\"\r\n                    // height={{ xs: \"60vh\", md: \"auto\" }}\r\n                >\r\n                    <motion.div layout>\r\n                        <Stack\r\n                            sx={{\r\n                                flexWrap: \"wrap\",\r\n                                gap: 1,\r\n                            }}\r\n                            pb={2}\r\n                            direction=\"row\"\r\n                            className={styles.list}\r\n                            ref={listRef}\r\n                        >\r\n                            {_DATA.currentData().map((pecha, i) => {\r\n                                return (\r\n                                    <Box\r\n                                        key={pecha.id || `filteredData-${i}`}\r\n                                        sx={{\r\n                                            width: \"auto\",\r\n                                            scrollSnapAlign: \"start\",\r\n                                        }}\r\n                                    >\r\n                                        <Tooltip title={pecha.description}>\r\n                                            <motion.div\r\n                                                animate={{ opacity: 1 }}\r\n                                                initial={{ opacity: 0 }}\r\n                                                exit={{ opacity: 0 }}\r\n                                                layout\r\n                                            >\r\n                                                <Link\r\n                                                    to={`/texts/${pecha.text}`}\r\n                                                    style={{\r\n                                                        textDecoration: \"none\",\r\n                                                    }}\r\n                                                >\r\n                                                    <Card\r\n                                                        sx={{\r\n                                                            cursor: \"pointer\",\r\n                                                            textDecoration:\r\n                                                                \"none\",\r\n                                                        }}\r\n                                                        elevation={3}\r\n                                                        key={pecha.id}\r\n                                                    >\r\n                                                        <CardContent>\r\n                                                            <Typography\r\n                                                                gutterBottom\r\n                                                                variant=\"h6\"\r\n                                                                textAlign=\"center\"\r\n                                                                textTransform=\"capitalize\"\r\n                                                                fontWeight=\"bold\"\r\n                                                                width=\"max-content\"\r\n                                                            >\r\n                                                                {addTibetanShay(\r\n                                                                    pecha.title\r\n                                                                )}\r\n                                                            </Typography>\r\n                                                        </CardContent>\r\n                                                    </Card>\r\n                                                </Link>\r\n                                            </motion.div>\r\n                                        </Tooltip>\r\n                                    </Box>\r\n                                );\r\n                            })}\r\n                        </Stack>\r\n                    </motion.div>\r\n                </Box>\r\n            </Container>\r\n            <Footer />\r\n        </Stack>\r\n    );\r\n}\r\n\r\nexport default React.memo(HomePage);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as reducers from \"reducers\";\r\nimport * as actions from \"actions\";\r\nimport HomePage from \"./HomePage\";\r\n\r\nlet user;\r\n\r\nconst mapStateToProps = (state) => {\r\n    if (!state.user.userId === -1) {\r\n        user = state.user;\r\n    }\r\n    return {\r\n        text: reducers.getTexts(state),\r\n        title: reducers.getTranslation(state, \"header.title\"),\r\n        Textdata: reducers.getTextTitle(state),\r\n    };\r\n};\r\n\r\nconst matchDispatchToProps = (dispatch) => {\r\n    return {\r\n        onChangedTextWidth: (width: number) => {\r\n            dispatch(actions.changedTextListWidth(width));\r\n        },\r\n        onChangedTextTitle: (title: string | null) => {\r\n            dispatch(actions.selectTextTitle(title));\r\n        },\r\n        dispatch,\r\n    };\r\n};\r\n\r\nconst HomePageContainer = connect(\r\n    mapStateToProps,\r\n    matchDispatchToProps\r\n)(HomePage);\r\n\r\nexport default HomePageContainer;\r\n","export { default } from \"./HomePageContainer\";\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nfunction usePagination(data, itemsPerPage) {\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  let maxPage = Math.ceil(data.length / itemsPerPage);\r\n\r\n  function currentData() {\r\n    const begin = (currentPage - 1) * itemsPerPage;\r\n    const end = begin + itemsPerPage;\r\n    return data.slice(begin, end);\r\n  }\r\n\r\n  function next() {\r\n    setCurrentPage((currentPage) => Math.min(currentPage + 1, maxPage));\r\n  }\r\n\r\n  function prev() {\r\n    setCurrentPage((currentPage) => Math.max(currentPage - 1, 1));\r\n  }\r\n\r\n  function jump(page) {\r\n    const pageNumber = Math.max(1, page);\r\n    setCurrentPage((currentPage) => Math.min(pageNumber, maxPage));\r\n  }\r\n\r\n  return { next, prev, jump, currentData, currentPage, maxPage };\r\n}\r\n\r\nexport default usePagination;\r\n","import { Collapse } from \"components/UI/muiComponent\";\r\nimport React from \"react\";\r\nimport Player from \"react-howler-player\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nfunction Audio(props) {\r\n    const theme = useTheme();\r\n    let url = \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3\";\r\n    let playerRef = React.useRef(null);\r\n    const handleSeek = (e) => {\r\n        console.log(e);\r\n    };\r\n    const onPlayerReady = (data) => {\r\n        console.log(data);\r\n    };\r\n\r\n    return (\r\n        <Collapse in={props.open}>\r\n            <Player\r\n                profile=\"top_progress\"\r\n                src={[url]}\r\n                isDark={theme.palette.mode === \"dark\" ? true : false}\r\n                onLoad={onPlayerReady}\r\n                speedPanel={\"bottom\"}\r\n                ref={playerRef}\r\n                onPlay={handleSeek}\r\n            />\r\n        </Collapse>\r\n    );\r\n}\r\n\r\nexport default Audio;\r\n","export { default } from \"./Audio\";\r\n","import React from \"react\";\r\nimport Draggable from \"react-draggable\";\r\nimport { Close as CloseIcon } from \"components/UI/muiIcon\";\r\nimport { Paper } from \"components/UI/muiComponent\";\r\nimport Video from \"./Video\";\r\nimport Audio from \"./Audio\";\r\nimport { IconButton } from \"components/UI/muiComponent\";\r\n\r\nconst MEDIA_MAX_WIDTH = \"400px\";\r\n\r\nfunction PaperComponent(props) {\r\n    return (\r\n        <Draggable handle=\"#draggable-dialog-title\" bounds=\"parent\">\r\n            <Paper {...props} />\r\n        </Draggable>\r\n    );\r\n}\r\n\r\nfunction DraggableMedia(props) {\r\n    const [hide, setHide] = React.useState(false);\r\n\r\n    const handleClose = () => {\r\n        props.changeMediaSelection(null);\r\n    };\r\n    const toggleHide = () => {\r\n        setHide((prev) => !prev);\r\n    };\r\n\r\n    return (\r\n        <PaperComponent\r\n            sx={{\r\n                position: \"absolute\",\r\n                zIndex: 1,\r\n                right: 0,\r\n                maxWidth: MEDIA_MAX_WIDTH,\r\n            }}\r\n\r\n            // onClose={handleClose}\r\n        >\r\n            <div className=\"Resizable-media-div\">\r\n                <div\r\n                    style={{\r\n                        cursor: \"move\",\r\n                        paddingInline: 20,\r\n                        paddingTop: 10,\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        alignItems: \"center\",\r\n                    }}\r\n                    id=\"draggable-dialog-title\"\r\n                >\r\n                    <h3>{props.selectedMedia.isVideoVisible && \"VIDEO\"}</h3>\r\n                    <h3>{props.selectedMedia.isAudioVisible && \"AUDIO\"}</h3>\r\n                    <div className=\"buttons-hide-close\">\r\n                        <IconButton onClick={toggleHide} disableRipple>\r\n                            {hide ? \"+\" : \"-\"}\r\n                        </IconButton>\r\n                        <IconButton onClick={handleClose} disableRipple>\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                </div>\r\n                <>\r\n                    {props.selectedMedia.isVideoVisible && (\r\n                        <Video open={!hide} setOpen={setHide} />\r\n                    )}\r\n                    {props.selectedMedia.isAudioVisible && (\r\n                        <Audio open={!hide} setOpen={setHide} />\r\n                    )}\r\n                </>\r\n            </div>\r\n        </PaperComponent>\r\n    );\r\n}\r\n\r\nexport default DraggableMedia;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as reducers from \"reducers\";\r\nimport * as actions from \"actions\";\r\nimport DraggableMedia from \"./DraggableMedia\";\r\nconst mapStateToProps = (state) => {\r\n    let Media = reducers.getMediaData(state);\r\n\r\n    return {\r\n        selectedMedia: Media,\r\n    };\r\n};\r\n\r\nconst matchDispatchToProps = (dispatch) => {\r\n    const changeMediaSelection = (data) =>\r\n        dispatch(actions.mediaSelection(data));\r\n\r\n    return {\r\n        changeMediaSelection,\r\n    };\r\n};\r\n\r\nconst MediaContainer = connect(\r\n    mapStateToProps,\r\n    matchDispatchToProps\r\n)(DraggableMedia);\r\n\r\nexport default MediaContainer;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"time_stamp\":\"Chapters---time_stamp\",\"active_stamp\":\"Chapters---active_stamp\",\"dot\":\"Chapters---dot\",\"image\":\"Chapters---image\",\"chapter_info\":\"Chapters---chapter_info\",\"topic\":\"Chapters---topic\",\"startTime\":\"Chapters---startTime\"};","import React, { useState } from \"react\";\r\nimport styles from \"./Chapters.css\";\r\nimport {\r\n    Accordion,\r\n    AccordionSummary,\r\n    AccordionDetails,\r\n    Link,\r\n    Typography,\r\n    Box,\r\n} from \"components/UI/muiComponent\";\r\nimport {\r\n    ExpandMore as ExpandMoreIcon,\r\n    OpenInNew as OpenInNewIcon,\r\n} from \"components/UI/muiIcon\";\r\nimport classnames from \"classnames\";\r\nimport { connect } from \"react-redux\";\r\nimport * as reducers from \"reducers\";\r\nimport * as actions from \"actions\";\r\nlet YOUTUBE_ID = \"2MMM_ggekfE\";\r\n\r\nfunction Chapters(props) {\r\n    let idxOf = props.videoData.indexOf(props.mediaInterval);\r\n\r\n    const [activeChapter, setActiveChapter] = useState(0);\r\n\r\n    React.useEffect(() => {\r\n        if (idxOf === -1) {\r\n            idxOf = 0;\r\n        }\r\n        setActiveChapter(idxOf);\r\n    }, [idxOf]);\r\n\r\n    React.useEffect(() => {\r\n        props.changeMediaInterval(props.videoData[activeChapter]);\r\n        if (props.isPanelLinked)\r\n            props.changeScrollToId({\r\n                id: props.mediaInterval.source_segment.start || null,\r\n                from: \"video\",\r\n            });\r\n    }, [activeChapter]);\r\n\r\n    return (\r\n        <Accordion sx={{ border: \"#eee 1px solid\", maxHeight: \"80vh\" }}>\r\n            <AccordionSummary\r\n                expandIcon={<ExpandMoreIcon />}\r\n                aria-controls=\"video-chapter-content\"\r\n                id=\"chapter-accordion\"\r\n            >\r\n                <Typography>Chapters</Typography>\r\n            </AccordionSummary>\r\n\r\n            <AccordionDetails\r\n                sx={{\r\n                    position: \"relative\",\r\n                    overflow: \"scroll\",\r\n                    maxHeight: \"250px\",\r\n                }}\r\n            >\r\n                {props.videoData.map((l, index) => {\r\n                    return (\r\n                        <Box key={l.source_segment.start}>\r\n                            <TimeStamp\r\n                                img={\r\n                                    \"//img.youtube.com/vi/\" +\r\n                                    YOUTUBE_ID +\r\n                                    \"/0.jpg\"\r\n                                }\r\n                                topic={\r\n                                    \"first chapter of chojuk asdfa sdfasdfasdf asfdas dfasdfasdd dfsdfsd sdfs s\"\r\n                                }\r\n                                startTime={l.target_segment.start}\r\n                                active={activeChapter === index}\r\n                                setActive={() => setActiveChapter(index)}\r\n                                jumpToTime={props.jumpToTime}\r\n                            />\r\n                        </Box>\r\n                    );\r\n                })}\r\n            </AccordionDetails>\r\n        </Accordion>\r\n    );\r\n}\r\n\r\nfunction TimeStamp(props) {\r\n    const classname = [styles.time_stamp];\r\n    if (props.active) {\r\n        classname.push(styles.active_stamp);\r\n    }\r\n\r\n    const chapterClickHandler = () => {\r\n        props.jumpToTime(props.startTime);\r\n        props.setActive();\r\n    };\r\n\r\n    return (\r\n        <Box className={classnames(classname)} onClick={chapterClickHandler}>\r\n            {props.active === props.index && <div className={styles.dot}></div>}\r\n            <Box className={styles.image}>\r\n                <img src={props.img} alt=\"timestamp image\" />\r\n            </Box>\r\n            <Box className={styles.chapter_info}>\r\n                <Box className={styles.topic}>\r\n                    <div>{props.topic}</div>\r\n                    {props.active && (\r\n                        <Link\r\n                            target=\"_blank\"\r\n                            href={`https://youtu.be/${YOUTUBE_ID}?t=${toSec(\r\n                                props.startTime\r\n                            )}`}\r\n                        >\r\n                            <OpenInNewIcon />\r\n                        </Link>\r\n                    )}\r\n                </Box>\r\n                <Box className={styles.startTime}>{props.startTime}</Box>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const videoData = reducers.getVideoData(state);\r\n    const isPanelLinked = reducers.isPanelLinked(state);\r\n\r\n    return {\r\n        isPanelLinked,\r\n        videoData: videoData.alignment,\r\n        mediaInterval: reducers.getMediaInterval(state),\r\n    };\r\n};\r\n\r\nconst matchDispatchToProps = (dispatch) => {\r\n    const changeMediaInterval = (interval) => {\r\n        dispatch(actions.selectMediaInterval(interval));\r\n    };\r\n    return {\r\n        changeMediaInterval,\r\n        changeScrollToId: (payload) =>\r\n            dispatch(actions.changeScrollToId(payload)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, matchDispatchToProps)(Chapters);\r\n\r\nfunction toSec(hms = \"\") {\r\n    var a = hms.split(\":\"); // split it at the colons\r\n    // minutes are worth 60 seconds. Hours are worth 60 minutes.\r\n    var seconds = +a[0] * 60 * 60 + +a[1] * 60 + +a[2];\r\n    return seconds;\r\n}\r\n","import React, { useRef, useEffect, useState, useCallback } from \"react\";\r\nimport ReactPlayer from \"react-player\";\r\nimport _ from \"lodash\";\r\nimport { Collapse } from \"components/UI/muiComponent\";\r\nimport Chapters from \"./Chapters\";\r\nimport { connect } from \"react-redux\";\r\nimport * as reducers from \"reducers\";\r\nimport * as actions from \"actions\";\r\n\r\nfunction Video(props) {\r\n    let textIdfromAlignment = props.alignmentData.text;\r\n    const syncIdOnClick = props.syncIdOnClick;\r\n    const videoRef = useRef();\r\n    const VideoData = props?.videoData?.alignment || [];\r\n    const url = \"https://www.youtube.com/watch?v=2MMM_ggekfE\"; //url should be from db api\r\n    let VideoIdListRange = [];\r\n    let closestID = [];\r\n    const [state, setState] = useState({\r\n        played: 0,\r\n        duration: 0,\r\n        playing: true,\r\n    });\r\n    if (!_.isEmpty(VideoData)) {\r\n        VideoIdListRange = VideoData.map((l) => [\r\n            parseInt(l.source_segment.start),\r\n            parseInt(l.source_segment.end),\r\n        ]);\r\n    }\r\n    useEffect(() => {\r\n        if (\r\n            textIdfromAlignment === props.selectedText.id &&\r\n            props.isPanelLinked\r\n        ) {\r\n            let ClickId = syncIdOnClick;\r\n\r\n            closestID = VideoIdListRange.find(\r\n                ([start, end]) => ClickId > start && ClickId < end\r\n            );\r\n            if (closestID) {\r\n                let data = VideoData.find(\r\n                    (l) => l.source_segment.start === closestID[0]?.toString()\r\n                );\r\n\r\n                if (!_.isEmpty(data)) {\r\n                    jumpToTime(data.target_segment.start);\r\n                    props.changeMediaInterval(data);\r\n                }\r\n            }\r\n        }\r\n    }, [syncIdOnClick]);\r\n    const handleProgress = (state) => {\r\n        // We only want to update time slider if we are not currently seeking\r\n        const played = state.playedSeconds;\r\n        const Interval = VideoData.find(\r\n            (time) =>\r\n                toSec(time.target_segment.start) < played &&\r\n                toSec(time.target_segment.end) > played\r\n        );\r\n        if (!_.isEmpty(Interval)) {\r\n            props.changeMediaInterval(Interval);\r\n        }\r\n    };\r\n    const jumpToTime = (time) => {\r\n        videoRef.current.seekTo(toSec(time), \"seconds\");\r\n    };\r\n\r\n    if (VideoData.length === 0) return <div />;\r\n    if (props.videoData.source.witness !== parseInt(props.witness))\r\n        return <div />;\r\n    return (\r\n        <Collapse in={props.open}>\r\n            <ReactPlayer\r\n                url={url}\r\n                style={{\r\n                    maxWidth: \"100%\",\r\n                    objectFit: \"contain\",\r\n                }}\r\n                width=\"400px\"\r\n                height=\"250px\"\r\n                ref={videoRef}\r\n                controls={true}\r\n                onDuration={(duration) =>\r\n                    setState({ ...state, duration: duration })\r\n                }\r\n                playing\r\n                onPlay={() => setState({ ...state, playing: true })}\r\n                onPause={() => setState({ ...state, playing: false })}\r\n                onError={() => console.log(\"error in media sec\")}\r\n                onSeek={(e) => console.log(\"onSeek\", e)}\r\n                onProgress={handleProgress}\r\n            />\r\n\r\n            <Chapters jumpToTime={jumpToTime} />\r\n        </Collapse>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const scrollToId = reducers.getScrollToId(state);\r\n    const syncIdOnClick = reducers.getSyncIdOnClick(state);\r\n    const videoData = reducers.getVideoData(state);\r\n    let Media = reducers.getMediaData(state);\r\n    const selectedText = reducers.getSelectedText(state);\r\n    const alignmentData = reducers.getAlignment(state);\r\n    const witness = reducers.getSelectedTextWitnessId(state, selectedText.id);\r\n    const isPanelLinked = reducers.isPanelLinked(state);\r\n\r\n    return {\r\n        isPanelLinked,\r\n        scrollToId,\r\n        syncIdOnClick,\r\n        videoData,\r\n        selectedMedia: Media,\r\n        selectedText,\r\n        alignmentData,\r\n        witness,\r\n        mediaInterval: reducers.getMediaInterval(state),\r\n    };\r\n};\r\n\r\nconst matchDispatchToProps = (dispatch) => {\r\n    const toggleImage = (data) => dispatch(actions.changedShowPageImages(data));\r\n    const changeMediaSelection = (data) =>\r\n        dispatch(actions.mediaSelection(data));\r\n\r\n    const onSelectedSearchResult = (\r\n        text: api.TextData,\r\n        start: number,\r\n        length: number,\r\n        selectedText: api.TextData | null\r\n    ) => {\r\n        if (!selectedText || selectedText.id !== text.id) {\r\n            dispatch(\r\n                batchActions([\r\n                    actions.selectedSearchResult(text.id, start, length),\r\n                    actions.selectedText(text),\r\n                ])\r\n            );\r\n        } else {\r\n            dispatch(actions.selectedSearchResult(text.id, start, length));\r\n        }\r\n    };\r\n    const changeMediaInterval = (interval) => {\r\n        dispatch(actions.selectMediaInterval(interval));\r\n    };\r\n    return {\r\n        toggleImage,\r\n        onSelectedSearchResult,\r\n        changeMediaSelection,\r\n        changeMediaInterval,\r\n        changeSelectedRange: (payload) => {\r\n            dispatch(actions.changeSelectedRange(payload));\r\n        },\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, matchDispatchToProps)(Video);\r\n\r\nfunction toSec(hms = \"\") {\r\n    var a = hms.split(\":\"); // split it at the colons\r\n    // minutes are worth 60 seconds. Hours are worth 60 minutes.\r\n    var seconds = +a[0] * 60 * 60 + +a[1] * 60 + +a[2];\r\n    return seconds;\r\n}\r\n","export { default } from \"./Video\";\r\n","export { default } from \"./MediaContainer\";\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"Resources\":\"Sidebar---Resources\",\"ResourceDetail\":\"Sidebar---ResourceDetail\",\"optionlist\":\"Sidebar---optionlist\",\"css-heg063-MuiTabs-flexContainer\":\"Sidebar---css-heg063-MuiTabs-flexContainer\",\"listContainer\":\"Sidebar---listContainer\",\"sidebar\":\"Sidebar---sidebar\",\"menu_title\":\"Sidebar---menu_title\",\"sidebar_header\":\"Sidebar---sidebar_header\"};","import React, { useState } from \"react\";\r\nimport styles from \"./Sidebar.css\";\r\n\r\nimport {\r\n    Info as InfoIcon,\r\n    PermMedia as PermMediaIcon,\r\n    Book as BookIcon,\r\n    Feedback as FeedbackIcon,\r\n    YoutubeSearchedFor as YoutubeSearchedForIcon,\r\n    Menu as MenuIcon,\r\n    Close as CloseIcon,\r\n} from \"components/UI/muiIcon\";\r\nimport Index from \"./SidebarOptions\";\r\nimport useLocalStorage from \"components/utility/useLocalStorage\";\r\nimport { Tabs, Tab, Typography, Box } from \"components/UI/muiComponent\";\r\nimport { useTheme } from \"@mui/styles\";\r\nimport { connect } from \"react-redux\";\r\nimport * as reducers from \"reducers\";\r\nfunction Sidebar(props) {\r\n    const [value, setValue] = useLocalStorage(\"selectedResources\", 0);\r\n    const [isOpen, setOpen] = useState(false);\r\n\r\n    React.useEffect(() => {\r\n        let timer = setTimeout(() => {\r\n            if (props.isSecondWindowOpen) {\r\n                window.dispatchEvent(new Event(\"resize\"));\r\n            }\r\n        }, 1000);\r\n        return () => clearTimeout(timer);\r\n    }, [isOpen]);\r\n\r\n    const handleChange = (event: React.SyntheticEvent, newValue: number) => {\r\n        setValue(newValue);\r\n    };\r\n    const handleOpen = () => {\r\n        setOpen((prev) => !prev);\r\n    };\r\n    const theme = useTheme();\r\n    return (\r\n        <Box\r\n            sx={{\r\n                width: isOpen ? \"100%\" : \"45px\",\r\n                bgcolor: \"background.default\",\r\n                position: props.isSecondWindowOpen ? \"relative\" : \"absolute\",\r\n                borderRight:\r\n                    theme.palette.mode === \"light\"\r\n                        ? \"2px solid lightgray\"\r\n                        : \"2px solid #d3d3d3\",\r\n            }}\r\n            className={styles.sidebar}\r\n        >\r\n            <Box className={styles.sidebar_header}>\r\n                <Typography\r\n                    className={styles.menu_title}\r\n                    sx={\r\n                        isOpen\r\n                            ? { width: \"fit-content\", opacity: 1 }\r\n                            : { width: \"0\", opacity: 0 }\r\n                    }\r\n                >\r\n                    Menu\r\n                </Typography>\r\n                <div\r\n                    onClick={handleOpen}\r\n                    style={{ cursor: \"pointer\", zIndex: 1 }}\r\n                >\r\n                    {!isOpen ? <MenuIcon /> : <CloseIcon />}\r\n                </div>\r\n            </Box>\r\n            <Box\r\n                sx={{\r\n                    borderBottom: 1,\r\n                    display: \"flex\",\r\n                }}\r\n                className={styles.optionlist}\r\n            >\r\n                <Tabs\r\n                    value={value}\r\n                    sx={{\r\n                        flex: 1,\r\n                    }}\r\n                    onChange={handleChange}\r\n                    orientation={!isOpen ? \"vertical\" : \"horizontal\"}\r\n                    aria-label=\"basic tabs example\"\r\n                >\r\n                    <Tab\r\n                        style={{ minWidth: 0, flex: 1 }}\r\n                        onClick={() => setOpen(true)}\r\n                        icon={<InfoIcon />}\r\n                        {...a11yProps(0)}\r\n                    ></Tab>\r\n\r\n                    <Tab\r\n                        style={{ minWidth: 0, flex: 1 }}\r\n                        icon={<PermMediaIcon />}\r\n                        onClick={() => setOpen(true)}\r\n                        {...a11yProps(1)}\r\n                    ></Tab>\r\n                    <Tab\r\n                        style={{ minWidth: 0, flex: 1 }}\r\n                        icon={<BookIcon />}\r\n                        onClick={() => setOpen(true)}\r\n                        {...a11yProps(2)}\r\n                    ></Tab>\r\n                    <Tab\r\n                        style={{ minWidth: 0, flex: 1 }}\r\n                        icon={<FeedbackIcon />}\r\n                        onClick={() => setOpen(true)}\r\n                        {...a11yProps(3)}\r\n                    ></Tab>\r\n                </Tabs>\r\n            </Box>\r\n            {isOpen && (\r\n                <>\r\n                    <TabPanel value={value} index={0}>\r\n                        <Index.About />\r\n                    </TabPanel>\r\n                    <TabPanel value={value} index={1}>\r\n                        <Index.Resources />\r\n                    </TabPanel>\r\n                    <TabPanel value={value} index={2}>\r\n                        <Index.FullTextSearch />\r\n                    </TabPanel>\r\n                    <TabPanel value={value} index={3}>\r\n                        <Index.Discussion />\r\n                    </TabPanel>\r\n                </>\r\n            )}\r\n        </Box>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): {} => {\r\n    const isSecondWindowOpen = reducers.isSecondWindowOpen(state);\r\n\r\n    return {\r\n        isSecondWindowOpen,\r\n    };\r\n};\r\nexport default connect(mapStateToProps)(Sidebar);\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: number;\r\n    value: number;\r\n}\r\n\r\nfunction a11yProps(index: number) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        \"aria-controls\": `simple-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n            style={{\r\n                flex: 1,\r\n                display: value == index ? \"flex\" : \"none\",\r\n                flexDirection: \"column\",\r\n            }}\r\n        >\r\n            {value === index && (\r\n                <div className={styles.listContainer}>{children}</div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","// extracted by mini-css-extract-plugin","import React, { useState } from \"react\";\r\nimport styles from \"./About.css\";\r\nimport * as reducers from \"reducers\";\r\nimport * as actions from \"actions\";\r\nimport {\r\n    Typography,\r\n    Accordion,\r\n    AccordionDetails,\r\n    AccordionSummary,\r\n} from \"components/UI/muiComponent\";\r\nimport { connect } from \"react-redux\";\r\nimport { text } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { ExpandMore } from \"components/UI/muiIcon\";\r\nfunction About(props) {\r\n    const { Textdata, selectedText } = props;\r\n\r\n    if (!selectedText) return <div>no selected Text available</div>;\r\n\r\n    let selected = Textdata.detail.find((l) => l.text === selectedText.id);\r\n    if (!selected) return <div>No about info</div>;\r\n    return (\r\n        <>\r\n            <Typography variant=\"h4\" component=\"div\" mb={3}>\r\n                <FormattedMessage id=\"Resource.About\" />\r\n            </Typography>\r\n            <Accordion TransitionProps={{ unmountOnExit: true }}>\r\n                <AccordionSummary\r\n                    sx={{ fontWeight: \"bold\" }}\r\n                    expandIcon={<ExpandMore />}\r\n                >\r\n                    <FormattedMessage id=\"text.title\" />\r\n                </AccordionSummary>\r\n                <AccordionDetails>{selected.title}</AccordionDetails>\r\n            </Accordion>\r\n            <Accordion TransitionProps={{ unmountOnExit: true }}>\r\n                <AccordionSummary expandIcon={<ExpandMore />}>\r\n                    <FormattedMessage id=\"text.description\" />\r\n                </AccordionSummary>\r\n                <AccordionDetails>{selected.description}</AccordionDetails>\r\n            </Accordion>\r\n        </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): {} => {\r\n    return {\r\n        Textdata: reducers.getTextTitle(state),\r\n        selectedText: reducers.getSelectedText(state),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(About);\r\n","import React from \"react\";\r\nimport {\r\n    DiscourseForum,\r\n    DiscourseTopicList,\r\n} from \"components/utility/discourseForum\";\r\nimport { Typography, Box } from \"components/UI/muiComponent\";\r\n\r\nfunction Discussions() {\r\n    return (\r\n        <>\r\n            {\" \"}\r\n            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                Discussions\r\n            </Typography>\r\n            {/* <DiscourseForum topicId={1321}/> */}\r\n            <DiscourseTopicList category={\"55\"} perPage={\"5\"} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Discussions;\r\n","import React from \"react\";\r\nimport styles from \"./ResourceOption.css\";\r\nimport Search from \"components/TextsSearch\";\r\nimport TextListContainer from \"containers/TextListContainer\";\r\nfunction FullTextSearch() {\r\n    return (\r\n        <>\r\n            <Search />\r\n            <TextListContainer />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default FullTextSearch;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dictionary\":\"ResourceOption---Dictionary\"};","// extracted by mini-css-extract-plugin","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport styles from \"./Resources.css\";\r\nimport {\r\n    Image as ImageIcon,\r\n    OndemandVideo as OndemandVideoIcon,\r\n    Audiotrack as AudiotrackIcon,\r\n} from \"components/UI/muiIcon\";\r\n\r\nimport * as actions from \"actions\";\r\nimport * as reducers from \"reducers\";\r\nimport {\r\n    List,\r\n    ListItem,\r\n    ListItemButton,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Typography,\r\n} from \"components/UI/muiComponent\";\r\nfunction Resources(props) {\r\n    const handleMediaToggle = (data) => {\r\n        props.changeMediaSelection(data);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                Media\r\n            </Typography>\r\n            <List\r\n                sx={{\r\n                    width: \"100%\",\r\n                    maxWidth: 360,\r\n                    bgcolor: \"background.paper\",\r\n                }}\r\n            >\r\n                <ListItemButton\r\n                    selected={props.showPageImages}\r\n                    onClick={() =>\r\n                        props.changedShowPageImages(!props.showPageImages)\r\n                    }\r\n                >\r\n                    <ListItemIcon>\r\n                        <ImageIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Image\" />\r\n                </ListItemButton>\r\n                <ListItemButton\r\n                    selected={props.selectedMedia.isVideoVisible}\r\n                    onClick={() => handleMediaToggle(\"VIDEO\")}\r\n                >\r\n                    <ListItemIcon>\r\n                        <OndemandVideoIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Video\" />\r\n                </ListItemButton>\r\n                <ListItemButton\r\n                    selected={props.selectedMedia.isAudioVisible}\r\n                    onClick={() => handleMediaToggle(\"AUDIO\")}\r\n                >\r\n                    <ListItemIcon>\r\n                        <AudiotrackIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Audio\" />\r\n                </ListItemButton>\r\n            </List>\r\n        </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): {} => {\r\n    let selectedMedia = reducers.getMediaData(state);\r\n    const alignmentData = reducers.getAlignment(state);\r\n    const showPageImages = reducers.showPageImages(state);\r\n    return {\r\n        alignmentData,\r\n        selectedMedia,\r\n        showPageImages,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    const changeMediaSelection = (data) =>\r\n        dispatch(actions.mediaSelection(data));\r\n    return {\r\n        changedShowPageImages: (data) => {\r\n            dispatch(actions.changedShowPageImages(data));\r\n        },\r\n        changeMediaSelection,\r\n        onSelectedSearchResult: (\r\n            text: number,\r\n            start: number,\r\n            length: number\r\n        ) => {\r\n            dispatch(actions.selectedSearchResult(text, start, length));\r\n        },\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Resources);\r\n","import About from \"./About\";\r\nimport Resources from \"./Resources\";\r\nimport FullTextSearch from \"./FullTextSearch\";\r\nimport Discussion from './Discussions'\r\nexport default { About, Resources,  FullTextSearch,Discussion };\r\n","export { default } from \"./Sidebar.js\";\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"button\":\"AddButton---button\"};","import React from \"react\";\r\nimport styles from \"./AddButton.css\";\r\n\r\ntype Props = {\r\n    title?: string,\r\n    onClick?: () => void\r\n};\r\n\r\nconst AddButton = (props: Props) => {\r\n    return (\r\n        <div className={styles.button} title={props.title} onClick={props.onClick}>\r\n            +\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddButton;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"inlineWidth\":\"280px\",\"annotationControls\":\"AnnotationControls---annotationControls\",\"annotationContent\":\"AnnotationControls---annotationContent\",\"subTitle\":\"AnnotationControls---subTitle\",\"title\":\"AnnotationControls---title\",\"sectionHeading\":\"AnnotationControls---sectionHeading\",\"text\":\"AnnotationControls---text\",\"padding\":\"AnnotationControls---padding\",\"arrowTop\":\"AnnotationControls---arrowTop\",\"arrowLeft\":\"AnnotationControls---arrowLeft\",\"arrowRight\":\"AnnotationControls---arrowRight\",\"inline\":\"AnnotationControls---inline\",\"arrow\":\"AnnotationControls---arrow\",\"arrowDs\":\"AnnotationControls---arrowDs\",\"nothingSelected\":\"AnnotationControls---nothingSelected\",\"anonymousMessage\":\"AnnotationControls---anonymousMessage\",\"noNotes\":\"AnnotationControls---noNotes\",\"breakButtons\":\"AnnotationControls---breakButtons\"};","// @flow\r\nimport * as React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport classnames from \"classnames\";\r\nimport AnnotationDetail from \"./AnnotationDetail\";\r\nimport AnnotationDetailEdit from \"./AnnotationDetailEdit\";\r\nimport styles from \"./AnnotationControls.css\";\r\nimport colours from \"css/colour.css\";\r\nimport User from \"lib/User\";\r\nimport Witness from \"lib/Witness\";\r\nimport Annotation, { ANNOTATION_TYPES } from \"lib/Annotation\";\r\nimport AnnotationControlsHeading from \"./AnnotationControlsHeading\";\r\nimport NoteEditor from \"./NoteEditor\";\r\nimport QuestionView from \"./QuestionView\";\r\nimport QuestionEditor from \"./QuestionEditor\";\r\nimport QuestionsLoading from \"./QuestionsLoading\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport Note from \"./Note\";\r\nimport Button from \"components/UI/Button\";\r\nimport PageBreakIcon from \"images/page_break_icon.svg\";\r\nimport { List } from \"react-virtualized/dist/es/List\";\r\nimport AnnotationControlsHeader from \"./AnnotationControlsHeader\";\r\nimport Question from \"lib/Question\";\r\nimport type { AnnotationUniqueId } from \"lib/Annotation\";\r\nimport { Snackbar } from \"components/UI/muiComponent\";\r\nexport const CONTROLS_MARGIN_LEFT = 10;\r\nexport type QuestionData = {\r\n    loading: boolean,\r\n    questions: Question[],\r\n};\r\n\r\nexport type Props = {\r\n    inline: boolean,\r\n    user: User,\r\n    annotationsData: null,\r\n    activeAnnotation: null,\r\n    baseAnnotation: null,\r\n    availableAnnotations: Annotation[] | null,\r\n    temporaryAnnotation: null,\r\n    inline: null,\r\n    firstSelectedSegment: null,\r\n    splitTextRect: ClientRect | null,\r\n    selectedWitness: Witness,\r\n    selectedElementId: string | null,\r\n    selectedElementIds: string[] | null,\r\n    pechaImageClass: string,\r\n    notes: Annotation[],\r\n    temporaryNotes: Annotation[],\r\n    questions: Annotation[],\r\n    questionsData: { [annotationId: AnnotationUniqueId]: QuestionData },\r\n    temporaryQuestions: Annotation[],\r\n    questionQuote: React.Element<typeof React.Component> | null,\r\n    addNote: () => void,\r\n    editNote: (annotation: Annotation) => void,\r\n    saveAnnotation: (annotation: Annotation, content: string) => void,\r\n    cancelEditAnnotation: (annotation: Annotation) => void,\r\n    deleteAnnotation: (annotation: Annotation) => void,\r\n    addPageBreak: () => void,\r\n    addLineBreak: () => void,\r\n    addQuestion: () => void,\r\n    saveQuestion: (\r\n        question: Annotation,\r\n        title: string,\r\n        content: string\r\n    ) => void,\r\n    list: List | null,\r\n    closeAnnotation: () => void,\r\n};\r\n\r\ntype AnchorPoint = \"top\" | \"left\" | \"bottom\" | \"right\";\r\n\r\nconst anchorPoints = {\r\n    top: 1,\r\n    left: 2,\r\n    bottom: 3,\r\n    right: 4,\r\n};\r\n\r\nclass AnnotationControls extends React.Component<Props> {\r\n    controls: HTMLDivElement | null;\r\n    arrow: HTMLDivElement | null;\r\n    arrowDs: HTMLDivElement | null;\r\n    annotation: null;\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.controls = null;\r\n        this.arrow = null;\r\n        this.arrowDs = null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updatePosition();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // Need to delay calling this because the browser\r\n        // may not have finished rendering when first called.\r\n\r\n        setTimeout(this.updatePosition.bind(this), 0);\r\n    }\r\n\r\n    updatePosition() {\r\n        const measurements = this.getMeasurements();\r\n        if (\r\n            !this.props.inline ||\r\n            !this.controls ||\r\n            !this.arrow ||\r\n            !measurements\r\n        ) {\r\n            return;\r\n        }\r\n        const controls = this.controls;\r\n        const height = controls.offsetHeight;\r\n        const width = controls.offsetWidth;\r\n        const arrow = this.arrow;\r\n        const bottomGap = measurements.bottomGap;\r\n        const offScreen = bottomGap < 0 || bottomGap > height;\r\n\r\n        let top = measurements.top;\r\n        const viewPortWidth = measurements.viewPortWidth || 0;\r\n        let selectedLeft = measurements.left;\r\n        let selectedRight = selectedLeft + measurements.width;\r\n\r\n        arrow.style.display = \"none\";\r\n        if (this.props.selectedElementIds) {\r\n            let lines = 1;\r\n            let prevSegmentLeft = 0;\r\n            let lastLineLeft = 0;\r\n            let lastLineRight = 0;\r\n            let lastLineBottom = 0;\r\n            for (let i = 0; i < this.props.selectedElementIds.length; i++) {\r\n                const segmentId = this.props.selectedElementIds[i];\r\n                const segment = document.getElementById(segmentId);\r\n                if (segment) {\r\n                    const segmentLeft = segment.offsetLeft;\r\n                    const segmentRight = segmentLeft + segment.offsetWidth;\r\n                    if (segmentLeft < prevSegmentLeft) {\r\n                        lines++;\r\n                        lastLineLeft = segmentLeft;\r\n                        lastLineRight = segmentRight;\r\n                        lastLineBottom =\r\n                            segment.offsetTop + segment.offsetHeight;\r\n                        selectedLeft = segmentLeft;\r\n                        selectedRight = segmentRight;\r\n                    } else if (segmentRight > lastLineRight) {\r\n                        lastLineRight = segmentRight;\r\n                        // selectedRight = segmentRight;\r\n                    }\r\n                    if (segmentLeft < selectedLeft) selectedLeft = segmentLeft;\r\n                    if (segmentRight > selectedRight)\r\n                        selectedRight = segmentRight;\r\n                    prevSegmentLeft = segmentLeft;\r\n                }\r\n            }\r\n        }\r\n        let selectedWidth = selectedRight - selectedLeft;\r\n\r\n        let selectedRightSide = viewPortWidth - (selectedLeft + selectedWidth);\r\n\r\n        let anchorPoint = anchorPoints.bottom;\r\n        let moveToSide = false;\r\n        let moveRight = 0;\r\n        if (!offScreen && bottomGap < height) {\r\n            moveToSide = true;\r\n        }\r\n        if (\r\n            selectedRightSide < width + 50 ||\r\n            viewPortWidth - measurements.left < width + 50\r\n        ) {\r\n            moveToSide = true;\r\n        }\r\n        if (moveToSide) {\r\n            arrow.className = styles.arrowLeft;\r\n            if (selectedLeft - width - arrow.offsetWidth < 0) {\r\n                anchorPoint = anchorPoints.right;\r\n            } else {\r\n                anchorPoint = anchorPoints.left;\r\n            }\r\n        } else {\r\n            let controlOverhang = width / 2 - selectedWidth / 2;\r\n            if (selectedLeft - controlOverhang < 0) {\r\n                moveRight = Math.abs(selectedLeft - controlOverhang);\r\n            }\r\n            if (selectedRight + controlOverhang > viewPortWidth) {\r\n                moveRight = viewPortWidth - (selectedRight + controlOverhang);\r\n            }\r\n        }\r\n\r\n        if (anchorPoint === anchorPoints.bottom) {\r\n            let arrowHeight = 0;\r\n            let arrowLeft = 0;\r\n            if (this.arrow) {\r\n                this.arrow.className = styles.arrowTop;\r\n                arrowLeft = width / 2 - this.arrow.offsetWidth / 2 - moveRight;\r\n                if (arrowLeft < 0) arrowLeft = 0;\r\n                this.arrow.style.left = arrowLeft + \"px\";\r\n                arrowHeight = this.arrow.offsetHeight;\r\n                this.arrow.style.top = 0 - arrowHeight + \"px\";\r\n            }\r\n            // controls.style.top = top + measurements.height + arrowHeight + \"px\";\r\n            controls.style.top = top - measurements.height - 15 + \"px\";\r\n            // controls.style.left =\r\n            // selectedLeft + selectedWidth / 2 - width / 2 + moveRight + \"px\";\r\n            controls.style.left = measurements.left + \"px\";\r\n        } else if (moveToSide) {\r\n            arrow.className = styles.arrowRight;\r\n            let arrowHeight = arrow.offsetHeight;\r\n            let controlsTop = measurements.top - measurements.height - 15;\r\n            if (\r\n                measurements.top +\r\n                    measurements.height +\r\n                    bottomGap -\r\n                    controlsTop <\r\n                height\r\n            ) {\r\n                controlsTop =\r\n                    measurements.top + measurements.height + bottomGap - height;\r\n            }\r\n            if (anchorPoint === anchorPoints.left) {\r\n                // left side of selection\r\n\r\n                arrow.style.left = width - 2 + \"px\";\r\n                controls.style.left =\r\n                    selectedLeft - width / 2 - arrow.offsetWidth + \"px\";\r\n            } else {\r\n                // right-side of selection\r\n                arrow.className = styles.arrowLeft;\r\n                arrow.style.left = -arrow.offsetWidth + \"px\";\r\n                controls.style.left =\r\n                    selectedLeft +\r\n                    selectedWidth -\r\n                    width / 2 +\r\n                    arrow.offsetWidth +\r\n                    \"px\";\r\n\r\n                // controls.style.right = 0 + \"px\";\r\n            }\r\n            arrow.style.top =\r\n                measurements.top -\r\n                controlsTop +\r\n                measurements.height / 2 -\r\n                arrowHeight / 2 +\r\n                \"px\";\r\n\r\n            controls.style.top = controlsTop + \"px\";\r\n        } else {\r\n            controls.style.top = top + \"px\";\r\n        }\r\n    }\r\n\r\n    getMeasurements(): {\r\n        top: number,\r\n        textTop: number,\r\n        rowTop: number,\r\n        left: number,\r\n        width: number,\r\n        height: number,\r\n        topGap: number,\r\n        bottomGap: number,\r\n        viewPortWidth: number | null,\r\n    } | null {\r\n        if (!this.props.selectedElementIds) {\r\n            return null;\r\n        }\r\n\r\n        const lastSelectedElementId =\r\n            this.props.selectedElementIds[\r\n                this.props.selectedElementIds.length - 1\r\n            ];\r\n        const lastElement = document.getElementById(lastSelectedElementId);\r\n        const firstSelectedElementId = this.props.selectedElementIds[0];\r\n        const firstElement = document.getElementById(firstSelectedElementId);\r\n\r\n        const splitTextRect = this.props.splitTextRect;\r\n        let extraTop = 0;\r\n        let scrollTop = 0;\r\n\r\n        if (this.props.list) {\r\n            scrollTop = this.props.list.Grid.state.scrollTop;\r\n        }\r\n        if (this.props.pechaImageClass) {\r\n            const pechaImage = document.getElementsByClassName(\r\n                this.props.pechaImageClass\r\n            )[0];\r\n            extraTop = pechaImage.offsetHeight;\r\n        }\r\n        if (!firstElement) {\r\n            console.warn(\r\n                \"no valid element found in getMeasurements, elementId: %s\",\r\n                this.props.selectedElementId\r\n            );\r\n            return {\r\n                top: 0,\r\n                textTop: 0,\r\n                rowTop: 0,\r\n                left: 0,\r\n                width: 1,\r\n                height: 1,\r\n                topGap: 0,\r\n                bottomGap: 0,\r\n                viewPortWidth: 1,\r\n            };\r\n        }\r\n        const top = firstElement.offsetTop + extraTop;\r\n        const textTop = firstElement.offsetTop;\r\n        const left = firstElement.offsetLeft;\r\n        const width = firstElement.offsetWidth;\r\n        const height = firstElement.offsetHeight;\r\n        let rowTop = top;\r\n\r\n        let viewPortWidth = null;\r\n        let topGap = 0;\r\n        let bottomGap = 0;\r\n\r\n        if (firstElement && splitTextRect) {\r\n            const elRect = firstElement.getBoundingClientRect();\r\n            topGap = splitTextRect.height - elRect.top;\r\n        }\r\n        if (lastElement && splitTextRect) {\r\n            const elRect = lastElement.getBoundingClientRect();\r\n\r\n            bottomGap =\r\n                splitTextRect.height + splitTextRect.top - elRect.bottom;\r\n            viewPortWidth = splitTextRect.width;\r\n        }\r\n\r\n        return {\r\n            top: top,\r\n            textTop: textTop,\r\n            rowTop: rowTop,\r\n            left: left,\r\n            width: width,\r\n            height: height,\r\n            topGap: topGap,\r\n            bottomGap: bottomGap,\r\n            viewPortWidth: viewPortWidth,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const props = this.props;\r\n        let annotations = [];\r\n        let temporaryAnnotations = [];\r\n        let anonymousUserMessage = null;\r\n        let nothingSelected = null;\r\n        const isLoggedIn = props.user.isLoggedIn;\r\n\r\n        let breakSelected = false;\r\n        if (\r\n            props.activeAnnotation &&\r\n            (props.activeAnnotation.isType(ANNOTATION_TYPES.pageBreak) ||\r\n                props.activeAnnotation.isType(ANNOTATION_TYPES.lineBreak))\r\n        ) {\r\n            breakSelected = true;\r\n        }\r\n        // the selected word/sentence is props.anotationsData\r\n\r\n        if (props.annotationsData) {\r\n            props.annotationsData.map((annotationData) => {\r\n                const randomPercentage = Math.round(Math.random() * 99) + 1;\r\n                let isEditing = false;\r\n                let isActive = false;\r\n                if (annotationData.isTemporary) {\r\n                    isEditing = true;\r\n                    isActive = true;\r\n                } else if (\r\n                    !props.temporaryAnnotation &&\r\n                    annotationData.annotation.uniqueId ==\r\n                        props.activeAnnotation.uniqueId\r\n                ) {\r\n                    isActive = true;\r\n                }\r\n\r\n                if (isEditing) {\r\n                    let annotationDetail = (\r\n                        <AnnotationDetailEdit\r\n                            annotationData={annotationData}\r\n                            key={annotationData.annotation.uniqueId}\r\n                            isActive={isActive}\r\n                            saveAnnotationHandler={(content) => {\r\n                                props.saveAnnotation(\r\n                                    annotationData.annotation,\r\n                                    content\r\n                                );\r\n                            }}\r\n                            cancelAnnotationHandler={() => {\r\n                                props.cancelEditAnnotation(\r\n                                    annotationData.annotation\r\n                                );\r\n                            }}\r\n                            isLoggedIn={isLoggedIn}\r\n                            selectAnnotationHandler={() => {}}\r\n                            editAnnotationHandler={() => {}}\r\n                        />\r\n                    );\r\n                    temporaryAnnotations.push(annotationDetail);\r\n                } else {\r\n                    let annotationDetail = (\r\n                        <AnnotationDetail\r\n                            accuracy={randomPercentage}\r\n                            annotationData={annotationData}\r\n                            key={annotationData.annotation.uniqueId}\r\n                            isActive={isActive}\r\n                            user={props.user}\r\n                            selectAnnotationHandler={() => {\r\n                                if (isLoggedIn && !isEditing) {\r\n                                    props.didSelectAnnotation(\r\n                                        annotationData.annotation\r\n                                    );\r\n                                }\r\n                            }}\r\n                            editAnnotationHandler={() => {\r\n                                if (isLoggedIn && !isEditing) {\r\n                                    props.editAnnotation(\r\n                                        annotationData.annotation\r\n                                    );\r\n                                }\r\n                            }}\r\n                            isLoggedIn={isLoggedIn}\r\n                        />\r\n                    );\r\n                    annotations.push(annotationDetail);\r\n                }\r\n            }, this);\r\n            if (!props.user.isLoggedIn) {\r\n                // NOTE: FormattedMessage cannot take a child when using\r\n                // the values option, so need to wrap it in a div\r\n                anonymousUserMessage = (\r\n                    <div className={styles.anonymousMessage}>\r\n                        <FormattedMessage\r\n                            id=\"annotations.loginMessage\"\r\n                            values={{\r\n                                loginLink: (\r\n                                    <a href=\"/accounts/login/\">\r\n                                        <FormattedMessage id=\"annotations.loginLink\" />\r\n                                    </a>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n        } else {\r\n            nothingSelected = (\r\n                <div className={styles.nothingSelected}>Nothing Selected</div>\r\n            );\r\n        }\r\n\r\n        let pageBreaksButton = null;\r\n        let allowPageBreak = !this.props.selectedWitness.isWorking;\r\n        let lineBreaksButton = null;\r\n        let allowLineBreak = !this.props.selectedWitness.isWorking;\r\n        if (isLoggedIn && !this.props.selectedWitness.isWorking) {\r\n            let pageBreaks = [];\r\n            let lineBreaks = [];\r\n            if (this.props.availableAnnotations) {\r\n                pageBreaks = this.props.availableAnnotations.filter(\r\n                    (annotation: Annotation) =>\r\n                        annotation.type === ANNOTATION_TYPES.pageBreak &&\r\n                        annotation.creatorWitness.id ===\r\n                            this.props.selectedWitness.id\r\n                );\r\n                lineBreaks = this.props.availableAnnotations.filter(\r\n                    (annotation: Annotation) =>\r\n                        annotation.type === ANNOTATION_TYPES.lineBreak &&\r\n                        annotation.creatorWitness.id ===\r\n                            this.props.selectedWitness.id\r\n                );\r\n            }\r\n\r\n            if (pageBreaks.length > 0) {\r\n                pageBreaksButton = (\r\n                    <div className={styles.breakButtons}>\r\n                        <Button\r\n                            title=\"Page Break\"\r\n                            accessoryType=\"DELETE\"\r\n                            icon={<PageBreakIcon width={20} height={20} />}\r\n                            onClick={() => {\r\n                                this.props.deleteAnnotation(pageBreaks[0]);\r\n                            }}\r\n                            isActive={true}\r\n                            backgroundColor={colours.activeButton}\r\n                        />\r\n                    </div>\r\n                );\r\n                allowPageBreak = false;\r\n            }\r\n\r\n            if (lineBreaks.length > 0) {\r\n                lineBreaksButton = (\r\n                    <div className={styles.breakButtons}>\r\n                        <Button\r\n                            title=\"Line Break\"\r\n                            accessoryType=\"DELETE\"\r\n                            icon=\"&#182;\"\r\n                            onClick={() => {\r\n                                this.props.deleteAnnotation(lineBreaks[0]);\r\n                            }}\r\n                            isActive={true}\r\n                            backgroundColor={colours.activeButton}\r\n                        />\r\n                    </div>\r\n                );\r\n                allowLineBreak = false;\r\n            }\r\n\r\n            // Can't have line break and page break in same place.\r\n            if (!allowPageBreak) allowLineBreak = false;\r\n            if (!allowLineBreak) allowPageBreak = false;\r\n        }\r\n\r\n        let tempNotes = null;\r\n        let tempNoteIds = {};\r\n        if (props.temporaryNotes && props.temporaryNotes.length > 0) {\r\n            tempNotes = props.temporaryNotes.map((note: Annotation) => {\r\n                let key = \"NOTE_\" + note.uniqueId;\r\n                // The note is being edited\r\n                if (note.basedOn) {\r\n                    tempNoteIds[note.basedOn.uniqueId] = note.uniqueId;\r\n                }\r\n                return (\r\n                    <NoteEditor\r\n                        note={note}\r\n                        key={key}\r\n                        saveNote={props.saveAnnotation}\r\n                        cancel={() => props.cancelEditAnnotation(note)}\r\n                    />\r\n                );\r\n            });\r\n        }\r\n\r\n        let notes = null;\r\n        if (props.notes && props.notes.length > 0) {\r\n            // Filter out notes that are being edited\r\n            const validNotes = props.notes.filter(\r\n                (note: Annotation) => !tempNoteIds.hasOwnProperty(note.uniqueId)\r\n            );\r\n            notes = validNotes.map((note: Annotation) => {\r\n                let key = \"NOTE_\" + note.uniqueId;\r\n                return (\r\n                    <Note\r\n                        note={note}\r\n                        key={key}\r\n                        delete={this.props.deleteAnnotation}\r\n                        edit={this.props.editNote}\r\n                    />\r\n                );\r\n            });\r\n        }\r\n\r\n        let tempQuestions = null;\r\n        let tempQuestionIds = {};\r\n        if (\r\n            props.temporaryQuestions &&\r\n            props.temporaryQuestions.length > 0 &&\r\n            props.questionQuote\r\n        ) {\r\n            tempQuestions = props.temporaryQuestions.map(\r\n                (question: Annotation) => {\r\n                    tempQuestionIds[question.uniqueId] = question.uniqueId;\r\n                    let key = \"QUESTION_\" + question.uniqueId;\r\n\r\n                    return (\r\n                        <QuestionEditor\r\n                            question={question}\r\n                            questionQuote={props.questionQuote}\r\n                            defaultTitle={props.selectedWitness.text.name}\r\n                            key={key}\r\n                            saveQuestion={props.saveQuestion}\r\n                            cancel={() => props.cancelEditAnnotation(question)}\r\n                        />\r\n                    );\r\n                }\r\n            );\r\n        }\r\n\r\n        let questionLoadingIndicators = null;\r\n        let questionViews: Array<QuestionView> = [];\r\n        let questionsAreLoading = false;\r\n        if (props.questions && props.questions.length > 0) {\r\n            let questions: Question[] = [];\r\n            for (let i = 0; i < props.questions.length; i++) {\r\n                const question = props.questions[i];\r\n\r\n                let isValid = !tempQuestionIds.hasOwnProperty(\r\n                    question.uniqueId\r\n                );\r\n                if (isValid) {\r\n                    if (props.questionsData.hasOwnProperty(question.uniqueId)) {\r\n                        if (props.questionsData[question.uniqueId].loading) {\r\n                            questionsAreLoading = true;\r\n                        }\r\n                        questions = questions.concat(\r\n                            props.questionsData[question.uniqueId].questions\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n            questionViews = questions.map((question: Question, index) => {\r\n                let key = \"QUESTION_\" + question.annotationUniqueId;\r\n                return (\r\n                    <QuestionView\r\n                        question={question}\r\n                        key={\"question_\" + question.annotationUniqueId}\r\n                        delete={() =>\r\n                            this.props.deleteAnnotation(\r\n                                this.props.questions[index]\r\n                            )\r\n                        }\r\n                    />\r\n                );\r\n            });\r\n        }\r\n        let questionHeading = null;\r\n        if (questionViews.length > 0) {\r\n            questionHeading = (\r\n                <h3 className={styles.sectionHeading}>Questions</h3>\r\n            );\r\n        }\r\n\r\n        let questionsLoading = null;\r\n        if (questionsAreLoading) {\r\n            questionsLoading = <QuestionsLoading />;\r\n        }\r\n\r\n        let allowQuestion =\r\n            props.questions?.length === 0 &&\r\n            props.temporaryQuestions.length === 0;\r\n\r\n        let classes = [styles.annotationControls];\r\n        if (props.inline) {\r\n            classes.push(styles.inline);\r\n        }\r\n\r\n        let showHeader = true;\r\n        if (anonymousUserMessage || breakSelected) showHeader = false;\r\n        const annotationBody = ReactDom.createPortal(\r\n            <div className={styles.annotationContent}>\r\n                {anonymousUserMessage}\r\n                {nothingSelected}\r\n                {!breakSelected && annotations}\r\n                {pageBreaksButton}\r\n                {lineBreaksButton}\r\n                {tempNotes}\r\n                {notes}\r\n                {questionHeading}\r\n                {tempQuestions}\r\n                {questionsLoading}\r\n                {questionViews}\r\n            </div>,\r\n            document.getElementById(\"annotation-portal\")\r\n        );\r\n        return (\r\n            <div\r\n                className={classnames(...classes)}\r\n                style={{ maxWidth: 150 }}\r\n                ref={(controls: HTMLDivElement | null) =>\r\n                    (this.controls = controls)\r\n                }\r\n                id=\"annotation-control\"\r\n            >\r\n                {showHeader && (\r\n                    <AnnotationControlsHeader\r\n                        addPageBreak={\r\n                            allowPageBreak ? props.addPageBreak : null\r\n                        }\r\n                        addLineBreak={\r\n                            allowLineBreak ? props.addLineBreak : null\r\n                        }\r\n                        addNote={\r\n                            isLoggedIn && !tempNotes\r\n                                ? () => props.addNote()\r\n                                : null\r\n                        }\r\n                        addQuestion={allowQuestion ? props.addQuestion : null}\r\n                        closeAnnotation={props.closeAnnotation}\r\n                        editAnnotationHandler={() => {\r\n                            let editBtn = document.getElementById(\"editBtn\");\r\n                            editBtn?.click();\r\n                        }}\r\n                        userLoggedIn={isLoggedIn}\r\n                    />\r\n                )}\r\n                {!breakSelected && temporaryAnnotations}\r\n                {annotationBody}\r\n                <div\r\n                    className={styles.arrow}\r\n                    ref={(div) => (this.arrow = div)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AnnotationControls;\r\n","// @flow\r\nimport React from \"react\";\r\nimport { connect, useStore } from \"react-redux\";\r\nimport { batchActions } from \"redux-batched-actions\";\r\nimport AnnotationControls from \"./AnnotationControls\";\r\nimport type { Props as ControlsProps } from \"./AnnotationControls\";\r\nimport addTibetanShay from \"lib/addTibetanShay\";\r\nimport * as reducers from \"reducers\";\r\nimport type { AppState } from \"reducers\";\r\nimport * as actions from \"actions\";\r\nimport { BASE_ANNOTATION_ID } from \"lib/AnnotatedText\";\r\nimport Annotation, {\r\n    ANNOTATION_TYPES,\r\n    TemporaryAnnotation,\r\n} from \"lib/Annotation\";\r\nimport type { AnnotationUniqueId } from \"lib/Annotation\";\r\nimport AnnotatedText from \"lib/AnnotatedText\";\r\nimport User from \"lib/User\";\r\nimport Witness from \"lib/Witness\";\r\nimport TextSegment from \"lib/TextSegment\";\r\nimport SplitText from \"lib/SplitText\";\r\nimport _ from \"lodash\";\r\nimport { changedActiveTextAnnotation } from \"actions\";\r\nimport ReactDOMServer from \"react-dom/server\";\r\nimport Question from \"lib/Question\";\r\nimport type { QuestionData } from \"./AnnotationControls\";\r\nimport { getTextFontSize } from \"reducers\";\r\n\r\nconst TEMPORARY_ANNOTATION_ID = -3;\r\nconst BASE_NAME = \"Working\";\r\n\r\ntype AnnotationData = {\r\n    name: string,\r\n    content: string,\r\n    id: AnnotationUniqueId,\r\n    isTemporary: boolean,\r\n    annotation: Annotation,\r\n    userCreated: boolean,\r\n};\r\nconst getAnnotationsData = (\r\n    annotations,\r\n    sources,\r\n    workingSourceName,\r\n    selectedText\r\n): AnnotationData[] => {\r\n    let annotationsData = [];\r\n    let baseSources = sources.filter(\r\n        (source) => source.isWorking || source.isBase\r\n    );\r\n    let baseSourceNames = baseSources.map((source) => source.name);\r\n    if (annotations) {\r\n        let annotationsById = {};\r\n        for (let i = 0; i < annotations.length; i++) {\r\n            let annotation = annotations[i];\r\n            let id = annotation.content + annotation.start + i; // remove i if you want to make group of same annotations\r\n            if (annotation.isTemporary) {\r\n                annotationsById[TEMPORARY_ANNOTATION_ID] = {\r\n                    name: annotation.getSourceName(),\r\n                    content: annotation.content,\r\n                    id: annotation.uniqueId,\r\n                    isTemporary: true,\r\n                    annotation: annotation,\r\n                };\r\n                baseSourceNames = baseSourceNames.filter(\r\n                    (a) => a !== annotation.getSourceName()\r\n                );\r\n                id = TEMPORARY_ANNOTATION_ID;\r\n            } else if (annotationsById[id]) {\r\n                let existingAnnotation = annotationsById[id];\r\n                existingAnnotation.name +=\r\n                    \" \" + addTibetanShay(annotation.getSourceName());\r\n                baseSourceNames = baseSourceNames.filter(\r\n                    (a) => a !== annotation.getSourceName()\r\n                );\r\n            } else {\r\n                annotationsById[id] = {\r\n                    name: addTibetanShay(annotation.getSourceName()),\r\n                    content: annotation.content,\r\n                    id: annotation.uniqueId,\r\n                    userCreated: annotation.userCreated,\r\n                    annotation: annotation,\r\n                };\r\n                baseSourceNames = baseSourceNames.filter(\r\n                    (a) => a !== annotation.getSourceName()\r\n                );\r\n            }\r\n            if (\r\n                !annotation.userCreated &&\r\n                annotation.creatorWitness.isWorking\r\n            ) {\r\n                annotationsById[id].isWorking = true;\r\n            } else {\r\n                annotationsById[id].isWorking = false;\r\n            }\r\n        }\r\n        // Make sure Working source is first\r\n        baseSourceNames.unshift(workingSourceName);\r\n        let Base = baseSourceNames;\r\n        if (\r\n            selectedText?.name !==\r\n            \"བྱང་ཆུབ་སེམས་དཔའི་སྤྱོད་པ་ལ་འཇུག་པ་བཞུགས་སོ།\"\r\n        ) {\r\n            //Dominant only available for chojuk text\r\n            Base = baseSourceNames.filter((l) => l !== \"Dominant\");\r\n        }\r\n        annotationsData = Object.keys(annotationsById).reduce((arr, key) => {\r\n            const annotationData = annotationsById[key];\r\n\r\n            if (annotationData.isWorking) {\r\n                annotationData.name = Base.reduce(\r\n                    (prev, cur) => (prev += \" \" + addTibetanShay(cur, \";\")),\r\n                    \"\"\r\n                );\r\n            }\r\n            arr.push(annotationData);\r\n            return arr;\r\n        }, []);\r\n    }\r\n    return annotationsData;\r\n};\r\n\r\nconst getAvailableAnnotations = (\r\n    annotatedText: AnnotatedText,\r\n    activeAnnotation: Annotation,\r\n    temporaryAnnotation: TemporaryAnnotation | null,\r\n    annotationPositions: { [string]: Annotation[] }\r\n): Annotation[] => {\r\n    let availableAnnotations = [];\r\n    if (\r\n        !temporaryAnnotation ||\r\n        activeAnnotation.naturalId !== temporaryAnnotation.naturalId\r\n    ) {\r\n        availableAnnotations.push(activeAnnotation);\r\n    }\r\n    if (temporaryAnnotation) {\r\n        availableAnnotations.push(temporaryAnnotation);\r\n    }\r\n    let [start, length] =\r\n        annotatedText.getPositionOfAnnotation(activeAnnotation);\r\n\r\n    if (!start) {\r\n        return availableAnnotations;\r\n    }\r\n\r\n    let end = start + length;\r\n\r\n    let possibleAnnotations = [];\r\n\r\n    if (activeAnnotation.isInsertion) {\r\n        const insertionAnnotations = annotationPositions[\"i\" + start];\r\n        if (insertionAnnotations) {\r\n            possibleAnnotations =\r\n                possibleAnnotations.concat(insertionAnnotations);\r\n        }\r\n        const activeInsertionAnnotations = annotationPositions[String(start)];\r\n        if (activeInsertionAnnotations) {\r\n            possibleAnnotations = possibleAnnotations.concat(\r\n                activeInsertionAnnotations\r\n            );\r\n        }\r\n    } else {\r\n        // Only include annotations if they encompass the whole annotation\r\n        // i.e. not if activeAnnotation is a user annotation and combines\r\n        // annotated text with normal text.\r\n        let startAnnotations = annotationPositions[String(start)];\r\n        let endAnnotations = annotationPositions[String(end)];\r\n\r\n        if (startAnnotations) {\r\n            possibleAnnotations = startAnnotations;\r\n        }\r\n        if (endAnnotations) {\r\n            possibleAnnotations = possibleAnnotations.concat(endAnnotations);\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < possibleAnnotations.length; i++) {\r\n        const annotation = possibleAnnotations[i];\r\n        if (\r\n            annotation.start === activeAnnotation.start &&\r\n            annotation.length === activeAnnotation.length\r\n        ) {\r\n            // If an annotation is being edited, there will be a temporary annotation\r\n            // with the same natural id. If so, don't show the orignal version.\r\n            //\r\n            // We use natualId, as it normalises the id regardless of the original's\r\n            // save state. e.g. Upon editing a witness variant, a new annotation will be\r\n            // created. If the user is offline, that will not have been saved via the\r\n            // API yet. The user could then edit this new annotation, creating a temporary\r\n            // annotation based upon it. While this is being edited, the user could come\r\n            // back online and the save operation will succeed. This will mean the id of\r\n            // the temporary annotation will be different to the original edit, but naturalId\r\n            // will be the same.\r\n            if (\r\n                !temporaryAnnotation ||\r\n                annotation.naturalId !== temporaryAnnotation.naturalId\r\n            ) {\r\n                availableAnnotations.push(annotation);\r\n            }\r\n        } else if (!annotatedText.activeWitness.isWorking) {\r\n            if (\r\n                annotation.type === ANNOTATION_TYPES.pageBreak ||\r\n                annotation.type === ANNOTATION_TYPES.lineBreak\r\n            ) {\r\n                availableAnnotations.push(annotation);\r\n            }\r\n        }\r\n    }\r\n\r\n    availableAnnotations = _.uniqWith(\r\n        availableAnnotations,\r\n        (a, b) => a.id === b.id\r\n    );\r\n\r\n    return availableAnnotations;\r\n};\r\n\r\nconst getTemporaryAnnotation = (\r\n    state: AppState,\r\n    type: string,\r\n    user: User,\r\n    witness: Witness,\r\n    start: number,\r\n    length: number\r\n): TemporaryAnnotation | null => {\r\n    const annotations = reducers.getTemporaryAnnotations(\r\n        state,\r\n        witness.id,\r\n        start,\r\n        length,\r\n        type\r\n    );\r\n    if (annotations.length > 0) {\r\n        return annotations[0];\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\ntype StateProps = ControlsProps & {\r\n    questionsData: { [annotationId: AnnotationUniqueId]: Question[] },\r\n};\r\n\r\n// These are the props that are expected to be set and available in ownProps\r\ntype ContainerProps = {\r\n    annotationPositions: { [string]: Annotation[] },\r\n    annotatedText: AnnotatedText,\r\n    activeAnnotation: Annotation | null,\r\n    inline?: boolean,\r\n    firstSelectedSegment: TextSegment,\r\n    splitTextRect: ClientRect | null,\r\n    splitText: SplitText | null,\r\n};\r\n\r\nexport const mapStateToProps = (state: AppState, ownProps: ContainerProps) => {\r\n    const user = reducers.getUser(state);\r\n    const selectedText = reducers.getSelectedText(state);\r\n    const activeAnnotation = ownProps.activeAnnotation;\r\n    const inline = ownProps.inline;\r\n    let selectedWitness = reducers.getSelectedTextWitness(state);\r\n    if (!selectedWitness) {\r\n        if (selectedText) {\r\n            selectedWitness = reducers.getWorkingWitness(\r\n                state,\r\n                selectedText.id\r\n            );\r\n        }\r\n    }\r\n\r\n    if (!activeAnnotation || !selectedWitness) {\r\n        return {\r\n            annotationsData: null,\r\n            activeAnnotation: null,\r\n            baseAnnotation: null,\r\n            availableAnnotations: null,\r\n            user: user,\r\n            temporaryAnnotation: null,\r\n            inline: null,\r\n            firstSelectedSegment: null,\r\n            splitTextRect: null,\r\n            selectedWitness: null,\r\n        };\r\n    }\r\n\r\n    const temporaryVariant = getTemporaryAnnotation(\r\n        state,\r\n        ANNOTATION_TYPES.variant,\r\n        user,\r\n        selectedWitness,\r\n        activeAnnotation.start,\r\n        activeAnnotation.length\r\n    );\r\n\r\n    const annotations = getAvailableAnnotations(\r\n        ownProps.annotatedText,\r\n        activeAnnotation,\r\n        temporaryVariant,\r\n        ownProps.annotationPositions\r\n    );\r\n    const variants = annotations.filter(\r\n        (annotation: Annotation) => annotation.type === ANNOTATION_TYPES.variant\r\n    );\r\n    const sources = reducers.getSources(state);\r\n    const workingSourceName = reducers.getTranslation(\r\n        state,\r\n        \"annotation.workingEdition\",\r\n        BASE_NAME\r\n    );\r\n    let variantsData = getAnnotationsData(\r\n        variants,\r\n        sources,\r\n        workingSourceName,\r\n        selectedText\r\n    );\r\n\r\n    let baseAnnotation = null;\r\n    if (activeAnnotation.id == BASE_ANNOTATION_ID) {\r\n        baseAnnotation = activeAnnotation;\r\n    } else {\r\n        const [start, length] =\r\n            ownProps.annotatedText.getPositionOfAnnotation(activeAnnotation);\r\n        if (start === null || length === null) {\r\n            variantsData = null;\r\n        } else {\r\n            baseAnnotation = ownProps.annotatedText.getBaseAnnotation(\r\n                start,\r\n                length\r\n            );\r\n            const baseAnnotationData = getAnnotationsData(\r\n                [baseAnnotation],\r\n                sources,\r\n                workingSourceName\r\n            );\r\n            variantsData = [...baseAnnotationData, ...variantsData];\r\n        }\r\n    }\r\n\r\n    // make sure temporary annotation is first, then user created, then base annotation\r\n    if (variantsData) {\r\n        variantsData.sort((a, b) => {\r\n            if (a.isTemporary) {\r\n                return -1;\r\n            } else if (b.isTemporary) {\r\n                return 1;\r\n            } else if (a.userCreated) {\r\n                return -1;\r\n            } else if (b.userCreated) {\r\n                return 1;\r\n            } else if (a.annotation.id && b.annotation.id) {\r\n                return a.annotation.id - b.annotation.id;\r\n            } else {\r\n                return 1;\r\n            }\r\n        });\r\n    }\r\n\r\n    const notes: Array<Annotation> = annotations.filter(\r\n        (annotation: Annotation) => annotation.type === ANNOTATION_TYPES.note\r\n    );\r\n\r\n    const temporaryNotes = reducers.getTemporaryAnnotations(\r\n        state,\r\n        selectedWitness.id,\r\n        activeAnnotation.start,\r\n        activeAnnotation.length,\r\n        ANNOTATION_TYPES.note\r\n    );\r\n\r\n    const questionAnnotations: Array<Annotation> = annotations.filter(\r\n        (annotation: Annotation): boolean =>\r\n            annotation.type === ANNOTATION_TYPES.question\r\n    );\r\n    let questionsData = {};\r\n    if (questionAnnotations.length > 0) {\r\n        for (var i = 0; i < questionAnnotations.length; i++) {\r\n            const question = questionAnnotations[i];\r\n            questionsData[question.uniqueId] = {};\r\n            const isLoading = reducers.questionIsLoading(state, question);\r\n            questionsData[question.uniqueId][\"loading\"] = isLoading;\r\n            const questions = reducers.getQuestions(state, question.uniqueId);\r\n            questionsData[question.uniqueId][\"questions\"] = questions;\r\n        }\r\n    }\r\n\r\n    const temporaryQuestions = reducers.getTemporaryAnnotations(\r\n        state,\r\n        selectedWitness.id,\r\n        activeAnnotation.start,\r\n        activeAnnotation.length,\r\n        ANNOTATION_TYPES.question\r\n    );\r\n\r\n    let questionQuote = null;\r\n    if (temporaryQuestions.length > 0) {\r\n        const firstQuestion = temporaryQuestions[0];\r\n\r\n        let [start, end] =\r\n            ownProps.annotatedText.getPositionOfAnnotation(firstQuestion);\r\n        if (start) {\r\n            if (!end) {\r\n                end = start + 1;\r\n            }\r\n            const [startText, mainText, endText] =\r\n                ownProps.annotatedText.segmentedText.extractTextAroundPosition(\r\n                    start,\r\n                    end,\r\n                    [\"།\", \" \"]\r\n                );\r\n\r\n            const linkUrl = document.location.href;\r\n            questionQuote = (\r\n                <blockquote>\r\n                    {startText}\r\n                    <a href={linkUrl}>{mainText}</a>\r\n                    {endText}\r\n                </blockquote>\r\n            );\r\n        }\r\n    }\r\n    let fontSize = getTextFontSize(state);\r\n    return {\r\n        annotationsData: variantsData,\r\n        activeAnnotation: activeAnnotation,\r\n        baseAnnotation: baseAnnotation,\r\n        availableAnnotations: annotations,\r\n        user: user,\r\n        temporaryAnnotation: temporaryVariant,\r\n        inline: inline,\r\n        firstSelectedSegment: ownProps.firstSelectedSegment,\r\n        splitTextRect: ownProps.splitTextRect,\r\n        selectedWitness: selectedWitness,\r\n        notes: notes,\r\n        temporaryNotes: temporaryNotes,\r\n        questions: questionAnnotations,\r\n        temporaryQuestions: temporaryQuestions,\r\n        questionsData: questionsData,\r\n        questionQuote: questionQuote,\r\n        fontSize,\r\n    };\r\n};\r\n\r\nconst mergeProps = (stateProps: StateProps, dispatchProps, ownProps) => {\r\n    const { dispatch } = dispatchProps;\r\n\r\n    if (stateProps.questions.length > 0) {\r\n        for (var i = 0; i < stateProps.questions.length; i++) {\r\n            const question = stateProps.questions[i];\r\n            let loadQuestionData = true;\r\n            if (stateProps.questionsData.hasOwnProperty(question.uniqueId)) {\r\n                if (\r\n                    stateProps.questionsData[question.uniqueId].questions\r\n                        .length > 0 &&\r\n                    !stateProps.questionsData[question.uniqueId].loading\r\n                ) {\r\n                    loadQuestionData = false;\r\n                }\r\n            }\r\n            if (loadQuestionData) {\r\n                dispatch(new actions.loadQuestion(question));\r\n            }\r\n        }\r\n    }\r\n\r\n    const addBreak = (\r\n        breakType: string,\r\n        selectBreak: boolean = false\r\n    ): (() => void) => {\r\n        return () => {\r\n            const location = ownProps.activeAnnotation;\r\n\r\n            const breakAnnotation = new Annotation(\r\n                null,\r\n                location.witness,\r\n                location.end + 1,\r\n                0,\r\n                null,\r\n                breakType,\r\n                stateProps.selectedWitness,\r\n                stateProps.user\r\n            );\r\n            let selectedWitnessData = reducers.dataFromWitness(\r\n                stateProps.selectedWitness\r\n            );\r\n\r\n            let actionsBatch = [];\r\n\r\n            actionsBatch.push(actions.createdAnnotation(breakAnnotation));\r\n            actionsBatch.push(\r\n                actions.appliedAnnotation(\r\n                    breakAnnotation.uniqueId,\r\n                    selectedWitnessData\r\n                )\r\n            );\r\n            if (selectBreak) {\r\n                actionsBatch.push(\r\n                    actions.changedActiveTextAnnotation(breakAnnotation)\r\n                );\r\n            } else {\r\n                actionsBatch.push(actions.changedActiveTextAnnotation(null));\r\n            }\r\n\r\n            dispatch(batchActions(actionsBatch));\r\n        };\r\n    };\r\n\r\n    const saveAnnotation = (\r\n        selectedAnnotation: TemporaryAnnotation,\r\n        content: string\r\n    ) => {\r\n        if (!selectedAnnotation.isTemporary) {\r\n            console.warn(\r\n                \"Tried to save a non-temporary annotation: %o\",\r\n                selectedAnnotation\r\n            );\r\n            return;\r\n        }\r\n\r\n        let selectedWitness = stateProps.selectedWitness;\r\n        let selectedWitnessData = reducers.dataFromWitness(selectedWitness);\r\n\r\n        const newAnnotation = new Annotation(\r\n            selectedAnnotation.id,\r\n            selectedAnnotation.witness,\r\n            selectedAnnotation.start,\r\n            selectedAnnotation.length,\r\n            content,\r\n            selectedAnnotation.type,\r\n            selectedAnnotation.creatorWitness,\r\n            stateProps.user,\r\n            selectedAnnotation.uniqueId,\r\n            selectedAnnotation.basedOn\r\n        );\r\n        newAnnotation.isSaved = selectedAnnotation.isSaved;\r\n        let actionsBatch = [];\r\n        let action = null;\r\n        if (newAnnotation.isSaved) {\r\n            action = actions.updatedAnnotation;\r\n        } else {\r\n            action = actions.createdAnnotation;\r\n        }\r\n        actionsBatch.push(action(newAnnotation));\r\n        actionsBatch.push(\r\n            actions.removedTemporaryAnnotation(selectedAnnotation)\r\n        );\r\n        // TODO: figure out what needs changing to handle note annotations\r\n        actionsBatch.push(\r\n            actions.appliedAnnotation(\r\n                newAnnotation.uniqueId,\r\n                selectedWitnessData\r\n            )\r\n        );\r\n        if (newAnnotation.type === ANNOTATION_TYPES.variant) {\r\n            actionsBatch.push(\r\n                actions.changedActiveTextAnnotation(newAnnotation)\r\n            );\r\n        }\r\n        dispatch(batchActions(actionsBatch));\r\n    };\r\n\r\n    return {\r\n        ...stateProps,\r\n        ...ownProps,\r\n        closeAnnotation: () => {\r\n            const activeAnnotation = stateProps.activeAnnotation;\r\n            if (activeAnnotation) {\r\n                const dismissTextAnnotation =\r\n                    actions.changedActiveTextAnnotation(null);\r\n                dispatch(dismissTextAnnotation);\r\n            }\r\n        },\r\n        didSelectAnnotation: (annotation: Annotation) => {\r\n            let selectedAnnotation: Annotation | null = null;\r\n            if (annotation.id == BASE_ANNOTATION_ID) {\r\n                selectedAnnotation = stateProps.baseAnnotation;\r\n            } else {\r\n                selectedAnnotation =\r\n                    _.find(\r\n                        stateProps.availableAnnotations,\r\n                        (value) => value.uniqueId == annotation.uniqueId\r\n                    ) || null;\r\n            }\r\n            let actionsBatch = [];\r\n            let selectedWitness = stateProps.selectedWitness;\r\n            // let selectedWitnessData = reducers.getWitnessData(\r\n            //     state,\r\n            //     selectedWitness.id\r\n            // );\r\n            let selectedWitnessData = reducers.dataFromWitness(selectedWitness);\r\n\r\n            if (annotation.uniqueId != stateProps.activeAnnotation.uniqueId) {\r\n                if (selectedWitness.isWorking) {\r\n                    if (annotation.id != BASE_ANNOTATION_ID) {\r\n                        actionsBatch.push(\r\n                            actions.appliedAnnotation(\r\n                                selectedAnnotation.uniqueId,\r\n                                selectedWitnessData\r\n                            )\r\n                        );\r\n                    }\r\n                    if (stateProps.activeAnnotation.id != BASE_ANNOTATION_ID) {\r\n                        actionsBatch.push(\r\n                            actions.removedAppliedAnnotation(\r\n                                stateProps.activeAnnotation.uniqueId,\r\n                                selectedWitnessData\r\n                            )\r\n                        );\r\n                    }\r\n                } else {\r\n                    if (\r\n                        stateProps.activeAnnotation.creatorWitness.id ===\r\n                        selectedWitness.id\r\n                    ) {\r\n                        // Replacing a default annotation\r\n\r\n                        // Currently selected annotation is a default\r\n                        // annotation. So need to remove that then\r\n                        // apply the newly selected annotation.\r\n\r\n                        actionsBatch.push(\r\n                            actions.removedDefaultAnnotation(\r\n                                stateProps.activeAnnotation.uniqueId,\r\n                                selectedWitnessData\r\n                            )\r\n                        );\r\n\r\n                        if (selectedAnnotation.id !== BASE_ANNOTATION_ID) {\r\n                            actionsBatch.push(\r\n                                actions.appliedAnnotation(\r\n                                    selectedAnnotation.uniqueId,\r\n                                    selectedWitnessData\r\n                                )\r\n                            );\r\n                        }\r\n                    } else {\r\n                        if (\r\n                            selectedAnnotation.creatorWitness.id ===\r\n                            selectedWitness.id\r\n                        ) {\r\n                            actionsBatch.push(\r\n                                actions.appliedDefaultAnnotation(\r\n                                    selectedAnnotation.uniqueId,\r\n                                    selectedWitnessData\r\n                                )\r\n                            );\r\n                        } else if (\r\n                            selectedAnnotation.id !== BASE_ANNOTATION_ID\r\n                        ) {\r\n                            actionsBatch.push(\r\n                                actions.appliedAnnotation(\r\n                                    selectedAnnotation.uniqueId,\r\n                                    selectedWitnessData\r\n                                )\r\n                            );\r\n                        }\r\n\r\n                        if (\r\n                            stateProps.activeAnnotation.id !==\r\n                            BASE_ANNOTATION_ID\r\n                        ) {\r\n                            actionsBatch.push(\r\n                                actions.removedAppliedAnnotation(\r\n                                    stateProps.activeAnnotation.uniqueId,\r\n                                    selectedWitnessData\r\n                                )\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n\r\n                actionsBatch.push(\r\n                    actions.changedActiveTextAnnotation(selectedAnnotation)\r\n                );\r\n\r\n                dispatch(batchActions(actionsBatch));\r\n            }\r\n        },\r\n        editAnnotation: (selectedAnnotation: Annotation) => {\r\n            const basedOn =\r\n                selectedAnnotation.isWorkingAnnotation ||\r\n                selectedAnnotation.userCreated ||\r\n                selectedAnnotation.id === BASE_ANNOTATION_ID\r\n                    ? null\r\n                    : selectedAnnotation;\r\n            const temporaryAnnotation = new TemporaryAnnotation(\r\n                basedOn,\r\n                selectedAnnotation.witness,\r\n                selectedAnnotation.start,\r\n                selectedAnnotation.length,\r\n                selectedAnnotation.content,\r\n                selectedAnnotation.type,\r\n                stateProps.selectedWitness,\r\n                stateProps.user\r\n            );\r\n            if (selectedAnnotation.userCreated) {\r\n                // user annotations are updated\r\n                temporaryAnnotation.uniqueId = selectedAnnotation.uniqueId;\r\n                temporaryAnnotation.isSaved = selectedAnnotation.isSaved;\r\n            }\r\n\r\n            dispatch(\r\n                actions.addedTemporaryAnnotation(temporaryAnnotation, true)\r\n            );\r\n        },\r\n        saveAnnotation: saveAnnotation,\r\n        cancelEditAnnotation: (selectedAnnotation: TemporaryAnnotation) => {\r\n            if (!selectedAnnotation.isTemporary) {\r\n                console.warn(\r\n                    \"Tried to call cancelEditAnnotation on a non-temporary annotation: %o\",\r\n                    selectedAnnotation\r\n                );\r\n                return;\r\n            }\r\n\r\n            const cancelAction =\r\n                actions.removedTemporaryAnnotation(selectedAnnotation);\r\n            dispatch(cancelAction);\r\n        },\r\n        deleteAnnotation: (annotation: Annotation) => {\r\n            let selectedWitness = stateProps.selectedWitness;\r\n            let selectedWitnessData = reducers.dataFromWitness(selectedWitness);\r\n            let actionsBatch = [];\r\n            if (annotation.userCreated) {\r\n                const deleteAction = actions.deletedAnnotation(\r\n                    annotation,\r\n                    selectedWitness\r\n                );\r\n                const removeAppliedAction = actions.removedAppliedAnnotation(\r\n                    annotation.uniqueId,\r\n                    selectedWitnessData\r\n                );\r\n                actionsBatch = [deleteAction, removeAppliedAction];\r\n            } else {\r\n                // Assume this is a default annotation that was\r\n                // automatically imported from external data\r\n                const removeDefaultAnnotation =\r\n                    actions.removedDefaultAnnotation(\r\n                        annotation.uniqueId,\r\n                        selectedWitnessData\r\n                    );\r\n                actionsBatch = [removeDefaultAnnotation];\r\n            }\r\n\r\n            if (stateProps.activeAnnotation.uniqueId === annotation.uniqueId) {\r\n                actionsBatch.push(actions.changedActiveTextAnnotation(null));\r\n            }\r\n\r\n            dispatch(batchActions(actionsBatch));\r\n        },\r\n        addNote: () => {\r\n            const activeAnnotation = ownProps.activeAnnotation;\r\n            const temporaryAnnotation = new TemporaryAnnotation(\r\n                null,\r\n                activeAnnotation.witness,\r\n                activeAnnotation.start,\r\n                activeAnnotation.length,\r\n                \"\",\r\n                ANNOTATION_TYPES.note,\r\n                stateProps.selectedWitness,\r\n                stateProps.user\r\n            );\r\n\r\n            dispatch(\r\n                actions.addedTemporaryAnnotation(temporaryAnnotation, true)\r\n            );\r\n        },\r\n        editNote: (note: Annotation) => {\r\n            const temporaryAnnotation = new TemporaryAnnotation(\r\n                note,\r\n                note.witness,\r\n                note.start,\r\n                note.length,\r\n                note.content,\r\n                ANNOTATION_TYPES.note,\r\n                stateProps.selectedWitness,\r\n                stateProps.user\r\n            );\r\n\r\n            dispatch(\r\n                actions.addedTemporaryAnnotation(temporaryAnnotation, true)\r\n            );\r\n        },\r\n        addPageBreak: addBreak(ANNOTATION_TYPES.pageBreak),\r\n        addLineBreak: addBreak(ANNOTATION_TYPES.lineBreak),\r\n        addQuestion: () => {\r\n            const activeAnnotation = ownProps.activeAnnotation;\r\n            const temporaryAnnotation = new TemporaryAnnotation(\r\n                null,\r\n                activeAnnotation.witness,\r\n                activeAnnotation.start,\r\n                activeAnnotation.length,\r\n                \"\",\r\n                ANNOTATION_TYPES.question,\r\n                stateProps.selectedWitness,\r\n                stateProps.user\r\n            );\r\n\r\n            dispatch(\r\n                actions.addedTemporaryAnnotation(temporaryAnnotation, true)\r\n            );\r\n        },\r\n        saveQuestion: (\r\n            question: TemporaryAnnotation,\r\n            title: string,\r\n            content: string\r\n        ) => {\r\n            let [start, end] =\r\n                ownProps.annotatedText.getPositionOfAnnotation(question);\r\n\r\n            const questionQuoteText = ReactDOMServer.renderToStaticMarkup(\r\n                stateProps.questionQuote\r\n            );\r\n            let questionText = questionQuoteText + content;\r\n            saveAnnotation(question, content);\r\n            const createdQuestionAction = actions.createdQuestion(\r\n                question,\r\n                title,\r\n                questionText\r\n            );\r\n\r\n            dispatch(createdQuestionAction);\r\n        },\r\n    };\r\n};\r\n\r\nconst AnnotationControlsContainer = connect(\r\n    mapStateToProps,\r\n    null,\r\n    mergeProps\r\n)(AnnotationControls);\r\n\r\nexport default AnnotationControlsContainer;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"header\":\"AnnotationControlsHeader---header\",\"Anotation_closeBtn\":\"AnnotationControlsHeader---Anotation_closeBtn\",\"edit\":\"AnnotationControlsHeader---edit\"};","// @flow\r\nimport React from \"react\";\r\nimport Button from \"components/UI/Button\";\r\nimport styles from \"./AnnotationControlsHeader.css\";\r\nimport PageBreakIcon from \"images/page_break_icon.svg\";\r\nimport NoteIcon from \"images/note.svg\";\r\nimport QuestionIcon from \"images/question_answer.svg\";\r\n\r\nimport PencilAltIcon from \"images/PencilAltIcon.svg\";\r\ntype Props = {\r\n    addPageBreak: null | (() => void),\r\n    addLineBreak: null | (() => void),\r\n    addNote: null | (() => void),\r\n    addQuestion: null | (() => void),\r\n    closeAnnotation: null | (() => void),\r\n    editAnnotationHandler: null | (() => void),\r\n    userLoggedIn: Boolean,\r\n};\r\nconst ICON_SIZE = 15;\r\nclass AnnotationControlsHeader extends React.Component<Props> {\r\n    // keyHandler;\r\n    constructor() {\r\n        super();\r\n    }\r\n    componentDidMount() {\r\n        // this.keyHandler = (evtobj) => {\r\n        //     var e = window.event ? event : evtobj;\r\n        //     let condition = e.ctrlKey;\r\n        //     if (condition && e.keyCode != 67) {\r\n        //         evtobj.preventDefault();\r\n        //     }\r\n        //     if (condition && e.keyCode == 69) {\r\n        //         this.props.editAnnotationHandler();\r\n        //     }\r\n        //     if (condition && e.keyCode == 81) {\r\n        //         this.props?.addQuestion();\r\n        //     }\r\n        //     if (condition && e.keyCode == 76) {\r\n        //         this.props?.addLineBreak();\r\n        //     }\r\n        //     if (condition && e.keyCode == 78) {\r\n        //         this.props?.addNote();\r\n        //     }\r\n        //     if (condition && e.keyCode == 80) {\r\n        //         this.props?.addPageBreak();\r\n        //     }\r\n        // };\r\n        // document.addEventListener(\"keydown\", this.keyHandler, { once: false });\r\n    }\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"keydown\", this.keyHandler);\r\n    }\r\n    render() {\r\n        const allowPageBreak = this.props.addPageBreak != null;\r\n        const allowLineBreak = this.props.addLineBreak != null;\r\n        return (\r\n            <>\r\n                <div className={styles.header}>\r\n                    <Button\r\n                        noBezel={true}\r\n                        icon={\r\n                            <NoteIcon\r\n                                width={ICON_SIZE}\r\n                                height={ICON_SIZE}\r\n                                style={{ fill: \"#fff\" }}\r\n                            />\r\n                        }\r\n                        backgroundColor=\"transparent\"\r\n                        // accessoryType={this.props.addNote ? \"ADD\" : null}\r\n                        onClick={this.props.addNote}\r\n                        disabled={this.props.addNote ? false : true}\r\n                        align=\"center\"\r\n                        tooltipTitle=\"Note\"\r\n                        shortcut=\"n\"\r\n                    />\r\n                    <Button\r\n                        noBezel={true}\r\n                        icon={\r\n                            <QuestionIcon\r\n                                width={ICON_SIZE}\r\n                                height={ICON_SIZE}\r\n                                style={{ fill: \"#fff\" }}\r\n                            />\r\n                        }\r\n                        // accessoryType={this.props.addQuestion ? \"ADD\" : null}\r\n                        onClick={this.props.addQuestion}\r\n                        disabled={this.props.addQuestion ? false : true}\r\n                        align=\"left\"\r\n                        backgroundColor=\"transparent\"\r\n                        tooltipTitle=\"Question\"\r\n                        shortcut=\"q\"\r\n                    />\r\n                    <Button\r\n                        noBezel={true}\r\n                        color=\"#fff\"\r\n                        fontSize={`${ICON_SIZE}px`}\r\n                        icon=\"&#182;\"\r\n                        // accessoryType={allowLineBreak ? \"ADD\" : null}\r\n                        onClick={this.props.addLineBreak}\r\n                        disabled={!allowLineBreak}\r\n                        align=\"left\"\r\n                        backgroundColor=\"transparent\"\r\n                        tooltipTitle=\"LineBreak\"\r\n                        shortcut=\"l\"\r\n                    />\r\n                    <Button\r\n                        noBezel={true}\r\n                        icon={\r\n                            <PageBreakIcon\r\n                                width={ICON_SIZE}\r\n                                height={ICON_SIZE}\r\n                                style={{ fill: \"#fff\" }}\r\n                            />\r\n                        }\r\n                        // accessoryType={allowPageBreak ? \"ADD\" : null}\r\n                        onClick={this.props.addPageBreak}\r\n                        disabled={!allowPageBreak}\r\n                        align=\"left\"\r\n                        backgroundColor=\"transparent\"\r\n                        tooltipTitle=\"PageBreak\"\r\n                        shortcut=\"p\"\r\n                    />\r\n\r\n                    <Button\r\n                        onClick={this.props.editAnnotationHandler}\r\n                        // className={styles.edit}\r\n                        backgroundColor=\"transparent\"\r\n                        noBezel={true}\r\n                        icon={\r\n                            <PencilAltIcon\r\n                                width={ICON_SIZE}\r\n                                height={ICON_SIZE}\r\n                                style={{ fill: \"#fff\" }}\r\n                            />\r\n                        }\r\n                        tooltipTitle=\"Edit\"\r\n                        shortcut=\"e\"\r\n                    />\r\n                </div>\r\n                {/* <div\r\n                    onClick={() => this.props.closeAnnotation()}\r\n                    className={styles.Anotation_closeBtn}\r\n                >\r\n                    x\r\n                </div> */}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AnnotationControlsHeader;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"AnnotationControlsHeading---heading\",\"title\":\"AnnotationControlsHeading---title\",\"button\":\"AnnotationControlsHeading---button\"};","import React from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport styles from \"./AnnotationControlsHeading.css\";\r\nimport AddButton from \"./AddButton\";\r\n\r\ntype Props = {\r\n    titleId: string,\r\n    buttonOnClick?: () => void,\r\n    buttonTitleId?: string,\r\n    intl: { formatMessage: ({ [id: string]: string }) => string }\r\n};\r\n\r\nclass AnnotationControlsHeading extends React.Component<Props> {\r\n    render() {\r\n        let button = null;\r\n        if (this.props.buttonOnClick) {\r\n            const title = this.props.buttonTitleId\r\n                ? this.props.intl.formatMessage({\r\n                      id: this.props.buttonTitleId\r\n                  })\r\n                : \"\";\r\n            button = (\r\n                <AddButton title={title} onClick={this.props.buttonOnClick} />\r\n            );\r\n        }\r\n        return (\r\n            <h3 className={styles.heading}>\r\n                <span className={styles.title}>\r\n                    <FormattedMessage id={this.props.titleId} />\r\n                </span>\r\n                {button && <div className={styles.button}>{button}</div>}\r\n            </h3>\r\n        );\r\n    }\r\n}\r\n\r\nexport default injectIntl(AnnotationControlsHeading);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"annotation-desc\":\"AnnotationDetail---annotation-desc\",\"annotationDetail\":\"AnnotationDetail---annotationDetail\",\"date\":\"AnnotationDetail---date\",\"active\":\"AnnotationDetail---active\",\"annotationHeader\":\"AnnotationDetail---annotationHeader\",\"activeIcon\":\"AnnotationDetail---activeIcon\",\"editing\":\"AnnotationDetail---editing\",\"contentOptions\":\"AnnotationDetail---contentOptions\",\"actionButtons\":\"AnnotationDetail---actionButtons\",\"edit\":\"AnnotationDetail---edit\",\"editImage\":\"AnnotationDetail---editImage\",\"save\":\"AnnotationDetail---save\",\"cancel\":\"AnnotationDetail---cancel\"};","// @flow\r\nimport React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport styles from \"./AnnotationDetail.css\";\r\nimport type { AnnotationData } from \"api\";\r\nimport CheckIcon from \"images/check_circle.svg\";\r\nimport colours from \"css/colour.css\";\r\nimport { Box } from \"components/UI/muiComponent\";\r\nimport Share from \"components/UI/ShareButton\";\r\nimport Voting from \"components/UI/Voting\";\r\nimport AnnotationAvatar from \"components/UI/AnnotationAvatar\";\r\nexport type Props = {\r\n    annotationData: AnnotationData,\r\n    isActive: boolean,\r\n    selectAnnotationHandler: () => void,\r\n    isLoggedIn: boolean,\r\n    editAnnotationHandler: () => void,\r\n    fontSize: Number,\r\n};\r\nconst MAXIMUM_TEXT_LENGTH = 250;\r\n\r\nconst AnnotationDetail = (props: Props) => {\r\n    let accuracyPercentage = props.accuracy;\r\n    let desc = (\r\n        <p>\r\n            &lt;\r\n            <FormattedMessage id=\"annotation.delete\" />\r\n            &gt;\r\n        </p>\r\n    );\r\n\r\n    let content = props.annotationData.content;\r\n\r\n    if (content.trim() !== \"\") {\r\n        if (content.length > MAXIMUM_TEXT_LENGTH) {\r\n            content = content.substr(0, MAXIMUM_TEXT_LENGTH) + \"…\";\r\n        }\r\n        // content variable is the selected trimmed context\r\n        desc = <p style={{ minWidth: 100, maxWidth: \"30ch\" }}>{content}</p>;\r\n    }\r\n\r\n    let classes = [styles.annotationDetail];\r\n\r\n    if (props.isActive) {\r\n        classes.push(styles.active);\r\n    }\r\n\r\n    let className = classnames(...classes);\r\n\r\n    let name = props.annotationData.name\r\n        ? props.annotationData.name\r\n        : props.user.name;\r\n    return (\r\n        <div className={className} onClick={props.selectAnnotationHandler}>\r\n            <Box\r\n                className={styles.annotationHeader}\r\n                sx={{\r\n                    bgcolor: \"secondary.light\",\r\n                    color: \"texts.main\",\r\n                }}\r\n            >\r\n                <AnnotationAvatar name={name} />\r\n                <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                    <h3>{name}</h3>\r\n                    {name === \"པེ་ཅིན།\" && (\r\n                        <span className={styles.date}>\r\n                            1738, month, day N/A\r\n                        </span>\r\n                    )}\r\n                    {name === \"སྣར་ཐང༌།\" && (\r\n                        <span className={styles.date}>\r\n                            1742, month, day N/A\r\n                        </span>\r\n                    )}\r\n                    {name === \"སྡེ་དགེ\" && (\r\n                        <span className={styles.date}>\r\n                            1744, month, day N/A\r\n                        </span>\r\n                    )}\r\n                </div>\r\n                {props.isLoggedIn && props.isActive && (\r\n                    <button\r\n                        style={{ display: \"none\" }}\r\n                        className={styles.edit}\r\n                        onClick={props.editAnnotationHandler}\r\n                        id=\"editBtn\"\r\n                    ></button>\r\n                )}\r\n            </Box>\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-between\",\r\n                }}\r\n            >\r\n                {desc}\r\n                {/* <div style={{ float: \"right\" }}>{accuracyPercentage + \"%\"}</div> */}\r\n            </div>\r\n            <div className={styles.contentOptions}>\r\n                <Voting data={props.annotationData} />\r\n                {/* {props.isActive && (\r\n                    <Share content={props.annotationData.content} />\r\n                )} */}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnnotationDetail;\r\n","// @flow\r\nimport React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport styles from \"./AnnotationDetail.css\";\r\nimport type { Props as AnnotationDetailProps } from \"./AnnotationDetail\";\r\nimport PencilAltIcon from \"images/PencilAltIcon.svg\";\r\n\r\nexport type Props = AnnotationDetailProps & {\r\n    saveAnnotationHandler: (text: string) => void,\r\n    cancelAnnotationHandler: () => void,\r\n};\r\n\r\nconst AnnotationDetailEdit = (props: Props) => {\r\n    let content = props.annotationData.content;\r\n    let classes = [styles.annotationDetail];\r\n    let textarea = null;\r\n\r\n    if (props.isActive) {\r\n        classes.push(styles.active);\r\n    }\r\n    let auto_grow = (element) => {\r\n        textarea.style.height = \"5px\";\r\n        textarea.style.height = textarea.scrollHeight + \"px\";\r\n    };\r\n    let className = classnames(...classes);\r\n    return (\r\n        <div className={className}>\r\n            <h3>{props.annotationData.name}</h3>\r\n\r\n            <div className={styles.editing}>\r\n                <textarea\r\n                    defaultValue={content}\r\n                    autoFocus={true}\r\n                    onInput={auto_grow}\r\n                    ref={(ta) => (textarea = ta)}\r\n                />\r\n                <div className={styles.actionButtons}>\r\n                    <div\r\n                        className={styles.save}\r\n                        onClick={() => {\r\n                            if (textarea) {\r\n                                props.saveAnnotationHandler(textarea.value);\r\n                            }\r\n                        }}\r\n                    >\r\n                         <PencilAltIcon\r\n                         height='0.8em'\r\n                         width='0.8em'\r\n                                style={{ fill: \"currentColor\",marginRight:6 }}\r\n                            />\r\n                        <FormattedMessage id=\"annotation.save\" />\r\n                    </div>\r\n                    <div\r\n                        className={styles.cancel}\r\n                        onClick={props.cancelAnnotationHandler}\r\n                    >\r\n                        <FormattedMessage id=\"annotation.cancel\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnnotationDetailEdit;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getActiveTextAnnotation } from \"reducers\";\r\n\r\nlet initialLoad = true;\r\nfunction AnnotationProtal({ activeAnnotation }) {\r\n    const portal = React.useRef(null);\r\n\r\n    const measure = React.useCallback(\r\n        (e) => {\r\n            let control = document.getElementById(\r\n                `s_${activeAnnotation?.start}`\r\n            );\r\n            if (control) {\r\n                const position = control.getBoundingClientRect();\r\n                let top = Math.floor(position.top - 40);\r\n                portal.current.style.top = top + \"px\";\r\n            }\r\n        },\r\n        [activeAnnotation?.start]\r\n    );\r\n\r\n    React.useEffect(() => {\r\n        const scrollElement = document.getElementById(\"scroller\");\r\n        if (!initialLoad) {\r\n            let scrolling = false;\r\n            if (scrollElement)\r\n                scrollElement.addEventListener(\"scroll\", measure);\r\n            if (!scrolling) {\r\n                let start = activeAnnotation?.start;\r\n                let control = document.getElementById(`s_${start}`);\r\n                // while (!control) {\r\n                //     start = start + 1;\r\n                //     control = document.getElementById(`s_${start}`);\r\n                // }\r\n                if (control) {\r\n                    const position = control.getBoundingClientRect();\r\n                    let top = Math.floor(position.top - 40);\r\n                    portal.current.style.top = top + \"px\";\r\n                }\r\n            }\r\n        }\r\n        initialLoad = false;\r\n\r\n        return () => {\r\n            if (!scrollElement) return null;\r\n\r\n            scrollElement.removeEventListener(\"scroll\", measure);\r\n        };\r\n    }, [activeAnnotation?.start]);\r\n\r\n    return (\r\n        <div\r\n            id=\"annotation-portal\"\r\n            ref={portal}\r\n            style={{\r\n                position: \"absolute\",\r\n                left: \"97%\",\r\n                zIndex: 10,\r\n                maxWidth: 300,\r\n                width: \"max-content\",\r\n                transition: \"all 0.1s linear 0s\",\r\n            }}\r\n        ></div>\r\n    );\r\n}\r\n\r\nconst getStateUsingProp = (state) => {\r\n    return { activeAnnotation: getActiveTextAnnotation(state) };\r\n};\r\nexport default connect(getStateUsingProp)(AnnotationProtal);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"AnswerView---name\",\"answer\":\"AnswerView---answer\"};","import React from \"react\";\r\nimport styles from \"./AnswerView.css\";\r\nimport controlStyles from \"./AnnotationControls.css\";\r\nimport buttonStyles from \"./Button.css\";\r\nimport Annotation from \"lib/Annotation\";\r\nimport Answer from \"lib/Answer\";\r\nimport { FormattedMessage, FormattedDate } from \"react-intl\";\r\nimport classnames from \"classnames\";\r\n\r\ntype Props = {\r\n    answer: Answer\r\n};\r\n\r\nexport default class AnswerView extends React.Component<Props> {\r\n    render() {\r\n        return (\r\n            <div className={styles.answer}>\r\n                <p\r\n                    className={controlStyles.text}\r\n                    dangerouslySetInnerHTML={{\r\n                        __html: this.props.answer.content\r\n                    }}\r\n                />\r\n                <p className={controlStyles.subTitle}>\r\n                    <FormattedMessage id=\"question.answeredBy\" />{\" \"}\r\n                    {this.props.answer.name},{\" \"}\r\n                    <FormattedDate value={this.props.answer.created} />\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"save\":\"Button---save\",\"cancel\":\"Button---cancel\",\"buttonContainer\":\"Button---buttonContainer\"};","// @flow\r\nimport * as React from \"react\";\r\nimport GraphemeSplitter from \"grapheme-splitter\";\r\nimport reactStringReplace from \"react-string-replace\";\r\n\r\ntype Props = {\r\n    string: string,\r\n    highlightClass: string,\r\n    stringClass?: string,\r\n    searchTerm?: string\r\n};\r\n\r\nexport default class HighlightedString extends React.Component<Props> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const string = this.props.string;\r\n        let nameHtml = string;\r\n        let stringClass = this.props.stringClass || \"\";\r\n        if (this.props.searchTerm) {\r\n            const searchTerm = this.props.searchTerm;\r\n            const splitter = new GraphemeSplitter();\r\n            const graphemes = splitter.splitGraphemes(string);\r\n            const start = string.indexOf(searchTerm);\r\n            const end = start + searchTerm.length;\r\n            let position = 0;\r\n            let foundGraphemes = \"\";\r\n            if (start > -1) {\r\n                for (let i = 0; i < graphemes.length; i++) {\r\n                    let grapheme = graphemes[i];\r\n                    if (position >= start && position < end) {\r\n                        foundGraphemes += grapheme;\r\n                    }\r\n                    position += grapheme.length;\r\n                }\r\n            }\r\n            if (foundGraphemes.length > 0) {\r\n                nameHtml = reactStringReplace(\r\n                    string,\r\n                    foundGraphemes,\r\n                    (match, i) => (\r\n                        <span className={this.props.highlightClass} key={`highlight-${i}`}>\r\n                            {match}\r\n                        </span>\r\n                    )\r\n                );\r\n            }\r\n        }\r\n        return <span className={stringClass}>{nameHtml}</span>;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Search as SearchIcon } from \"components/UI/muiIcon\";\r\nimport { IconButton } from \"components/UI/muiComponent\";\r\n\r\nfunction Search({ handleWindowSearch }) {\r\n    return (\r\n        <IconButton size=\"small\" variant=\"text\" onClick={handleWindowSearch}>\r\n            <SearchIcon />\r\n        </IconButton>\r\n    );\r\n}\r\n\r\nexport default Search;\r\n","import React, { useRef } from \"react\";\r\nimport {\r\n    AutoSizer,\r\n    CellMeasurer,\r\n    CellMeasurerCache,\r\n    List,\r\n} from \"react-virtualized\";\r\nimport HighlightedString from \"./HighlightedString\";\r\nimport styles from \"./SearchStyle.css\";\r\n\r\nfunction SearchList(props) {\r\n    const { onSelectedSearchResult, searchValue, results, selectedText } =\r\n        props;\r\n    let listRef = useRef();\r\n    let cache = useRef(\r\n        new CellMeasurerCache({\r\n            fixedWidth: true,\r\n            defaultHeight: 100,\r\n        })\r\n    );\r\n    let rowRenderer = ({ key, index, parent, style }) => {\r\n        let result = results[index];\r\n        return (\r\n            <CellMeasurer\r\n                key={`listkeys2-${key}`}\r\n                cache={cache.current}\r\n                parent={parent}\r\n                columnIndex={0}\r\n                rowIndex={index}\r\n            >\r\n                <div\r\n                    className={styles.searchListItem}\r\n                    onClick={() =>\r\n                        onSelectedSearchResult(\r\n                            selectedText,\r\n                            result[0],\r\n                            searchValue.length,\r\n                            selectedText\r\n                        )\r\n                    }\r\n                    style={style}\r\n                >\r\n                    <HighlightedString\r\n                        string={result[1]}\r\n                        highlightClass={styles.highlight}\r\n                        searchTerm={searchValue}\r\n                    />\r\n                </div>\r\n            </CellMeasurer>\r\n        );\r\n    };\r\n\r\n    if (!results) return null;\r\n\r\n    return (\r\n        <>\r\n            <AutoSizer>\r\n                {({ height, width }) => (\r\n                    <List\r\n                        ref={listRef}\r\n                        height={height}\r\n                        rowCount={results?.length}\r\n                        rowHeight={cache.current.rowHeight}\r\n                        deferredMeasurementCache={cache.current}\r\n                        rowRenderer={rowRenderer}\r\n                        width={width}\r\n                        overscanRowCount={1}\r\n                    ></List>\r\n                )}\r\n            </AutoSizer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SearchList;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"highlight\":\"SearchStyle---highlight\",\"searchListItem\":\"SearchStyle---searchListItem\"};","import React, { useState, useEffect } from \"react\";\r\nimport WrenchIcon from \"images/wrench.svg\";\r\nimport { Check as CheckIcon } from \"components/UI/muiIcon\";\r\nimport useLocalStorage from \"components/utility/useLocalStorage\";\r\nimport FontContainer from \"components/textDetail/fontSize\";\r\nimport {\r\n    IconButton,\r\n    MenuList,\r\n    MenuItem,\r\n    Grow,\r\n    Divider,\r\n    Typography,\r\n    Box,\r\n    ClickAwayListener,\r\n} from \"components/UI/muiComponent\";\r\n\r\nimport { FONT_LIST } from \"app_constants\";\r\nfunction Settings(props) {\r\n    let [showOption, setShowOption] = useState(false);\r\n    let [fontSelect, setFontSelect] = useLocalStorage(\r\n        \"WindowOneFont\",\r\n        \"Tibetan\"\r\n    );\r\n    useEffect(() => {\r\n        document.body.style.setProperty(\"--tibetan-fonts\", fontSelect);\r\n    }, []);\r\n    const handleClick = () => {\r\n        setShowOption((prev) => !prev);\r\n    };\r\n    const handlefont = (value) => {\r\n        setFontSelect(value);\r\n        document.body.style.setProperty(\"--tibetan-fonts\", `${value}`);\r\n\r\n        setTimeout(() => {\r\n            window.dispatchEvent(new Event(\"resize\"));\r\n        }, 1000);\r\n        setShowOption(false);\r\n    };\r\n\r\n    return (\r\n        <ClickAwayListener onClickAway={() => setShowOption(false)}>\r\n            <Box position=\"relative\">\r\n                <IconButton onClick={handleClick} size=\"small\" variant=\"text\">\r\n                    <WrenchIcon height={20} width={20} fill=\"currentColor\" />\r\n                </IconButton>\r\n                <Grow in={showOption}>\r\n                    <MenuList\r\n                        dense\r\n                        sx={{\r\n                            position: \"absolute\",\r\n                            right: 0,\r\n                            zIndex: 2,\r\n                            top: 40,\r\n                            bgcolor: \"heading.main\",\r\n                        }}\r\n                    >\r\n                        <FontContainer\r\n                            fontSize={props.textFontSize}\r\n                            onChange={props.onChangedFontSize}\r\n                        />\r\n\r\n                        <Divider />\r\n                        <FontSelection\r\n                            selectFont={handlefont}\r\n                            selectedfont={fontSelect}\r\n                        />\r\n                        <MenuItem onClick={() => props.onExport()}>\r\n                            <Typography variant=\"subtitle2\">\r\n                                Export Document\r\n                            </Typography>\r\n                        </MenuItem>\r\n                    </MenuList>\r\n                </Grow>\r\n            </Box>\r\n        </ClickAwayListener>\r\n    );\r\n}\r\n\r\nexport default Settings;\r\n\r\nconst FontSelection = ({ selectFont, selectedfont }) => {\r\n    let fontAvailable = FONT_LIST || [];\r\n\r\n    return (\r\n        <Box textAlign={\"center\"}>\r\n            <span>Font:</span>{\" \"}\r\n            <select\r\n                onChange={(e) => selectFont(e.target.value)}\r\n                value={selectedfont}\r\n            >\r\n                {fontAvailable.map((font, index) => {\r\n                    return (\r\n                        <option key={index + \"-fontselect\"} value={font}>\r\n                            {font}\r\n                        </option>\r\n                    );\r\n                })}\r\n            </select>\r\n        </Box>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { IconButton } from \"components/UI/muiComponent\";\r\nimport { Menu as MenuIcon, Clear as ClearIcon } from \"components/UI/muiIcon\";\r\nfunction TableOfContent({ changeShowTableContent, showTableContent }) {\r\n    function handleClick() {\r\n        changeShowTableContent(!showTableContent);\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <IconButton onClick={handleClick}>\r\n                {showTableContent ? <ClearIcon /> : <MenuIcon />}\r\n            </IconButton>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default TableOfContent;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"note\":\"Note---note\",\"header\":\"Note---header\",\"info\":\"Note---info\",\"content\":\"Note---content\",\"delete\":\"Note---delete\"};","import React from \"react\";\r\nimport styles from \"./Note.css\";\r\nimport Annotation from \"lib/Annotation\";\r\nimport FormattedDate from \"react-intl\";\r\nimport { Box, IconButton } from \"components/UI/muiComponent\";\r\nimport { Delete as DeleteIcon } from \"components/UI/muiIcon\";\r\ntype Props = {\r\n    note: Annotation,\r\n    delete?: (note: Annotation) => void,\r\n    edit?: (note: Annotation) => void,\r\n};\r\n\r\nexport default class Note extends React.Component<Props> {\r\n    delete() {\r\n        if (this.props.delete) {\r\n            this.props.delete(this.props.note);\r\n        }\r\n    }\r\n\r\n    edit() {\r\n        if (this.props.edit) {\r\n            this.props.edit(this.props.note);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Box className={styles.note} sx={{ boxShadow: 2 }}>\r\n                <p>Note:</p>\r\n                <div className={styles.header}>\r\n                    <h4 className={styles.info}>\r\n                        {this.props.note.creatorUser.name}\r\n                    </h4>\r\n                    {this.props.delete && (\r\n                        <div\r\n                            className={styles.delete}\r\n                            onClick={this.delete.bind(this)}\r\n                        >\r\n                            <IconButton aria-label=\"delete\" size=\"small\">\r\n                                <DeleteIcon fontSize=\"inherit\" />\r\n                            </IconButton>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <div className={styles.content} onClick={this.edit.bind(this)}>\r\n                    {this.props.note.content}\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"editorContainer\":\"NoteEditor---editorContainer\",\"textEditor\":\"NoteEditor---textEditor\"};","//@flow\r\nimport React from \"react\";\r\nimport Annotation from \"lib/Annotation\";\r\nimport styles from \"./NoteEditor.css\";\r\nimport buttonStyles from \"./Button.css\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\ntype Props = {\r\n    note: Annotation,\r\n    saveNote: (note: Annotation, content: string) => void,\r\n    cancel: () => void\r\n};\r\n\r\ntype State = {\r\n    content: string\r\n};\r\n\r\nexport default class NoteEditor extends React.Component<Props, State> {\r\n    textarea: HTMLTextAreaElement | null;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            content: props.note.content\r\n        };\r\n    }\r\n\r\n    save() {\r\n        const content = this.textarea ? this.textarea.value : \"\";\r\n        this.props.saveNote(this.props.note, content);\r\n    }\r\n\r\n    cancel() {\r\n        this.props.cancel();\r\n    }\r\n\r\n    handleChange(e: Event) {\r\n        const content =\r\n            e.target instanceof HTMLTextAreaElement ? e.target.value : \"\";\r\n        this.setState((prevState, props) => {\r\n            return {\r\n                content: content\r\n            };\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.editorContainer}>\r\n                <textarea\r\n                    className={styles.textEditor}\r\n                    ref={(textarea: HTMLTextAreaElement | null) =>\r\n                        (this.textarea = textarea)\r\n                    }\r\n                    value={this.state.content}\r\n                    onChange={this.handleChange.bind(this)}\r\n                />\r\n                <div className={buttonStyles.buttonContainer}>\r\n                    <div\r\n                        className={buttonStyles.save}\r\n                        onClick={this.save.bind(this)}\r\n                    >\r\n                        <FormattedMessage id=\"annotation.save\" />\r\n                    </div>\r\n                    <div\r\n                        className={buttonStyles.cancel}\r\n                        onClick={this.cancel.bind(this)}\r\n                    >\r\n                        <FormattedMessage id=\"annotation.cancel\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"editorContainer\":\"QuestionEditor---editorContainer\",\"textEditor\":\"QuestionEditor---textEditor\"};","import React from \"react\";\r\nimport styles from \"./QuestionEditor.css\";\r\nimport buttonStyles from \"./Button.css\";\r\nimport Annotation from \"lib/Annotation\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\ntype Props = {\r\n    question: Annotation,\r\n    questionQuote: React.Element<typeof React.Component>,\r\n    defaultTitle: string,\r\n    saveQuestion: (\r\n        question: Annotation,\r\n        title: string,\r\n        content: string\r\n    ) => void,\r\n    cancel: () => void\r\n};\r\n\r\ntype State = {\r\n    content: string\r\n};\r\n\r\nexport default class QuestionEditor extends React.Component<Props> {\r\n    textarea: HTMLTextAreaElement | null;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            content: props.question.content\r\n        };\r\n    }\r\n\r\n    save() {\r\n        const content = this.textarea ? this.textarea.value : \"\";\r\n        let topicTitle=this.props.defaultTitle+`[# ${Date.now().toString().slice(-5,-1)} ]`;\r\n         // randomize topic Title \r\n        this.props.saveQuestion(\r\n            this.props.question,\r\n            topicTitle,\r\n            content\r\n        );\r\n    }\r\n\r\n    cancel() {\r\n        this.props.cancel();\r\n    }\r\n\r\n    handleChange(e: Event) {\r\n        const content =\r\n            e.target instanceof HTMLTextAreaElement ? e.target.value : \"\";\r\n        this.setState((prevState, props) => {\r\n            return {\r\n                content: content\r\n            };\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.editorContainer}>\r\n                <div>{this.props.questionQuote}</div>\r\n                <textarea\r\n                    className={styles.textEditor}\r\n                    ref={(textarea: HTMLTextAreaElement | null) =>\r\n                        (this.textarea = textarea)\r\n                    }\r\n                    value={this.state.content}\r\n                    onChange={this.handleChange.bind(this)}\r\n                />\r\n                <div className={buttonStyles.buttonContainer}>\r\n                    <div\r\n                        className={buttonStyles.save}\r\n                        onClick={this.save.bind(this)}\r\n                    >\r\n                        <FormattedMessage id=\"annotation.save\" />\r\n                    </div>\r\n                    <div\r\n                        className={buttonStyles.cancel}\r\n                        onClick={this.cancel.bind(this)}\r\n                    >\r\n                        <FormattedMessage id=\"annotation.cancel\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"question\":\"QuestionView---question\",\"threadLink\":\"QuestionView---threadLink\"};","import React from \"react\";\r\nimport styles from \"./QuestionView.css\";\r\nimport controlStyles from \"./AnnotationControls.css\";\r\nimport buttonStyles from \"./Button.css\";\r\nimport Annotation from \"lib/Annotation\";\r\nimport Question from \"lib/Question\";\r\nimport AnswerView from \"./AnswerView\";\r\nimport { FormattedMessage, FormattedDate } from \"react-intl\";\r\nimport classnames from \"classnames\";\r\nimport { QUESTION_URL } from \"app_constants\";\r\nimport { Box, IconButton } from \"components/UI/muiComponent\";\r\nimport { DiscourseForum } from \"components/utility/discourseForum\";\r\nimport { Delete as DeleteIcon } from \"components/UI/muiIcon\";\r\ntype Props = {\r\n    question: Question,\r\n    delete: () => void,\r\n};\r\n\r\nexport default class QuestionView extends React.Component<Props> {\r\n    delete = () => {\r\n        if (this.props.delete) {\r\n            this.props.delete();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const topicId = this.props.question.topicId || null;\r\n        const topicUrl = QUESTION_URL + topicId;\r\n        let answerViews = [];\r\n        let answers = this.props.question.answers;\r\n        for (let i = 0; i < answers.length; i++) {\r\n            const answer = answers[i];\r\n            answerViews.push(\r\n                <AnswerView answer={answer} key={\"answer_\" + answer.created} />\r\n            );\r\n        }\r\n\r\n        const name =\r\n            this.props.question.name.length > 0\r\n                ? this.props.question.name\r\n                : this.props.question.username;\r\n\r\n        return (\r\n            <Box\r\n                className={classnames(styles.question, controlStyles.padding)}\r\n                sx={{ boxShadow: 2 }}\r\n            >\r\n                <p\r\n                    className={controlStyles.text}\r\n                    dangerouslySetInnerHTML={{\r\n                        __html: this.props.question.content,\r\n                    }}\r\n                />\r\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    <span\r\n                        className={classnames(\r\n                            styles.threadLink,\r\n                            controlStyles.text\r\n                        )}\r\n                    >\r\n                        <a href={topicUrl} target=\"_blank\">\r\n                            <FormattedMessage id=\"question.viewThread\" />\r\n                        </a>\r\n                    </span>\r\n                    <IconButton\r\n                        aria-label=\"delete\"\r\n                        size=\"small\"\r\n                        onClick={this.delete}\r\n                    >\r\n                        <DeleteIcon fontSize=\"inherit\" />\r\n                    </IconButton>\r\n                </div>\r\n                <p className={controlStyles.subTitle}>\r\n                    {name}\r\n                    <FormattedDate value={this.props.question.created} />\r\n                </p>\r\n                {/* {answerViews} */}\r\n                <DiscourseForum topicId={topicId} />\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"QuestionsLoading---loading\"};","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport styles from \"./QuestionsLoading.css\";\r\nimport controlStyles from \"./AnnotationControls.css\";\r\nimport buttonStyles from \"./Button.css\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport Loader from \"react-loader\";\r\n\r\nexport default class QuestionsLoading extends React.Component<Props> {\r\n    render() {\r\n        return (\r\n            <div className={classnames(styles.loading, controlStyles.text)}>\r\n                <Loader\r\n                    loaded={false}\r\n                    scale={0.25}\r\n                    position=\"relative\"\r\n                    top=\"50%\"\r\n                    left=\"50%\"\r\n                    lines={9}\r\n                    width={8}\r\n                    length={8}\r\n                    radius={14}\r\n                />\r\n                Loading questions...\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"selectVersion\":\"SelectVersion---selectVersion\",\"selectEmpty\":\"SelectVersion---selectEmpty\",\"selectOptions\":\"SelectVersion---selectOptions\",\"styled-select\":\"SelectVersion---styled-select\"};","// @flow\r\nimport React, { useState, useEffect, memo } from \"react\";\r\nimport _ from \"lodash\";\r\nimport classnames from \"classnames\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport styles from \"./SelectVersion.css\";\r\nimport Witness from \"lib/Witness\";\r\nimport { NativeSelect } from \"components/UI/muiComponent\";\r\nexport type Props = {\r\n    witnesses: Witness[],\r\n    activeWitness: Witness | null,\r\n    onSelectedWitness: (witness: Witness) => void,\r\n    user: {},\r\n};\r\n\r\nconst SelectVersion = (props: Props) => {\r\n    let witnesses = [];\r\n    let tabName = \"\";\r\n    let r = \"\";\r\n    let classes = [];\r\n    if (props.witnesses && props.activeWitness) {\r\n        r = props.witnesses.findIndex((l) => l.id === props.activeWitness.id);\r\n        witnesses = props.witnesses.map((witness) => witness);\r\n        witnesses.sort((a, b) => {\r\n            if (a.isWorking) {\r\n                return -1;\r\n            }\r\n            if (b.isWorking) {\r\n                return 1;\r\n            }\r\n            if (a.isBase) {\r\n                return -1;\r\n            }\r\n            if (b.isBase) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n        witnesses = witnesses.sort((a, b) => a.id - b.id);\r\n    }\r\n\r\n    const handleChangeWitness = (e) => {\r\n        if (!_.isEmpty(witnesses)) {\r\n            props.onSelectedWitness(witnesses[e.target.value]);\r\n        }\r\n    };\r\n\r\n    if (witnesses.length === 0) return null;\r\n\r\n    return (\r\n        <NativeSelect\r\n            onChange={handleChangeWitness}\r\n            className={styles.selectVersion}\r\n            value={r}\r\n            label=\"Version\"\r\n            classes={{\r\n                root: styles.selectEmpty,\r\n                select: styles.selectOptions,\r\n            }}\r\n        >\r\n            {witnesses.map((witness, key) => {\r\n                if (witness.id === props.activeWitness.id)\r\n                    classes.push(styles.selected);\r\n                tabName = witness.source.name;\r\n\r\n                if (witness.isWorking) {\r\n                    tabName =\r\n                        props.intl.locale === \"en\"\r\n                            ? props.user?.name === \"User\"\r\n                                ? \"Working\"\r\n                                : \"My Edition\"\r\n                            : \"མཉམ་འབྲེལ་པར་མ།\";\r\n                }\r\n\r\n                return (\r\n                    <option\r\n                        key={`versionSelect-${key}`}\r\n                        value={key}\r\n                        className={styles.selectOptions}\r\n                    >\r\n                        {tabName}\r\n                    </option>\r\n                );\r\n            })}\r\n        </NativeSelect>\r\n    );\r\n};\r\n\r\nexport default memo(injectIntl(SelectVersion));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"inlineWidth\":\"280px\",\"annotationControls\":\"SplitText---annotationControls\",\"annotationContent\":\"SplitText---annotationContent\",\"subTitle\":\"SplitText---subTitle\",\"title\":\"SplitText---title\",\"sectionHeading\":\"SplitText---sectionHeading\",\"text\":\"SplitText---text\",\"padding\":\"SplitText---padding\",\"arrowTop\":\"SplitText---arrowTop\",\"arrowLeft\":\"SplitText---arrowLeft\",\"arrowRight\":\"SplitText---arrowRight\",\"inline\":\"SplitText---inline\",\"arrow\":\"SplitText---arrow\",\"arrowDs\":\"SplitText---arrowDs\",\"nothingSelected\":\"SplitText---nothingSelected\",\"anonymousMessage\":\"SplitText---anonymousMessage\",\"noNotes\":\"SplitText---noNotes\",\"breakButtons\":\"SplitText---breakButtons\",\"splitText\":\"SplitText---splitText\",\"splitTextRowContent\":\"SplitText---splitTextRowContent\",\"splitTextRow\":\"SplitText---splitTextRow\",\"pechaImage\":\"SplitText---pechaImage\",\"image\":\"SplitText---image\",\"controlsPlaceholder\":\"SplitText---controlsPlaceholder\",\"hide\":\"SplitText---hide\",\"pageNumber\":\"SplitText---pageNumber\",\"image-loading\":\"SplitText---image-loading\"};","// @flow\r\nimport * as React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { AutoSizer } from \"react-virtualized/dist/es/AutoSizer\";\r\nimport { List } from \"react-virtualized/dist/es/List\";\r\nimport lopenlinglogo from \"images/lopenling_logo.png\";\r\nimport Zoom from \"components/utility/imageZoom\";\r\nimport {\r\n    CellMeasurer,\r\n    CellMeasurerCache,\r\n} from \"react-virtualized/dist/es/CellMeasurer\";\r\nimport \"react-virtualized/styles.css\";\r\nimport Text, {\r\n    idForSegment,\r\n    idForDeletedSegment,\r\n    idForInsertion,\r\n    idForPageBreak,\r\n    idForLineBreak,\r\n} from \"./Text\";\r\nimport SplitText from \"lib/SplitText\";\r\nimport SegmentedText from \"lib/SegmentedText\";\r\nimport shallowEqual from \"lib/shallowEqual\";\r\nimport { CONTROLS_MARGIN_LEFT } from \"./AnnotationControls\";\r\nimport AnnotationControlsContainer from \"./AnnotationControlsContainer\";\r\nimport styles from \"./SplitText.css\";\r\nimport annotationControlsStyles from \"./AnnotationControls.css\";\r\nimport controlStyles from \"./AnnotationControls.css\";\r\nimport _ from \"lodash\";\r\nimport TextSegment from \"lib/TextSegment\";\r\nimport Annotation, { ANNOTATION_TYPES } from \"lib/Annotation\";\r\nimport type { AnnotationUniqueId } from \"lib/Annotation\";\r\nimport Witness from \"lib/Witness\";\r\nimport GraphemeSplitter from \"grapheme-splitter\";\r\nimport classNames from \"classnames\";\r\n\r\nconst MIN_SPACE_RIGHT =\r\n    parseInt(controlStyles.inlineWidth) + CONTROLS_MARGIN_LEFT;\r\n\r\nconst IMAGE_URL_PREFIX = \"//iiif.bdrc.io/\";\r\nconst IMAGE_URL_SUFFIX = \"/full/full/0/default.jpg\";\r\nconst IMAGE_START_PRE_KEY = \"bdrcimg_pre\";\r\nconst IMAGE_START_NUMBER_KEY = \"bdrcimg_number\";\r\nconst IMAGE_START_SUFFIX_KEY = \"bdrcimg_suffix\";\r\n\r\nlet _searchResultsCache: {\r\n    [splitTextUniqueId: string]: {\r\n        [searchTerm: string]: {\r\n            [index: number]: { [position: number]: [number, number] },\r\n        },\r\n    },\r\n} = {};\r\n\r\nexport type Props = {\r\n    textListVisible: boolean,\r\n    editMenuVisible: Boolean,\r\n    imagesBaseUrl: string,\r\n    splitText: SplitText,\r\n    didSelectSegmentIds: (segmentIds: string[]) => void,\r\n    limitWidth: boolean,\r\n    activeAnnotation: Annotation | null,\r\n    selectedAnnotatedSegments: Array<TextSegment | number>,\r\n    showImages: boolean,\r\n    annotationPositions: { [string]: Annotation[] },\r\n    annotations: Annotation[],\r\n    activeAnnotations: { [AnnotationUniqueId]: Annotation } | null,\r\n    selectedSegmentId: (segmentId: string) => void,\r\n    selectedWitness: Witness | null,\r\n    selectedWitness2: Witness | null,\r\n    selectedSearchResult: {\r\n        textId: number,\r\n        start: number,\r\n        length: number,\r\n    } | null,\r\n    searchValue: string | null,\r\n    fontSize: number,\r\n    isSecondWindowOpen: Boolean,\r\n    changeScrollToId: () => void,\r\n    changeSyncIdOnClick: () => void,\r\n    closeAnnotation: () => void,\r\n    syncIdOnClick: Number,\r\n    isPanelLinked: Boolean,\r\n    isPanelVisible: Boolean,\r\n    textAlignment: {},\r\n    textAlignmentById: {},\r\n    selectedWindow: Boolean,\r\n    scrollToId: Number,\r\n    selectedTargetRange: [],\r\n    selectedSourceRange: [],\r\n    searchResults: [],\r\n    showTableContent: Boolean,\r\n    condition: Boolean,\r\n    MediaInterval: {},\r\n};\r\n\r\nexport default class SplitTextComponent extends React.PureComponent<Props> {\r\n    isSecondWindowOpen: Boolean;\r\n    list: List | null;\r\n    splitText: HTMLDivElement | null;\r\n    cache: CellMeasurerCache;\r\n    rowRenderer: (params: {\r\n        key: string,\r\n        index: number,\r\n        parent: {},\r\n        style: {},\r\n    }) => React.Element<CellMeasurer>;\r\n    resizeHandler: () => void;\r\n    selectionHandler: (e: Event) => void;\r\n    textListVisible: boolean;\r\n    editMenuVisible: Boolean;\r\n    activeSelection: Selection | null;\r\n    selectedNodes: Node[] | null;\r\n    // Whether the mouse button is down\r\n    _mouseDown: boolean;\r\n    _activeWitness: Witness | null;\r\n    _didSetInitialScrollPosition: boolean;\r\n    _filteredSelectedAnnotatedSegments: TextSegment[];\r\n    _modifyingSelection: boolean;\r\n    selectedTextIndex: number | null;\r\n    splitTextRect: ClientRect | null;\r\n    firstSelectedSegment: TextSegment | null;\r\n    selectedElementId: string | null;\r\n    selectedElementIds: string[] | null;\r\n    imageWidth: number | null;\r\n    imageHeight: number | null;\r\n    calculatedImageHeight: number | null;\r\n    changeScrollToId: () => void;\r\n    changeSyncIdOnClick: () => void;\r\n    wheelScrolling: () => void;\r\n    closeAnnotation: () => void;\r\n    textlines: Node[] | null;\r\n    jump: number;\r\n    isPanelLinked: Boolean;\r\n    splitTextRef;\r\n    textAlignmentById;\r\n    scrollEvent: () => void;\r\n    selectedWindow;\r\n    debouncedScroll;\r\n    targetId;\r\n    condition;\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.textAlignmentById = [];\r\n        this.list = null;\r\n        this.splitText = null;\r\n        this.cache = new CellMeasurerCache({\r\n            fixedWidth: true,\r\n        });\r\n        this.splitTextRef = React.createRef(null);\r\n        this.rowRenderer = this.rowRenderer.bind(this);\r\n        this.textListVisible = props.textListVisible;\r\n        this.editMenuVisible = props.editMenuVisible;\r\n        this.isPanelLinked = props.isPanelLinked;\r\n        this.activeSelection = null;\r\n        this.selectedNodes = null;\r\n        this._mouseDown = false;\r\n        this._activeWitness = null;\r\n        this._didSetInitialScrollPosition = false;\r\n        this._modifyingSelection = false;\r\n        this.imageHeight = null;\r\n        this.imageWidth = null;\r\n        this.calculatedImageHeight = null;\r\n        this.processProps(props);\r\n        this.changeScrollToId = props.changeScrollToId;\r\n        this.changeSyncIdOnClick = props.changeSyncIdOnClick;\r\n        this.closeAnnotation = props.closeAnnotation;\r\n        this.scrollJump = props.scrollJump;\r\n        this.textAlignmentById = [];\r\n        this.scrollEvent = this.scrollEvent.bind(this);\r\n        this.selectedWindow = props.selectedWindow;\r\n        this.condition = props.condition;\r\n    }\r\n\r\n    scrollEvent(e) {\r\n        if (this.selectedWindow === 2) return null;\r\n        if (this.selectedWindow === 1) {\r\n            let list = [];\r\n            let imageIdList = [];\r\n            this.textAlignmentById.map((l) => {\r\n                let number = document.getElementById(\"s_\" + l.start);\r\n                if (number) {\r\n                    let position = number.getBoundingClientRect();\r\n                    if (position.top > 102) {\r\n                        list.push({\r\n                            id: l.id,\r\n                            start: l.start,\r\n                            target: l.TStart,\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (!_.isEmpty(list) || !_.isEmpty(imageIdList)) {\r\n                if (this.selectedWindow === 1) {\r\n                    this.debouncedScroll(list);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    updateList(\r\n        resetCache: boolean = true,\r\n        resetRows: number | number[] | null = null\r\n    ) {\r\n        if (\r\n            this.props.showImages &&\r\n            !this.calculatedImageHeight &&\r\n            this.imageHeight &&\r\n            this.imageWidth\r\n        ) {\r\n            this.calculatedImageHeight = this.calculateImageHeight();\r\n        }\r\n        if (this.list) {\r\n            const list = this.list;\r\n            if (resetCache) {\r\n                if (resetRows !== null) {\r\n                    if (!Array.isArray(resetRows)) {\r\n                        this.cache.clear(resetRows);\r\n                    } else if (Array.isArray(resetRows)) {\r\n                        for (let i = 0; i < resetRows.length; i++) {\r\n                            let resetRow = resetRows[i];\r\n                            this.cache.clear(resetRow);\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.cache.clearAll();\r\n                    list.measureAllRows();\r\n                    list.recomputeRowHeights(0);\r\n                }\r\n            }\r\n            list.forceUpdateGrid();\r\n        }\r\n    }\r\n\r\n    mouseDown() {\r\n        this._mouseDown = true;\r\n    }\r\n\r\n    mouseUp() {\r\n        this._mouseDown = false;\r\n        if (this.activeSelection) {\r\n            let segmentIds = this.processSelection(this.activeSelection);\r\n            if (!segmentIds) {\r\n                segmentIds = [];\r\n            }\r\n            this.props.didSelectSegmentIds(segmentIds);\r\n            this.activeSelection = null;\r\n        }\r\n    }\r\n    handleSelection(e: Event) {\r\n        if (!this._modifyingSelection) {\r\n            this.activeSelection = document.getSelection();\r\n            if (!this._mouseDown) {\r\n                // sometimes, this gets called after the mouseDown event handler\r\n                this.mouseUp();\r\n            }\r\n        } else {\r\n            e.stopPropagation();\r\n            // Need to set this here. If set at callsite, the event will not\r\n            // have time to propagate.\r\n            this._modifyingSelection = false;\r\n        }\r\n    }\r\n\r\n    processSelection(selection: Selection): string[] | null {\r\n        if (\r\n            selection.rangeCount === 0 ||\r\n            selection.isCollapsed ||\r\n            selection.type === \"Caret\"\r\n        ) {\r\n            this.selectedNodes = null;\r\n            return null;\r\n        }\r\n\r\n        const range = selection.getRangeAt(0);\r\n        const start = range.startContainer;\r\n        const startSpan = this.getNodeSegmentSpan(start);\r\n        if (!(startSpan && startSpan.parentNode)) {\r\n            // If the selection is not a text segment, ignore.\r\n            // Assuming if the first node is a non-segment, they\r\n            // all are.\r\n            return null;\r\n        }\r\n\r\n        let nodes = this.getRangeNodes(range, startSpan.parentNode);\r\n        // Check if the selection starts after the end of a node, and\r\n        // if so remove that node.\r\n        if (nodes.length > 0) {\r\n            let firstNode = nodes[0];\r\n            if (range.startOffset === firstNode.textContent.length) {\r\n                nodes.shift();\r\n            }\r\n        }\r\n\r\n        const end = range.endContainer;\r\n        const endSpan = this.getNodeSegmentSpan(end);\r\n        if (!(endSpan && endSpan.parentNode)) {\r\n            return null;\r\n        }\r\n        if (endSpan && startSpan.parentNode !== endSpan.parentNode) {\r\n            // Selection is spanning Texts.\r\n            // We assume a selection can only run across a maximum\r\n            // of two Texts.\r\n            nodes = nodes.concat(this.getRangeNodes(range, endSpan.parentNode));\r\n        } else {\r\n            // Check if the selection ends before the start of a node, and\r\n            // if so remove that node.\r\n            if (range.endOffset === 0) {\r\n                nodes.pop();\r\n            }\r\n        }\r\n        this.selectedNodes = nodes;\r\n        let nodeIds = [];\r\n        nodes.reduce((accumulator: string[], current: Node) => {\r\n            if (current instanceof Element) {\r\n                accumulator.push(current.id);\r\n            }\r\n            return accumulator;\r\n        }, nodeIds);\r\n        return nodeIds;\r\n    }\r\n\r\n    getNodeSegmentSpan(node: Node): Element | null {\r\n        let currentNode = node;\r\n        let span = null;\r\n        const test = /^(i|s|ds)_/;\r\n        while (!span && currentNode.parentNode) {\r\n            if (currentNode instanceof Element && test.test(currentNode.id)) {\r\n                span = currentNode;\r\n            }\r\n            currentNode = currentNode.parentNode;\r\n        }\r\n\r\n        return span;\r\n    }\r\n\r\n    getRangeNodes(range: Range, parentNode: Node): Node[] {\r\n        let rangeSpans = [];\r\n        for (let i = 0, len = parentNode.childNodes.length; i < len; i++) {\r\n            const node = parentNode.childNodes[i];\r\n            // TODO: add polyfill for i.e.?\r\n            // e.g. https://gist.github.com/jonathansampson/6d09bd6d2e8c22c53868aec42e66b0f9\r\n            if (range.intersectsNode(node)) {\r\n                rangeSpans.push(node);\r\n            }\r\n        }\r\n        return rangeSpans;\r\n    }\r\n\r\n    getControlsMeasurements(props: Props): {\r\n        selectedTextIndex: number,\r\n        firstSelectedSegment: TextSegment,\r\n        selectedElementId: string,\r\n        splitTextRect: ClientRect,\r\n        selectedElementIds: string[],\r\n    } | null {\r\n        if (!this.splitText) {\r\n            return null;\r\n        }\r\n        let splitTextComponent = this.splitText;\r\n        let selectedTextIndex = null;\r\n        let firstSelectedSegment = null;\r\n        let selectedElementId = null;\r\n        let splitTextRect = null;\r\n        let segmentIdFunction: null | ((segment: TextSegment) => string) = null;\r\n        let selectedElementIds = [];\r\n        let startPos = 0;\r\n        if (props.activeAnnotation) {\r\n            let activeAnnotation = props.activeAnnotation;\r\n            [startPos] =\r\n                props.splitText.annotatedText.getPositionOfAnnotation(\r\n                    activeAnnotation\r\n                );\r\n            if (startPos === null) {\r\n                console.warn(\"No startPos in getControlsMeasurements\");\r\n                return null;\r\n            }\r\n            if (activeAnnotation.type === ANNOTATION_TYPES.pageBreak) {\r\n                startPos -= 1;\r\n            }\r\n            if (activeAnnotation.type === ANNOTATION_TYPES.lineBreak) {\r\n                startPos -= 1;\r\n            }\r\n\r\n            // Index of text containing end of annotation\r\n            let positionEnd = startPos + activeAnnotation.length;\r\n            if (activeAnnotation.length > 0) positionEnd -= 1;\r\n            selectedTextIndex =\r\n                // props.splitText.getTextIndexOfPosition(positionEnd);\r\n                props.splitText.getTextIndexOfPosition(startPos); //to position the control on start of selection\r\n\r\n            splitTextRect = splitTextComponent.getBoundingClientRect();\r\n        }\r\n        let selectedAnnotatedSegments = [];\r\n        if (\r\n            props.selectedAnnotatedSegments &&\r\n            props.selectedAnnotatedSegments.length > 0\r\n        ) {\r\n            selectedAnnotatedSegments = props.selectedAnnotatedSegments;\r\n            for (let i = 0; i < selectedAnnotatedSegments.length; i++) {\r\n                let segment = selectedAnnotatedSegments[i];\r\n                if (\r\n                    firstSelectedSegment === null &&\r\n                    segment instanceof TextSegment\r\n                ) {\r\n                    firstSelectedSegment = segment;\r\n                    break;\r\n                }\r\n            }\r\n            if (firstSelectedSegment) {\r\n                if (\r\n                    firstSelectedSegment.length === 0 &&\r\n                    props.activeAnnotation &&\r\n                    props.activeAnnotation.isInsertion\r\n                ) {\r\n                    selectedElementId = idForInsertion(firstSelectedSegment);\r\n                    segmentIdFunction = idForInsertion;\r\n                } else {\r\n                    selectedElementId = idForSegment(firstSelectedSegment);\r\n                    segmentIdFunction = idForSegment;\r\n                }\r\n            }\r\n        } else if (props.activeAnnotation) {\r\n            if (props.activeAnnotation.isDeletion) {\r\n                let segment = new TextSegment(startPos, \"\");\r\n                selectedElementId = idForDeletedSegment(segment);\r\n                segmentIdFunction = idForDeletedSegment;\r\n                firstSelectedSegment = segment;\r\n                selectedAnnotatedSegments = [firstSelectedSegment];\r\n            } else if (props.activeAnnotation.isInsertion) {\r\n                const [start] =\r\n                    props.splitText.annotatedText.getPositionOfAnnotation(\r\n                        props.activeAnnotation\r\n                    );\r\n                if (start) {\r\n                    let segment = new TextSegment(start, \"\");\r\n                    selectedElementId = idForInsertion(segment);\r\n                    segmentIdFunction = idForInsertion;\r\n                    firstSelectedSegment = segment;\r\n                    selectedAnnotatedSegments = [firstSelectedSegment];\r\n                }\r\n            } else if (\r\n                props.activeAnnotation.type === ANNOTATION_TYPES.pageBreak\r\n            ) {\r\n                let segment = new TextSegment(startPos + 1, \"\");\r\n                let prevSegment = new TextSegment(startPos, \"\");\r\n                selectedElementId = idForPageBreak(prevSegment);\r\n                firstSelectedSegment = segment;\r\n                selectedAnnotatedSegments = [segment];\r\n                selectedElementIds = [selectedElementId];\r\n            } else if (\r\n                props.activeAnnotation.type === ANNOTATION_TYPES.lineBreak\r\n            ) {\r\n                let segment = new TextSegment(startPos + 1, \"\");\r\n                let prevSegment = new TextSegment(startPos, \"\");\r\n                selectedElementId = idForLineBreak(prevSegment);\r\n                firstSelectedSegment = segment;\r\n                selectedAnnotatedSegments = [segment];\r\n                selectedElementIds = [selectedElementId];\r\n            }\r\n        }\r\n        if (segmentIdFunction) {\r\n            for (let i = 0; i < selectedAnnotatedSegments.length; i++) {\r\n                let segment = selectedAnnotatedSegments[i];\r\n                if (segment instanceof TextSegment) {\r\n                    const segmentId = segmentIdFunction(segment);\r\n                    selectedElementIds.push(segmentId);\r\n                }\r\n            }\r\n        }\r\n        if (\r\n            selectedTextIndex != null &&\r\n            firstSelectedSegment &&\r\n            selectedElementId &&\r\n            splitTextRect\r\n        ) {\r\n            return {\r\n                selectedTextIndex: selectedTextIndex,\r\n                firstSelectedSegment: firstSelectedSegment,\r\n                selectedElementId: selectedElementId,\r\n                splitTextRect: splitTextRect,\r\n                selectedElementIds: selectedElementIds,\r\n            };\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    shouldResetListCache(oldProps: Props, newProps: Props) {\r\n        let shouldReset = false;\r\n        if (\r\n            oldProps.showImages !== newProps.showImages ||\r\n            this.pageBreaksChanged(oldProps, newProps)\r\n        ) {\r\n            shouldReset = true;\r\n        }\r\n\r\n        return shouldReset;\r\n    }\r\n\r\n    pageBreaksChanged(oldProps: Props, newProps: Props) {\r\n        const oldTextBreaks = oldProps.splitText.getTextsFinalPositions();\r\n        const newTextBreaks = newProps.splitText.getTextsFinalPositions();\r\n\r\n        if (oldTextBreaks.length !== newTextBreaks.length) return true;\r\n\r\n        return JSON.stringify(oldTextBreaks) !== JSON.stringify(newTextBreaks);\r\n    }\r\n\r\n    lineBreaksChanges(oldProps: Props, newProps: Props) {\r\n        let oldActiveAnnotation = oldProps.activeAnnotation;\r\n        let newActiveAnnotation = newProps.activeAnnotation;\r\n        let hasChanged = false;\r\n\r\n        if (\r\n            oldActiveAnnotation &&\r\n            oldActiveAnnotation.isType(ANNOTATION_TYPES.lineBreak) &&\r\n            newProps.activeAnnotations &&\r\n            !newProps.activeAnnotations.hasOwnProperty(\r\n                oldActiveAnnotation.uniqueId\r\n            )\r\n        ) {\r\n            hasChanged = true;\r\n        }\r\n\r\n        if (\r\n            newActiveAnnotation &&\r\n            newActiveAnnotation.isType(ANNOTATION_TYPES.lineBreak) &&\r\n            oldProps.activeAnnotations &&\r\n            !oldProps.activeAnnotations.hasOwnProperty(\r\n                newActiveAnnotation.uniqueId\r\n            )\r\n        ) {\r\n            hasChanged = true;\r\n        }\r\n\r\n        return hasChanged;\r\n    }\r\n\r\n    selectedListRow(props: Props): number | null {\r\n        let row = null;\r\n        if (props.activeAnnotation) {\r\n            row = props.splitText.getTextIndexOfPosition(\r\n                props.activeAnnotation.start\r\n            );\r\n        }\r\n        return row;\r\n    }\r\n\r\n    processProps(props: Props) {\r\n        let changedWitness = false;\r\n        if (\r\n            !this.props.selectedWitness ||\r\n            (props.selectedWitness &&\r\n                props.selectedWitness.id !== this.props.selectedWitness.id)\r\n        ) {\r\n            changedWitness = true;\r\n            this._didSetInitialScrollPosition = false;\r\n        }\r\n\r\n        if (\r\n            props.selectedSearchResult &&\r\n            (!this.props.selectedSearchResult ||\r\n                props.selectedSearchResult.start !==\r\n                    this.props.selectedSearchResult.start ||\r\n                props.selectedSearchResult.textId !==\r\n                    this.props.selectedSearchResult.textId)\r\n        ) {\r\n            console.log(\"resetting scroll position from search result\");\r\n            this._didSetInitialScrollPosition = false;\r\n        }\r\n\r\n        // TODO: check if new selectedSearchResult and if so\r\n        // set this._didSetInitialScrollPosition = false\r\n\r\n        // make sure there's no numbers in selectedAnnotatedSegments\r\n        // as we want to pass it to Text which only expects TextSegments\r\n        this._filteredSelectedAnnotatedSegments =\r\n            props.selectedAnnotatedSegments.reduce(\r\n                (acc, current: TextSegment | number) => {\r\n                    if (current instanceof TextSegment) acc.push(current);\r\n                    return acc;\r\n                },\r\n                []\r\n            );\r\n\r\n        const controlsMeasurements = this.getControlsMeasurements(props);\r\n        if (controlsMeasurements) {\r\n            this.selectedTextIndex = controlsMeasurements.selectedTextIndex;\r\n            this.firstSelectedSegment =\r\n                controlsMeasurements.firstSelectedSegment;\r\n            this.splitTextRect = controlsMeasurements.splitTextRect;\r\n            this.selectedElementId = controlsMeasurements.selectedElementId;\r\n            this.selectedElementIds = controlsMeasurements.selectedElementIds;\r\n        }\r\n\r\n        if (\r\n            props.textListVisible !== this.textListVisible ||\r\n            props.editMenuVisible !== this.editMenuVisible\r\n        ) {\r\n            setTimeout(() => {\r\n                this.textListVisible = props.textListVisible;\r\n                this.editMenuVisible = props.editMenuVisible;\r\n                this.updateList(true);\r\n            }, 500);\r\n        } else {\r\n            if (changedWitness) {\r\n                this.updateList(true);\r\n            } else if (this.pageBreaksChanged(this.props, props)) {\r\n                let selectedRows = null;\r\n                let currentSelectedRow = this.selectedListRow(this.props);\r\n                let newSelectedRow = this.selectedListRow(props);\r\n                if (currentSelectedRow && newSelectedRow) {\r\n                    let firstChangedRow =\r\n                        currentSelectedRow > newSelectedRow\r\n                            ? newSelectedRow\r\n                            : currentSelectedRow;\r\n\r\n                    let splitRowTexts = this.props.splitText.texts;\r\n                    selectedRows = [];\r\n                    for (\r\n                        let i = firstChangedRow, len = splitRowTexts.length;\r\n                        i < len;\r\n                        i++\r\n                    ) {\r\n                        selectedRows.push(i);\r\n                    }\r\n                }\r\n                this.updateList(true, selectedRows);\r\n            } else if (this.lineBreaksChanges(this.props, props)) {\r\n                let selectedRow = this.selectedListRow(props);\r\n                if (!selectedRow)\r\n                    selectedRow = this.selectedListRow(this.props);\r\n                let splitRowTexts = this.props.splitText.texts;\r\n                let selectedRows = [];\r\n                if (selectedRow !== null) {\r\n                    for (\r\n                        let i = selectedRow, len = splitRowTexts.length;\r\n                        i < len;\r\n                        i++\r\n                    ) {\r\n                        selectedRows.push(i);\r\n                    }\r\n                    this.updateList(true, selectedRows);\r\n                }\r\n            } else if (this.props.fontSize !== props.fontSize) {\r\n                this.updateList(true);\r\n            } else if (\r\n                this.props.activeAnnotation &&\r\n                props.activeAnnotation &&\r\n                this.annotationsInSameLocation(\r\n                    this.props.activeAnnotation,\r\n                    props.activeAnnotation\r\n                )\r\n            ) {\r\n                this.updateList(true, this.selectedListRow(props));\r\n            } else {\r\n                this.updateList(this.shouldResetListCache(this.props, props));\r\n            }\r\n        }\r\n    }\r\n\r\n    annotationsInSameLocation(anno1: Annotation, anno2: Annotation): boolean {\r\n        if (anno1.start === anno2.start && anno1.length === anno2.length) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    UNSAFE_componentWillReceiveProps(props: Props) {\r\n        this.processProps(props);\r\n    }\r\n\r\n    scrollToIndex(startId) {\r\n        let list = this.list;\r\n        let selectedTextIndex =\r\n            this.props.splitText.getTextIndexOfPosition(startId);\r\n\r\n        setTimeout(() => {\r\n            list.scrollToRow(selectedTextIndex);\r\n            setTimeout(() => {\r\n                list.scrollToPosition(list.props.scrollTop - 300);\r\n            }, 0);\r\n        }, 100);\r\n    }\r\n    componentDidMount() {\r\n        this.resizeHandler = _.throttle(() => {\r\n            this.calculatedImageHeight = null;\r\n            this.updateList();\r\n        }, 600).bind(this);\r\n        this.processProps(this.props);\r\n\r\n        this.debouncedScroll = _.debounce((list) => {\r\n            if (list.length) {\r\n                this.changeScrollToId({ id: list[0]?.start, from: 1 });\r\n            }\r\n        }, 1000);\r\n\r\n        window.addEventListener(\"resize\", this.resizeHandler);\r\n\r\n        this.selectionHandler = _.debounce((e) => {\r\n            this.handleSelection(e);\r\n        }, 200).bind(this);\r\n        setTimeout(() => {\r\n            window.dispatchEvent(new Event(\"resize\"));\r\n        }, 2000);\r\n        document.addEventListener(\"selectionchange\", this.selectionHandler);\r\n        document.addEventListener(\"mousedown\", this.mouseDown.bind(this), true);\r\n        document.addEventListener(\"mouseup\", this.mouseUp.bind(this), true);\r\n        this.componentDidUpdate();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        this.Alignment = this.props.textAlignment;\r\n        this.condition = this.props.condition;\r\n        this.scrollToId = this.props.scrollToId;\r\n        if (!this.props.isAnnotating) {\r\n            this.activeSelection = null;\r\n        }\r\n\r\n        this.textAlignmentById = this.props.textAlignmentById;\r\n        this.selectedWindow = this.props.selectedWindow;\r\n        this.targetId = this.props.syncIdOnClick;\r\n\r\n        if (this.selectedNodes && this.selectedNodes.length > 0) {\r\n            const selectedNodes = this.selectedNodes;\r\n            const selectedSegments = this.props.selectedAnnotatedSegments;\r\n            setTimeout(() => {\r\n                let selRange = document.createRange();\r\n                let startNode = selectedNodes[0];\r\n                let endNode = selectedNodes[selectedNodes.length - 1];\r\n                let lastSegment = selectedSegments[selectedSegments.length - 1];\r\n                if (lastSegment instanceof TextSegment) {\r\n                    let lastElement = document.getElementById(\r\n                        idForSegment(lastSegment)\r\n                    );\r\n                    if (lastElement) endNode = lastElement;\r\n                }\r\n\r\n                if (\r\n                    startNode instanceof Element &&\r\n                    endNode instanceof Element\r\n                ) {\r\n                    startNode = document.getElementById(startNode.id);\r\n                    endNode = document.getElementById(endNode.id);\r\n                    if (startNode && endNode) {\r\n                        selRange.setStart(startNode, 0);\r\n                        selRange.setEnd(endNode, endNode.childNodes.length);\r\n                        let sel = document.getSelection();\r\n                        if (sel) {\r\n                            this._modifyingSelection = true;\r\n                            sel.removeAllRanges();\r\n                            sel.addRange(selRange);\r\n                            this.selectedNodes = null;\r\n                        }\r\n                    }\r\n                }\r\n            }, 0);\r\n        }\r\n\r\n        if (!this._didSetInitialScrollPosition && this.list) {\r\n            const list = this.list;\r\n            if (\r\n                this.props.activeAnnotation ||\r\n                this.props.selectedSearchResult\r\n            ) {\r\n                let selectedTextIndex = this.getSelectedTextIndex();\r\n                setTimeout(() => {\r\n                    list.scrollToRow(selectedTextIndex);\r\n                    // scrollToRow often positions the annotation at the\r\n                    // bottom of the screen, so scroll up a bit\r\n                    setTimeout(() => {\r\n                        list.scrollToPosition(list.props.scrollTop - 300);\r\n                    }, 0);\r\n                }, 100);\r\n            }\r\n            this._didSetInitialScrollPosition = true;\r\n        }\r\n        //Table Of content scrolling\r\n        if (this.scrollToId.from == \"table\" && this.scrollToId.id) {\r\n            let start = this.scrollToId.id;\r\n            this.scrollToIndex(start);\r\n        }\r\n\r\n        //Video and audio alignment scrolling\r\n        if (this.scrollToId.from == \"video\" && this.scrollToId.id) {\r\n            let start = this.scrollToId.id;\r\n            this.scrollToIndex(start);\r\n        }\r\n\r\n        // scroll dom with respect to window 2 scrolling\r\n        if (\r\n            this.selectedWindow === 2 &&\r\n            this.scrollToId.from == 2 &&\r\n            this.condition &&\r\n            this.scrollToId.id !== null\r\n        ) {\r\n            this.textAlignmentById = this.props.textAlignmentById || [];\r\n            if (this.Alignment) {\r\n                let req = this.textAlignmentById.find(\r\n                    (l) => l.TStart === this.scrollToId.id\r\n                );\r\n\r\n                let start = req?.start;\r\n                if (start !== null) {\r\n                    this.scrollToIndex(start);\r\n                }\r\n            }\r\n        }\r\n\r\n        // scroll dom with respect to window 2 click\r\n        //for scrolling to the highlighted alignment if its outside visible DOM\r\n\r\n        if (\r\n            this.targetId &&\r\n            this.scrollToId.from === \"ua\" &&\r\n            this.selectedWindow === 2 &&\r\n            this.scrollToId.id === \"ua\" &&\r\n            this.condition\r\n        ) {\r\n            let clickIdObj = this.Alignment.alignment.find(\r\n                (l) =>\r\n                    this.targetId >= l.target_segment.start &&\r\n                    this.targetId < l.target_segment.end\r\n            );\r\n            let startId = clickIdObj?.source_segment?.start;\r\n\r\n            this.scrollToIndex(startId);\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"mousedown\", this);\r\n        document.removeEventListener(\"mouseup\", this);\r\n        window.removeEventListener(\"resize\", this.resizeHandler);\r\n\r\n        document.removeEventListener(\"selectionchange\", this.selectionHandler);\r\n    }\r\n\r\n    calculateImageHeight() {\r\n        let height = null;\r\n        if (this.imageHeight && this.imageWidth) {\r\n            const ratio = this.imageWidth / this.imageHeight;\r\n            const pechaImageClass = styles.pechaImage;\r\n            const pechaImageContainers =\r\n                document.getElementsByClassName(pechaImageClass);\r\n            if (pechaImageContainers.length > 0) {\r\n                let container = pechaImageContainers[0];\r\n                height = container.offsetWidth / ratio;\r\n            }\r\n        }\r\n        return height;\r\n    }\r\n\r\n    getSelectedTextIndex(): number {\r\n        let selectedTextIndex = 0;\r\n        let startPos = null;\r\n        if (this.props.activeAnnotation) {\r\n            [startPos] =\r\n                this.props.splitText.annotatedText.getPositionOfAnnotation(\r\n                    this.props.activeAnnotation\r\n                );\r\n        } else if (this.props.selectedSearchResult) {\r\n            let segment =\r\n                this.props.splitText.annotatedText.segmentAtOriginalPosition(\r\n                    this.props.selectedSearchResult.start\r\n                );\r\n            if (segment instanceof TextSegment) {\r\n                startPos = segment.start;\r\n            } else if (typeof segment === \"number\") {\r\n                startPos = segment;\r\n            }\r\n        }\r\n        if (startPos) {\r\n            selectedTextIndex =\r\n                this.props.splitText.getTextIndexOfPosition(startPos);\r\n        }\r\n        return selectedTextIndex;\r\n    }\r\n\r\n    getBaseAnnotation(annotation: Annotation): Annotation {\r\n        let [start] =\r\n            this.props.splitText.annotatedText.getPositionOfAnnotation(\r\n                annotation\r\n            );\r\n        if (start === null) start = 0;\r\n        return this.props.splitText.annotatedText.getBaseAnnotation(\r\n            start,\r\n            annotation.content.length\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const props = this.props;\r\n        const rowRenderer = this.rowRenderer;\r\n        const cache = this.cache;\r\n        const key = props.selectedWitness ? props.selectedWitness.id : 0;\r\n        return (\r\n            <div\r\n                className={styles.splitText}\r\n                ref={(div) => (this.splitText = div)}\r\n                key={key}\r\n            >\r\n                <AutoSizer disableWidth>\r\n                    {({ height }) => (\r\n                        <List\r\n                            id=\"scroller\"\r\n                            width={1}\r\n                            ref={(list) => (this.list = list)}\r\n                            height={height}\r\n                            rowCount={props.splitText.texts.length}\r\n                            rowHeight={cache.rowHeight}\r\n                            rowRenderer={rowRenderer}\r\n                            overscanRowCount={3}\r\n                            deferredMeasurementCache={cache}\r\n                            onScroll={this.scrollEvent}\r\n                            scrollToAlignment=\"start\"\r\n                            containerStyle={{\r\n                                width: \"100%\",\r\n                                maxWidth: \"100%\",\r\n                            }}\r\n                            style={{\r\n                                width: \"100%\",\r\n                                paddingTop: 30,\r\n                                paddingInline: 50,\r\n                            }}\r\n                        ></List>\r\n                    )}\r\n                </AutoSizer>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getImageUrl(pageIndex: number): string {\r\n        if (\r\n            !this.props.selectedWitness ||\r\n            !this.props.selectedWitness.properties\r\n        )\r\n            return \"\";\r\n        let witnessProperties = this.props.selectedWitness.properties;\r\n        let prefix = witnessProperties[IMAGE_START_PRE_KEY];\r\n        let start = witnessProperties[IMAGE_START_NUMBER_KEY];\r\n        let suffix = witnessProperties[IMAGE_START_SUFFIX_KEY];\r\n        let id = Number(start) + pageIndex;\r\n        let url =\r\n            IMAGE_URL_PREFIX + prefix + id + \".\" + suffix + IMAGE_URL_SUFFIX;\r\n        return url;\r\n    }\r\n\r\n    getStringPositions(\r\n        text: SegmentedText,\r\n        string: string,\r\n        index: number\r\n    ): { [position: number]: [number, number] } {\r\n        const uniqueId = this.props.splitText.annotatedText.getUniqueId();\r\n\r\n        if (!_searchResultsCache.hasOwnProperty(uniqueId)) {\r\n            _searchResultsCache = {\r\n                [uniqueId]: {},\r\n            };\r\n        }\r\n\r\n        if (!_searchResultsCache[uniqueId].hasOwnProperty(string)) {\r\n            _searchResultsCache[uniqueId] = {\r\n                [string]: {},\r\n            };\r\n        }\r\n\r\n        if (_searchResultsCache[uniqueId][string].hasOwnProperty(index)) {\r\n            return _searchResultsCache[uniqueId][string][index];\r\n        }\r\n\r\n        const splitter = new GraphemeSplitter();\r\n        const content = text.getText();\r\n        const firstSegment = text.segments[0];\r\n        const startingPosition = firstSegment?.start;\r\n        let positions = [];\r\n        let position = content.indexOf(string);\r\n        while (position !== -1) {\r\n            positions.push(position);\r\n            position = content.indexOf(string, position + 1);\r\n        }\r\n\r\n        // Position needs to be position in complete text\r\n        let verifiedPositions: { [position: number]: [number, number] } = {};\r\n        if (positions.length > 0) {\r\n            const graphemes = splitter.splitGraphemes(content);\r\n            let position = 0;\r\n            let activePosition = null;\r\n            for (let i = 0; i < graphemes.length; i++) {\r\n                const grapheme = graphemes[i];\r\n                const graphemeEnd = position + (grapheme.length - 1);\r\n                if (activePosition !== null) {\r\n                    let expectedEnd = activePosition + (string.length - 1);\r\n                    if (graphemeEnd >= expectedEnd) {\r\n                        verifiedPositions[activePosition + startingPosition] = [\r\n                            activePosition + startingPosition,\r\n                            graphemeEnd + startingPosition,\r\n                        ];\r\n                        activePosition = null;\r\n                    }\r\n                } else if (positions.indexOf(position) !== -1) {\r\n                    if (string.length === grapheme.length) {\r\n                        verifiedPositions[position + startingPosition] = [\r\n                            position + startingPosition,\r\n                            graphemeEnd + startingPosition,\r\n                        ];\r\n                    } else if (string.length > grapheme.length) {\r\n                        activePosition = position;\r\n                    }\r\n                } else {\r\n                    activePosition = null;\r\n                }\r\n\r\n                position += grapheme.length;\r\n            }\r\n        }\r\n\r\n        _searchResultsCache[uniqueId][string][index] = verifiedPositions;\r\n\r\n        return verifiedPositions;\r\n    }\r\n\r\n    rowRenderer({\r\n        key,\r\n        index,\r\n        parent,\r\n        style,\r\n    }: {\r\n        key: string,\r\n        index: number,\r\n        parent: {},\r\n        style: {},\r\n    }): React.Element<CellMeasurer> {\r\n        const props = this.props;\r\n        const cache = this.cache;\r\n        const component = this;\r\n\r\n        let imageUrl = \"\";\r\n\r\n        if (\r\n            props.selectedWitness &&\r\n            props.selectedWitness.properties &&\r\n            props.selectedWitness.properties.hasOwnProperty(IMAGE_START_PRE_KEY)\r\n        ) {\r\n            imageUrl = this.getImageUrl(index);\r\n        }\r\n\r\n        let searchStringPositions = {};\r\n        let searchValue = this.props.searchValue;\r\n        if (searchValue && searchValue.length > 0 && props.splitText) {\r\n            searchStringPositions = this.getStringPositions(\r\n                props.splitText.texts[index],\r\n                searchValue,\r\n                index\r\n            );\r\n        }\r\n        const pechaImageClass =\r\n            props.showImages && imageUrl ? styles.pechaImage : null;\r\n        let containerHeight = style.height;\r\n        let pechaStyles = {};\r\n        if (props.showImages && pechaImageClass && this.calculatedImageHeight) {\r\n            pechaStyles[\"height\"] = this.calculatedImageHeight + \"px\";\r\n        }\r\n        let newStyle = {\r\n            ...style,\r\n            height: style.height,\r\n            cursor: !this.props.isAnnotating ? \"pointer\" : \"text\",\r\n        };\r\n        return (\r\n            <CellMeasurer\r\n                columnIndex={0}\r\n                parent={parent}\r\n                rowIndex={index}\r\n                cache={cache}\r\n                key={key}\r\n            >\r\n                <div\r\n                    key={key}\r\n                    style={newStyle}\r\n                    className={styles.splitTextRow}\r\n                    ref={this.splitTextRef}\r\n                    id={`index_${index}`}\r\n                >\r\n                    <div className={styles.splitTextRowContent}>\r\n                        {props.showImages && imageUrl && (\r\n                            <div\r\n                                className={pechaImageClass}\r\n                                style={pechaStyles}\r\n                            >\r\n                                <Zoom cl={`zoomableImage-${index}`}>\r\n                                    <img\r\n                                        alt=\"Text related Image\"\r\n                                        className={classNames([\r\n                                            styles.image,\r\n                                            `zoomableImage-${index}`,\r\n                                        ])}\r\n                                        src={imageUrl}\r\n                                        width=\"100%\"\r\n                                        height=\"100%\"\r\n                                        loading=\"lazy\"\r\n                                        decoding=\"async\"\r\n                                        onLoad={(e) => {\r\n                                            if (\r\n                                                e.target &&\r\n                                                component.imageWidth === null\r\n                                            ) {\r\n                                                component.imageWidth =\r\n                                                    e.target.naturalWidth;\r\n                                                component.imageHeight =\r\n                                                    e.target.naturalHeight;\r\n                                                component.calculatedImageHeight =\r\n                                                    null;\r\n                                                window.setTimeout(\r\n                                                    component.updateList.bind(\r\n                                                        component\r\n                                                    ),\r\n                                                    0\r\n                                                );\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </Zoom>\r\n                            </div>\r\n                        )}\r\n\r\n                        <Text\r\n                            segmentedText={props.splitText.texts[index]}\r\n                            annotations={props.annotations}\r\n                            activeAnnotations={props.activeAnnotations}\r\n                            activeAnnotation={props.activeAnnotation}\r\n                            row={index}\r\n                            selectedSegmentId={props.selectedSegmentId}\r\n                            annotationPositions={props.annotationPositions}\r\n                            selectedAnnotatedSegments={\r\n                                this._filteredSelectedAnnotatedSegments\r\n                            }\r\n                            getBaseAnnotation={this.getBaseAnnotation.bind(\r\n                                this\r\n                            )}\r\n                            activeWitness={this.props.selectedWitness}\r\n                            searchValue={searchValue}\r\n                            selectedSearchResult={\r\n                                this.props.selectedSearchResult\r\n                            }\r\n                            searchStringPositions={searchStringPositions}\r\n                            fontSize={props.fontSize}\r\n                            changeSyncIdOnClick={this.props.changeSyncIdOnClick}\r\n                            changeScrollToId={this.props.changeScrollToId}\r\n                            textAlignmentById={this.props.textAlignmentById}\r\n                            selectedSourceRange={this.props.selectedSourceRange}\r\n                            selectedTargetRange={this.props.selectedTargetRange}\r\n                            changeSelectedRange={this.props.changeSelectedRange}\r\n                            condition={this.condition}\r\n                            isPanelLinked={this.props.isPanelLinked}\r\n                            selectedMedia={this.props.selectedMedia}\r\n                            MediaInterval={this.props.MediaInterval}\r\n                        />\r\n                    </div>\r\n                    {this.props.isAnnotating &&\r\n                        this.selectedTextIndex === index &&\r\n                        this.props.activeAnnotation && (\r\n                            <AnnotationControlsContainer\r\n                                annotationPositions={props.annotationPositions}\r\n                                annotatedText={props.splitText.annotatedText}\r\n                                activeAnnotation={props.activeAnnotation}\r\n                                inline={true}\r\n                                firstSelectedSegment={this.firstSelectedSegment}\r\n                                splitTextRect={this.splitTextRect}\r\n                                selectedElementId={this.selectedElementId}\r\n                                pechaImageClass={pechaImageClass}\r\n                                splitText={props.splitText}\r\n                                selectedElementIds={this.selectedElementIds}\r\n                                list={this.list}\r\n                            />\r\n                        )}\r\n                </div>\r\n            </CellMeasurer>\r\n        );\r\n    }\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"actions\";\r\nimport * as reducers from \"reducers\";\r\nimport { Typography, Box } from \"components/UI/muiComponent\";\r\n\r\nconst TEXT_DEMO_DETAIL_ID = 2;\r\n\r\nfunction Commentary({\r\n    getWitness,\r\n    alignmentData,\r\n    text,\r\n    selectSecondWindowText,\r\n}) {\r\n    let textAlignments = alignmentData?.alignments.text || [];\r\n\r\n    const handleSelectText = (text) => {\r\n        selectSecondWindowText(text);\r\n    };\r\n    if (!textAlignments.length) return null;\r\n    return (\r\n        <Box>\r\n            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                Commentary\r\n            </Typography>\r\n            {textAlignments.map((alignment, index) => {\r\n                return (\r\n                    <div\r\n                        key={`commentary-${index}`}\r\n                        style={{ cursor: \"pointer\" }}\r\n                        onClick={() =>\r\n                            handleSelectText(text(TEXT_DEMO_DETAIL_ID))\r\n                        }\r\n                    >\r\n                        {text(2).name}\r\n                        {alignment.target}\r\n                    </div>\r\n                );\r\n            })}\r\n        </Box>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): {} => {\r\n    let selectedMedia = reducers.getMediaData(state);\r\n    const alignmentData = reducers.getAlignment(state);\r\n    let text = (textId) => reducers.getText(state, textId);\r\n    let getWitness = (id) => reducers.getWitness(state, id);\r\n    return {\r\n        alignmentData,\r\n        selectedMedia,\r\n        text,\r\n        getWitness,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    const changeMediaSelection = (data) =>\r\n        dispatch(actions.mediaSelection(data));\r\n\r\n    const onChangeWindowOpen = (data: boolean) => {\r\n        dispatch(actions.toggleSecondWindow(data));\r\n    };\r\n\r\n    return {\r\n        changeMediaSelection,\r\n        onChangeWindowOpen: (data: boolean) => {\r\n            dispatch(actions.toggleSecondWindow(data));\r\n        },\r\n        onSelectedSearchResult: (\r\n            text: number,\r\n            start: number,\r\n            length: number\r\n        ) => {\r\n            dispatch(actions.selectedSearchResult(text, start, length));\r\n        },\r\n        selectSecondWindowText: (data) => {\r\n            onChangeWindowOpen(true);\r\n            dispatch(actions.selectedText2(data));\r\n        },\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Commentary);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TableContent\":\"TableOfContent---TableContent\"};","import React from \"react\";\r\nimport {\r\n    Box,\r\n    ClickAwayListener,\r\n    Typography,\r\n    Toolbar,\r\n    InputBase,\r\n} from \"components/UI/muiComponent\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"actions\";\r\nimport * as reducers from \"reducers\";\r\n\r\nimport Loader from \"react-loader\";\r\nimport styles from \"./TableOfContent.css\";\r\nimport { styled, alpha } from \"@mui/material/styles\";\r\nimport { Search as SearchIcon } from \"components/UI/muiIcon/\";\r\nimport Commentary from \"./Commentary\";\r\nconst Search = styled(\"div\")(({ theme }) => ({\r\n    position: \"relative\",\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n    \"&:hover\": {\r\n        backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n        marginLeft: theme.spacing(1),\r\n        width: \"auto\",\r\n    },\r\n}));\r\n\r\nconst SearchIconWrapper = styled(\"div\")(({ theme }) => ({\r\n    padding: theme.spacing(0, 2),\r\n    height: \"100%\",\r\n    position: \"absolute\",\r\n    pointerEvents: \"none\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n}));\r\n\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n    color: \"inherit\",\r\n    \"& .MuiInputBase-input\": {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n        transition: theme.transitions.create(\"width\"),\r\n        width: \"100%\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: \"0\",\r\n            cursor: \"pointer\",\r\n            \"&:focus\": {\r\n                width: \"20ch\",\r\n            },\r\n        },\r\n    },\r\n}));\r\n\r\nfunction TableOfContent(props) {\r\n    let data = [\r\n        { Id: 1, Title: \"chapter 1\", segment_id: 1 },\r\n        { Id: 2, Title: \"chapter 2\", segment_id: 400 },\r\n        { Id: 3, Title: \"chapter 3\", segment_id: 3000 },\r\n    ];\r\n    let loaded = data.length > 0 ? true : false;\r\n\r\n    return (\r\n        <Box\r\n            className={styles.TableContent}\r\n            sx={{\r\n                bgcolor: \"heading.main\",\r\n                color: \"text.primary\",\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                paddingInline: 2,\r\n            }}\r\n        >\r\n            <Commentary />\r\n            <Toolbar\r\n                sx={{\r\n                    justifyContent: \"space-between\",\r\n                    paddingLeft: \"0 !important\",\r\n                    margin: 0,\r\n                }}\r\n            >\r\n                <Typography textTransform={\"uppercase\"} component=\"h6\">\r\n                    Table Of Content\r\n                </Typography>\r\n                <Search>\r\n                    <SearchIconWrapper>\r\n                        <SearchIcon />\r\n                    </SearchIconWrapper>\r\n                    <StyledInputBase\r\n                        placeholder=\"Search…\"\r\n                        inputProps={{ \"aria-label\": \"search\" }}\r\n                    />\r\n                </Search>\r\n            </Toolbar>\r\n            {/* <Loader loaded={loaded} /> */}\r\n            <Box>\r\n                {data.map((list, index) => {\r\n                    return (\r\n                        <Box\r\n                            key={\"TableContent-\" + index}\r\n                            sx={{\r\n                                cursor: \"pointer\",\r\n                                width: \"fit-content\",\r\n                                \"&:hover\": {\r\n                                    textDecoration: \"underline\",\r\n                                },\r\n                            }}\r\n                            onClick={() =>\r\n                                props.changeScrollToId({\r\n                                    from: \"table\",\r\n                                    id: list.segment_id,\r\n                                })\r\n                            }\r\n                        >\r\n                            {list.Title}\r\n                        </Box>\r\n                    );\r\n                })}\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {};\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeScrollToId: (payload) =>\r\n            dispatch(actions.changeScrollToId(payload)),\r\n    };\r\n};\r\n\r\nexport default React.memo(\r\n    connect(mapStateToProps, mapDispatchToProps)(TableOfContent)\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"paddingSide\":\"20px\",\"maxWidth\":\"600px\",\"text\":\"Text---text\",\"textFirstRow\":\"Text---textFirstRow\",\"textLine\":\"Text---textLine\",\"textline\":\"Text---textline\",\"limitWidth\":\"Text---limitWidth\",\"textContainer\":\"Text---textContainer\",\"N_annotation\":\"Text---N_annotation\",\"V_annotation\":\"Text---V_annotation\",\"Q_annotation\":\"Text---Q_annotation\",\"Q_annotation_double\":\"Text---Q_annotation_double\",\"P_annotation\":\"Text---P_annotation\",\"selectedAnnotation\":\"Text---selectedAnnotation\",\"removedByAnnotation\":\"Text---removedByAnnotation\",\"insertion\":\"Text---insertion\",\"highlight\":\"Text---highlight\",\"activeHighlight\":\"Text---activeHighlight\",\"lineBreak\":\"Text---lineBreak\",\"pageBreak\":\"Text---pageBreak\",\"selectedRangelight\":\"Text---selectedRangelight\",\"selectedRangeDark\":\"Text---selectedRangeDark\",\"selectedImage\":\"Text---selectedImage\",\"mediaInterval\":\"Text---mediaInterval\"};","// @flow\r\nimport React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport styles from \"./Text.css\";\r\nimport TextSegment from \"lib/TextSegment\";\r\nimport {\r\n    INSERTION_KEY,\r\n    DELETION_KEY,\r\n    PAGE_BREAK_KEY,\r\n    LINE_BREAK_KEY,\r\n} from \"lib/AnnotatedText\";\r\nimport _ from \"lodash\";\r\nimport SegmentedText from \"lib/SegmentedText\";\r\nimport Annotation from \"lib/Annotation\";\r\nimport Witness from \"lib/Witness\";\r\nimport { ANNOTATION_TYPES } from \"lib/Annotation\";\r\nimport type { AnnotationUniqueId } from \"lib/Annotation\";\r\nimport GraphemeSplitter from \"grapheme-splitter\";\r\nimport { find } from \"lodash\";\r\nimport { withTheme } from \"@mui/styles\";\r\n\r\nexport function idForSegment(segment: TextSegment): string {\r\n    return \"s_\" + segment.start;\r\n}\r\n\r\nexport function idForDeletedSegment(segment: TextSegment): string {\r\n    return \"ds_\" + segment.start;\r\n}\r\n\r\nexport function idForInsertion(segment: TextSegment): string {\r\n    return \"i_\" + segment.start;\r\n}\r\n\r\nexport function idForPageBreak(segment: TextSegment): string {\r\n    return \"p_\" + (segment.end + 1);\r\n}\r\n\r\nexport function idForLineBreak(segment: TextSegment): string {\r\n    return \"l_\" + (segment.end + 1);\r\n}\r\n\r\nexport type Props = {\r\n    segmentedText: SegmentedText,\r\n    annotationPositions: { [string]: Annotation[] },\r\n    selectedSegmentId: (id: string) => void,\r\n    activeAnnotations: { [AnnotationUniqueId]: Annotation } | null,\r\n    getBaseAnnotation: (annotation: Annotation) => Annotation,\r\n    selectedAnnotatedSegments: TextSegment[],\r\n    row: number,\r\n    activeAnnotation: Annotation | null,\r\n    searchValue: string | null,\r\n    selectedSearchResult: {\r\n        textId: number,\r\n        start: number,\r\n        length: number,\r\n    } | null,\r\n    searchStringPositions: { [position: number]: [number, number] },\r\n    fontSize?: number,\r\n    activeWitness: Witness,\r\n    changeSyncIdOnClick: () => void,\r\n    changeScrollToId: () => void,\r\n    textAlignmentById: {},\r\n    selectedSourceRange: [],\r\n    selectedTargetRange: [],\r\n    MediaInterval: {},\r\n};\r\n\r\nexport type State = {\r\n    segmentedText: SegmentedText,\r\n};\r\n\r\nimport ReactDOMServer from \"react-dom/server\";\r\nimport PageBreakIcon from \"images/page_break_icon.svg\";\r\nconst PARA_SYMBOL = String.fromCharCode(182);\r\nconst pageBreakIconString = ReactDOMServer.renderToStaticMarkup(\r\n    <PageBreakIcon />\r\n);\r\nclass Text extends React.Component<Props, State> {\r\n    _renderedSegments: TextSegment[] | null;\r\n    _renderedHtml: { __html: string } | null;\r\n    textAlignmentById;\r\n    rangeSelect;\r\n    theme;\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.textAlignmentById = [];\r\n        this.state = {\r\n            segmentedText: props.segmentedText,\r\n        };\r\n        this.textAlignmentById = this.props.textAlignmentById;\r\n        this._renderedSegments = null;\r\n        this._renderedHtml = null;\r\n        this.rangeSelect = [];\r\n        this.theme = props.theme;\r\n    }\r\n    UNSAFE_componentWillReceiveProps(nextProps: Props) {\r\n        this.setState((prevState: State, props: Props) => {\r\n            return {\r\n                ...prevState,\r\n                segmentedText: nextProps.segmentedText,\r\n            };\r\n        });\r\n    }\r\n\r\n    annotationsForSegment(segment: TextSegment): Annotation[] {\r\n        let annotations: Annotation[] = [];\r\n        const foundAnnotations =\r\n            this.props.annotationPositions[String(segment.start)];\r\n        if (foundAnnotations) {\r\n            annotations = foundAnnotations;\r\n        }\r\n        const insertions =\r\n            this.props.annotationPositions[INSERTION_KEY + segment.start] || [];\r\n        const deletions =\r\n            this.props.annotationPositions[DELETION_KEY + segment.start] || [];\r\n        const pageBreaks =\r\n            this.props.annotationPositions[\r\n                PAGE_BREAK_KEY + (segment.end + 1)\r\n            ] || [];\r\n        const lineBreaks =\r\n            this.props.annotationPositions[\r\n                LINE_BREAK_KEY + (segment.end + 1)\r\n            ] || [];\r\n\r\n        return annotations.concat(\r\n            insertions,\r\n            deletions,\r\n            pageBreaks,\r\n            lineBreaks\r\n        );\r\n    }\r\n\r\n    segmentsContainSegment(segments: TextSegment[], segment: TextSegment) {\r\n        for (let i = 0; i < segments.length; i++) {\r\n            let listSegment = segments[i];\r\n            if (\r\n                listSegment.start === segment.start &&\r\n                listSegment.text === segment.text\r\n            ) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    selectedElement(element: Element) {\r\n        if (element.tagName === \"DIV\") {\r\n            this.props.selectedSegmentId(\"\");\r\n            return;\r\n        }\r\n        let sourceRangeSelection = [];\r\n        let targetRangeSelection = [];\r\n        const selection = document.getSelection();\r\n        var clickId = parseInt(element.id.replace(\"s_\", \"\"));\r\n        this.props.changeSyncIdOnClick(clickId);\r\n        if (element?.id.includes(\"s_\") && this.props.condition) {\r\n            this.props.changeScrollToId({ id: null, from: null });\r\n\r\n            let id = parseInt(element.id.replace(\"s_\", \"\"));\r\n            let rangeUnique = find(\r\n                this.textAlignmentById,\r\n                (l) => id >= l.start && id < l.end\r\n            );\r\n            if (rangeUnique) {\r\n                for (let i = rangeUnique.start; i < rangeUnique.end; i++) {\r\n                    sourceRangeSelection.push(i);\r\n                }\r\n                for (let i = rangeUnique.TStart; i < rangeUnique.TEnd; i++) {\r\n                    targetRangeSelection.push(i);\r\n                }\r\n                this.props.changeSelectedRange({\r\n                    source: sourceRangeSelection,\r\n                    target: targetRangeSelection,\r\n                });\r\n            }\r\n        }\r\n\r\n        if (selection && selection.type === \"Range\") {\r\n            return;\r\n        }\r\n        this.props.selectedSegmentId(element.id);\r\n\r\n        if (!element.id) {\r\n            this.props.changeSelectedRange({ source: [], target: [] });\r\n        }\r\n    }\r\n\r\n    generateHtml(renderProps: Props, renderState: State): { __html: string } {\r\n        let segments = renderState.segmentedText.segments;\r\n\r\n        let textLineClass = styles.textLine;\r\n        let segmentHTML = '<p class=\"' + textLineClass + '\">';\r\n        if (segments.length === 0) return { __html: segmentHTML };\r\n\r\n        const insertionClass = styles.insertion;\r\n        const endPosition = segments[segments.length - 1].end + 1;\r\n        if (renderProps.annotationPositions[INSERTION_KEY + endPosition]) {\r\n            const endSegment = new TextSegment(endPosition, \"\");\r\n            segments.push(endSegment);\r\n        }\r\n        if (renderProps.annotationPositions[PAGE_BREAK_KEY + endPosition]) {\r\n            const endSegment = new TextSegment(endPosition, \"\");\r\n            segments.push(endSegment);\r\n        }\r\n        if (renderProps.annotationPositions[LINE_BREAK_KEY + endPosition]) {\r\n            const endSegment = new TextSegment(endPosition, \"\");\r\n            segments.push(endSegment);\r\n        }\r\n\r\n        let activeAnnotations = renderProps.activeAnnotations || {};\r\n\r\n        let highlightClass = styles.highlight;\r\n        let activeHighlightClass = styles.activeHighlight;\r\n        let activeSearchResultEnd = null;\r\n        let processedInactiveInsertions = {};\r\n        for (let i = 0; i < segments.length; i++) {\r\n            let segment = segments[i];\r\n            let classAttribute = \"\";\r\n            let classes = [];\r\n            let annotations = this.annotationsForSegment(segment);\r\n            let deletionText = null;\r\n            let selectedCurrentDeletion = false;\r\n            let selectedCurrentPageBreak = false;\r\n            let selectedCurrentLineBreak = false;\r\n            let lineBreakAnnotation = false;\r\n            let pageBreakAnnotation = null;\r\n\r\n            if (annotations) {\r\n                let activeInsertions = [];\r\n                let inactiveInsertions = [];\r\n                let remainingAnnotations = [];\r\n                let activeDeletions = [];\r\n\r\n                for (let j = 0, len = annotations.length; j < len; j++) {\r\n                    let annotation = annotations[j];\r\n                    if (annotation.isInsertion) {\r\n                        if (annotation.uniqueId in activeAnnotations) {\r\n                            activeInsertions.push(annotation);\r\n                        } else {\r\n                            // Only first inactive insertion at a position will\r\n                            // be shown, so only process first one.\r\n                            // TODO: need to check if there is an active insertion\r\n                            // at the same place. If so, ignore inactive insertion\r\n                            // as they should be shown in the popover.\r\n                            const annotationKey = annotation.start;\r\n                            if (\r\n                                !processedInactiveInsertions.hasOwnProperty(\r\n                                    annotationKey\r\n                                )\r\n                            ) {\r\n                                inactiveInsertions.push(annotation);\r\n                                processedInactiveInsertions[annotationKey] =\r\n                                    annotation;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (annotation.isDeletion) {\r\n                            if (annotation.uniqueId in activeAnnotations) {\r\n                                activeDeletions.push(annotation);\r\n                            }\r\n                        } else if (\r\n                            annotation.type === ANNOTATION_TYPES.pageBreak &&\r\n                            !renderProps.activeWitness.isWorking\r\n                        ) {\r\n                            pageBreakAnnotation = annotation;\r\n                        } else if (\r\n                            annotation.type === ANNOTATION_TYPES.lineBreak &&\r\n                            !renderProps.activeWitness.isWorking\r\n                        ) {\r\n                            lineBreakAnnotation = annotation;\r\n                        } else {\r\n                            remainingAnnotations.push(annotation);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (\r\n                    activeInsertions.length === 0 &&\r\n                    inactiveInsertions.length > 0\r\n                ) {\r\n                    const insertion = inactiveInsertions[0];\r\n                    const insertionId = idForInsertion(segment);\r\n                    let insertionClasses = insertionClass;\r\n                    if (\r\n                        renderProps.activeAnnotation &&\r\n                        renderProps.activeAnnotation.isInsertion &&\r\n                        renderProps.activeAnnotation.start === insertion.start\r\n                    ) {\r\n                        insertionClasses += \" \" + styles.selectedAnnotation;\r\n                    }\r\n\r\n                    segmentHTML +=\r\n                        \"<span id=\" +\r\n                        insertionId +\r\n                        \" key=\" +\r\n                        insertionId +\r\n                        ' class=\"' +\r\n                        insertionClasses +\r\n                        '\">' +\r\n                        insertion.content +\r\n                        \"</span>\";\r\n                }\r\n\r\n                if (activeDeletions.length > 0) {\r\n                    const activeDeletion = activeDeletions[0];\r\n                    const baseAnnotation =\r\n                        renderProps.getBaseAnnotation(activeDeletion);\r\n                    deletionText = baseAnnotation.content;\r\n                    if (\r\n                        renderProps.activeAnnotation &&\r\n                        renderProps.activeAnnotation.isDeletion &&\r\n                        renderProps.activeAnnotation.start ===\r\n                            activeDeletion.start &&\r\n                        renderProps.activeAnnotation.length ===\r\n                            activeDeletion.length &&\r\n                        segment.length === 0\r\n                    ) {\r\n                        selectedCurrentDeletion = true;\r\n                    }\r\n                }\r\n\r\n                if (pageBreakAnnotation) {\r\n                    if (\r\n                        renderProps.activeAnnotation &&\r\n                        renderProps.activeAnnotation.uniqueId ===\r\n                            pageBreakAnnotation.uniqueId\r\n                    ) {\r\n                        selectedCurrentPageBreak = true;\r\n                    }\r\n                }\r\n\r\n                if (lineBreakAnnotation) {\r\n                    if (\r\n                        renderProps.activeAnnotation &&\r\n                        renderProps.activeAnnotation.uniqueId ===\r\n                            lineBreakAnnotation.uniqueId\r\n                    ) {\r\n                        selectedCurrentLineBreak = true;\r\n                    }\r\n                }\r\n                if (\r\n                    remainingAnnotations.length > 0 ||\r\n                    activeInsertions.length > 0\r\n                ) {\r\n                    if (remainingAnnotations.some((l) => l.type === \"P\")) {\r\n                        classes.push(styles.P_annotation);\r\n                    }\r\n                    if (remainingAnnotations.some((l) => l.type === \"Q\")) {\r\n                        var double = remainingAnnotations.filter(\r\n                            (l) => l.type === \"Q\"\r\n                        );\r\n                        if (double.length > 1) {\r\n                            classes.push(styles.Q_annotation_double);\r\n                        }\r\n                        classes.push(styles.Q_annotation);\r\n                    }\r\n                    if (remainingAnnotations.some((l) => l.type === \"N\")) {\r\n                        classes.push(styles.N_annotation);\r\n                    }\r\n                    if (remainingAnnotations.some((l) => l.type === \"V\")) {\r\n                        classes.push(styles.V_annotation);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // It's an insertion at the end of the text, which should have just been added to the html.\r\n            // So break as we don't want anymore segment html adding.\r\n            if (segment.start === endPosition) {\r\n                break;\r\n            }\r\n\r\n            let id = null;\r\n            if (segment.length === 0) {\r\n                id = idForDeletedSegment(segment);\r\n                classes.push(styles.removedByAnnotation);\r\n                if (deletionText) {\r\n                    segment = new TextSegment(segment.start, deletionText);\r\n                }\r\n            } else {\r\n                id = idForSegment(segment);\r\n            }\r\n\r\n            if (\r\n                this.segmentsContainSegment(\r\n                    renderProps.selectedAnnotatedSegments,\r\n                    segment\r\n                ) ||\r\n                selectedCurrentDeletion\r\n            ) {\r\n                classes.push(styles.selectedAnnotation);\r\n            }\r\n\r\n            if (\r\n                renderProps.selectedSourceRange.includes(segment.start) &&\r\n                renderProps.condition\r\n            ) {\r\n                let newClass =\r\n                    renderProps.theme.palette.mode === \"light\"\r\n                        ? styles.selectedRangelight\r\n                        : styles.selectedRangeDark;\r\n                classes.push(newClass);\r\n            }\r\n            if (\r\n                renderProps.selectedMedia.isVideoVisible &&\r\n                renderProps.isPanelLinked\r\n            ) {\r\n                if (\r\n                    renderProps.MediaInterval.source_segment &&\r\n                    renderProps.MediaInterval.source_segment.start <\r\n                        segment.start &&\r\n                    renderProps.MediaInterval.source_segment.end > segment.start\r\n                )\r\n                    classes.push(styles.mediaInterval);\r\n            }\r\n\r\n            if (classes.length > 0) {\r\n                let className = classnames(...classes);\r\n                classAttribute = 'class=\"' + className + '\"';\r\n            }\r\n\r\n            let segmentContent = segment.text;\r\n\r\n            // Add search result highlight if required.\r\n            if (renderProps.searchStringPositions) {\r\n                let segmentStart = segment.start;\r\n                let position = segmentStart;\r\n                segmentContent = \"\";\r\n\r\n                let highlight = highlightClass;\r\n                if (\r\n                    renderProps.selectedSearchResult &&\r\n                    renderProps.selectedSearchResult.start <= position &&\r\n                    renderProps.selectedSearchResult.start +\r\n                        renderProps.selectedSearchResult.length >\r\n                        position\r\n                ) {\r\n                    highlight = activeHighlightClass;\r\n                }\r\n\r\n                for (let j = 0; j < segment.text.length; j++) {\r\n                    let char = segment.text.charAt(j);\r\n                    position = segmentStart + j;\r\n                    if (activeSearchResultEnd) {\r\n                        let [start, end] = activeSearchResultEnd;\r\n                        if (j === 0) {\r\n                            segmentContent +=\r\n                                '<span class=\"' + highlight + '\">';\r\n                        }\r\n                        if (position === end) {\r\n                            segmentContent += char + \"</span>\";\r\n                            activeSearchResultEnd = null;\r\n                        } else if (j === segment.text.length - 1) {\r\n                            segmentContent += char + \"</span>\";\r\n                        } else {\r\n                            segmentContent += char;\r\n                        }\r\n                    } else if (position in renderProps.searchStringPositions) {\r\n                        let [start, end] =\r\n                            renderProps.searchStringPositions[position];\r\n                        segmentContent +=\r\n                            '<span class=\"' + highlight + '\">' + char;\r\n                        if (j === segment.text.length - 1 || position === end) {\r\n                            segmentContent += \"</span>\";\r\n                        }\r\n                        if (position < end) {\r\n                            activeSearchResultEnd = [start, end];\r\n                        }\r\n                    } else {\r\n                        segmentContent += char;\r\n                    }\r\n                }\r\n            }\r\n\r\n            segmentHTML +=\r\n                \"<span id=\" +\r\n                id +\r\n                \" key=\" +\r\n                id +\r\n                \" \" +\r\n                classAttribute +\r\n                \">\" +\r\n                segmentContent +\r\n                \"</span>\";\r\n\r\n            if (pageBreakAnnotation) {\r\n                let pageBreakClasses = [styles.pageBreak];\r\n                if (selectedCurrentPageBreak) {\r\n                    pageBreakClasses.push(styles.selectedAnnotation);\r\n                }\r\n                const pageBreakClassAttribute =\r\n                    ' class=\"' + pageBreakClasses.join(\" \") + '\" ';\r\n                segmentHTML +=\r\n                    \"<span id=\" +\r\n                    idForPageBreak(segment) +\r\n                    \" key=\" +\r\n                    idForPageBreak(segment) +\r\n                    pageBreakClassAttribute +\r\n                    \">\" +\r\n                    pageBreakIconString +\r\n                    \"</span>\";\r\n            }\r\n            if (lineBreakAnnotation) {\r\n                let lineBreakClasses = [styles.lineBreak];\r\n                if (selectedCurrentLineBreak) {\r\n                    lineBreakClasses.push(styles.selectedAnnotation);\r\n                }\r\n                const lineBreakClassAttribute =\r\n                    ' class=\"' + lineBreakClasses.join(\" \") + '\" ';\r\n                segmentHTML +=\r\n                    \"<span id=\" +\r\n                    idForLineBreak(segment) +\r\n                    \" key=\" +\r\n                    idForLineBreak(segment) +\r\n                    lineBreakClassAttribute +\r\n                    \">\" +\r\n                    PARA_SYMBOL +\r\n                    \"</span>\";\r\n\r\n                segmentHTML += '</p><p class=\"' + textLineClass + '\">';\r\n            }\r\n        }\r\n\r\n        this._renderedSegments = segments;\r\n\r\n        segmentHTML += \"</p>\";\r\n        const html = {\r\n            __html: segmentHTML,\r\n        };\r\n        return html;\r\n    }\r\n    shouldComponentUpdate(nextProps: Props, nextState: State) {\r\n        this.textAlignmentById = this.props.textAlignmentById;\r\n\r\n        const renderedHtml = this.generateHtml(nextProps, nextState);\r\n        if (this.props.fontSize !== nextProps.fontSize) {\r\n            return true;\r\n        } else if (\r\n            this._renderedHtml &&\r\n            renderedHtml.__html === this._renderedHtml.__html\r\n        ) {\r\n            return false;\r\n        } else {\r\n            this._renderedHtml = renderedHtml;\r\n            return true;\r\n        }\r\n    }\r\n    render() {\r\n        let classes = [styles.text];\r\n        if (this.props.row === 0) {\r\n            classes.push(styles.textFirstRow);\r\n        }\r\n        // Generate HTML manually as it is much faster when\r\n        // creating large numbers of elements, such as these spans.\r\n        const html = this._renderedHtml\r\n            ? this._renderedHtml\r\n            : this.generateHtml(this.props, this.state);\r\n        if (!this._renderedHtml) {\r\n            this._renderedHtml = html;\r\n        }\r\n        return (\r\n            <div className={styles.textContainer}>\r\n                <div\r\n                    className={classnames(...classes)}\r\n                    id=\"text1\"\r\n                    dangerouslySetInnerHTML={html}\r\n                    style={{\r\n                        fontSize: this.props.fontSize,\r\n                        fontFamily: \"var(--tibetan-fonts)\",\r\n                    }}\r\n                    onClick={(e) => {\r\n                        this.selectedElement(e.target);\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withTheme(Text);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"textDetail\":\"TextDetail---textDetail\",\"textContainer\":\"TextDetail---textContainer\",\"tableContent\":\"TextDetail---tableContent\"};","// @flow\r\nimport React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport Loader from \"react-loader\";\r\nimport AnnotationControlsContainer from \"./AnnotationControlsContainer\";\r\nimport SplitText from \"lib/SplitText\";\r\nimport Annotation from \"lib/Annotation\";\r\nimport Witness from \"lib/Witness\";\r\nimport AnnotatedText from \"lib/AnnotatedText\";\r\nimport lengthSplitter from \"lib/text_splitters/lengthSplitter\";\r\nimport positionSplitter from \"lib/text_splitters/positionSplitter\";\r\nimport headerStyles from \"components/Header/Header.css\";\r\nimport styles from \"./TextDetail.css\";\r\nimport utilStyles from \"css/util.css\";\r\nimport type { TextData } from \"api\";\r\nimport TextSegment from \"lib/TextSegment\";\r\nimport TextDetailHeadingContainer from \"./TextDetailHeadingContainer\";\r\nimport {\r\n    Box,\r\n    ClickAwayListener,\r\n    Divider,\r\n    Slide,\r\n} from \"components/UI/muiComponent\";\r\nimport _ from \"lodash\";\r\nimport TableOfContent from \"./TableOfContent/TableOfContent\";\r\nimport AnnotationPortal from \"./AnnotationProtal\";\r\nimport SplitTextComponent from \"components/TextDetail/SplitText\";\r\n\r\nexport type Props = {\r\n    condition: Boolean,\r\n    paginated: boolean,\r\n    pageImagesVisible: boolean,\r\n    text: TextData | null,\r\n    loading: boolean,\r\n    pageBreaks: number[],\r\n    annotatedText: AnnotatedText,\r\n    annotations: Annotation[],\r\n    activeAnnotations: Annotation[],\r\n    activeAnnotation: Annotation | null,\r\n    didSelectSegmentIds: (segmentIds: string[]) => void,\r\n    selectedSegmentId: (segmentId: string) => void,\r\n    annotationPositions: { [string]: Annotation[] },\r\n    selectedAnnotatedSegments: Array<TextSegment | number>,\r\n    textListVisible: boolean,\r\n    imagesBaseUrl: string,\r\n    selectedWitness: Witness | null,\r\n    selectedSearchResult: {\r\n        textId: number,\r\n        start: number,\r\n        length: number,\r\n    } | null,\r\n    searchValue: string | null,\r\n    fontSize: number,\r\n    isSecondWindowOpen: Boolean,\r\n    imageData: {},\r\n    isPanelLinked: boolean,\r\n    isPanelVisible: Boolean,\r\n    changeSyncIdOnClick: () => void,\r\n    changeScrollToId: () => void,\r\n    changeSelectedImage: () => void,\r\n    closeAnnotation: () => void,\r\n    textAlignment: [],\r\n    textAlignmentById: {},\r\n    selectedWindow: Number,\r\n    changeSelectedWindow: () => void,\r\n    changeSelectedRange: [],\r\n    scrollToId: {},\r\n    selectedSourceRange: [],\r\n    selectedTargetRange: [],\r\n    searchResults: [],\r\n    changeShowTableContent: () => void,\r\n    showTableContent: Boolean,\r\n    imageScrollId: {},\r\n    MediaInterval: {},\r\n    isAnnotating: Boolean,\r\n};\r\n\r\nlet textDetailId = 0;\r\n\r\nclass TextDetail extends React.Component<Props> {\r\n    key: number;\r\n    ref;\r\n    selectedWindow;\r\n    constructor() {\r\n        super();\r\n        this.key = textDetailId++;\r\n        this.ref = React.createRef();\r\n        this.selectedWindow = null;\r\n    }\r\n\r\n    mouseEnter() {\r\n        if (this.selectedWindow === 2 && this.props.text.name)\r\n            this.props.changeSelectedWindow(1);\r\n    }\r\n    componentDidMount() {\r\n        this.ref.current.addEventListener(\r\n            \"mouseenter\",\r\n            this.mouseEnter.bind(this)\r\n        );\r\n    }\r\n    componentDidUpdate() {\r\n        this.selectedWindow = this.props.selectedWindow;\r\n    }\r\n\r\n    render() {\r\n        let text = {\r\n            name: \"\",\r\n        };\r\n        if (this.props.text) {\r\n            text = this.props.text;\r\n        }\r\n        let inlineControls = false;\r\n        let textComponent = null;\r\n        let splitText = null;\r\n        if (\r\n            !this.props.annotatedText ||\r\n            !this.props.text ||\r\n            this.props.loading\r\n        ) {\r\n            textComponent = <div key={this.key} />;\r\n        } else {\r\n            let limitWidth = false;\r\n            let splitter;\r\n            if (this.props.paginated) {\r\n                splitter = positionSplitter(this.props.pageBreaks);\r\n            } else {\r\n                splitter = lengthSplitter(1000, /^།[\\s]+(?!།[\\s]+)/, 2, 5);\r\n            }\r\n\r\n            splitText = new SplitText(this.props.annotatedText, splitter);\r\n\r\n            inlineControls = true;\r\n            textComponent = (\r\n                <SplitTextComponent\r\n                    splitText={splitText}\r\n                    annotations={this.props.annotations}\r\n                    activeAnnotations={this.props.activeAnnotations}\r\n                    activeAnnotation={this.props.activeAnnotation}\r\n                    limitWidth={limitWidth}\r\n                    didSelectSegmentIds={this.props.didSelectSegmentIds}\r\n                    selectedSegmentId={this.props.selectedSegmentId}\r\n                    annotationPositions={this.props.annotationPositions}\r\n                    selectedAnnotatedSegments={\r\n                        this.props.selectedAnnotatedSegments\r\n                    }\r\n                    isAnnotating={this.props.isAnnotating}\r\n                    syncIdOnClick={this.props.syncIdOnClick}\r\n                    textListVisible={this.props.textListVisible}\r\n                    showImages={this.props.pageImagesVisible}\r\n                    imagesBaseUrl={this.props.imagesBaseUrl}\r\n                    selectedWitness={this.props.selectedWitness}\r\n                    key={this.key}\r\n                    selectedSearchResult={this.props.selectedSearchResult}\r\n                    searchValue={this.props.searchValue}\r\n                    fontSize={this.props.fontSize}\r\n                    isSecondWindowOpen={this.props.isSecondWindowOpen}\r\n                    changeScrollToId={this.props.changeScrollToId}\r\n                    changeSyncIdOnClick={this.props.changeSyncIdOnClick}\r\n                    imageData={this.props.imageData}\r\n                    isPanelLinked={this.props.isPanelLinked}\r\n                    selectedImage={this.props.selectedImage}\r\n                    changeSelectedImage={this.props.changeSelectedImage}\r\n                    closeAnnotation={this.props.closeAnnotation}\r\n                    textAlignment={this.props.textAlignment}\r\n                    textAlignmentById={this.props.textAlignmentById}\r\n                    isPanelVisible={this.props.isPanelVisible}\r\n                    scrollToId={this.props.scrollToId}\r\n                    selectedWindow={this.selectedWindow}\r\n                    selectedSourceRange={this.props.selectedSourceRange}\r\n                    selectedTargetRange={this.props.selectedTargetRange}\r\n                    changeSelectedRange={this.props.changeSelectedRange}\r\n                    searchResults={this.props.searchResults}\r\n                    showTableContent={this.props.showTableContent}\r\n                    selectedText={this.props.text}\r\n                    condition={this.props.condition}\r\n                    selectedMedia={this.props.selectedMedia}\r\n                    MediaInterval={this.props.MediaInterval}\r\n                />\r\n            );\r\n        }\r\n        let textComponents = [textComponent];\r\n        return (\r\n            <Box\r\n                sx={{\r\n                    bgcolor: \"heading.main\",\r\n                    color: \"texts.main\",\r\n                }}\r\n                className={classnames(\r\n                    styles.textDetail,\r\n                    utilStyles.flex,\r\n                    utilStyles.flexColumn\r\n                )}\r\n                key={this.key}\r\n                ref={this.ref}\r\n            >\r\n                <TextDetailHeadingContainer />\r\n                <Divider />\r\n                <Loader loaded={!this.props.loading} zIndex={5} />\r\n                <Box\r\n                    style={{\r\n                        display: \"flex\",\r\n                        height: \"100%\",\r\n                        width: \"100%\",\r\n                    }}\r\n                >\r\n                    <Box\r\n                        className={classnames(\r\n                            styles.textContainer,\r\n                            utilStyles.flex\r\n                        )}\r\n                    >\r\n                        {!this.props.loading ? textComponents : <div />}\r\n                    </Box>\r\n\r\n                    <Slide\r\n                        direction=\"left\"\r\n                        in={this.props.showTableContent}\r\n                        container={this.ref.current}\r\n                        unmountOnExit\r\n                        mountOnEnter\r\n                    >\r\n                        <Box\r\n                            sx={{\r\n                                position: \"absolute\",\r\n                                height: \"100%\",\r\n                                minWidth: \"50%\",\r\n                                right: 0,\r\n                            }}\r\n                        >\r\n                            <TableOfContent />\r\n                        </Box>\r\n                    </Slide>\r\n                </Box>\r\n                <AnnotationPortal />\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextDetail;\r\n","// @flow\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Annotation, { ANNOTATION_TYPES } from \"lib/Annotation\";\r\nimport type { AnnotationUniqueId } from \"lib/Annotation\";\r\nimport Source, { WORKING_VERSION_SOURCE_NAME } from \"lib/Source\";\r\nimport Witness from \"lib/Witness\";\r\nimport Text from \"lib/Text\";\r\nimport TextSegment from \"lib/TextSegment\";\r\nimport type { AppState } from \"reducers\";\r\nimport type { AnnotationData, TextData } from \"api\";\r\nimport {\r\n    WORKING_VERSION_ANNOTATION_ID,\r\n    INSERTION_KEY,\r\n    DELETION_KEY,\r\n    PAGE_BREAK_KEY,\r\n    LINE_BREAK_KEY,\r\n} from \"lib/AnnotatedText\";\r\nimport TextDetail from \"components/TextDetail\";\r\nimport {\r\n    changedActiveAnnotation,\r\n    changedActiveTextAnnotation,\r\n    changedWitnessScrollPosition,\r\n} from \"actions\";\r\nimport {\r\n    showPageImages,\r\n    getAnnotationsForWitnessId,\r\n    getActiveAnnotationsForWitnessId,\r\n    getActiveAnnotation,\r\n    getActiveTextAnnotation,\r\n    getBaseWitness,\r\n    getWorkingWitness,\r\n    getSelectedText,\r\n    annotationFromData,\r\n    getAnnotationData,\r\n    getUser,\r\n    getTextListVisible,\r\n    getSelectedTextWitnessId,\r\n    getTextWitnesses,\r\n    getWitness,\r\n    hasLoadedWitnessAnnotations,\r\n    getRemovedDefaultAnnotationsForWitnessId,\r\n    hasLoadedWitnessAppliedAnnotations,\r\n    getScrollPosition,\r\n    getSelectedSearchResult,\r\n    getSearchValue,\r\n    getTextFontSize,\r\n    isSecondWindowOpen,\r\n    isPanelVisible,\r\n    getSelectedSourceRange,\r\n    getSelectedTargetRange,\r\n    getSearchResults,\r\n    getShowTableContent,\r\n    getMediaInterval,\r\n} from \"reducers\";\r\nimport * as reducers from \"reducers\";\r\nimport _ from \"lodash\";\r\n\r\nimport AnnotatedText from \"lib/AnnotatedText\";\r\nimport segmentTibetanText from \"lib/segmentTibetanText\";\r\nimport SegmentedText from \"lib/SegmentedText\";\r\nimport * as actions from \"actions\";\r\nimport * as constants from \"app_constants\";\r\nimport * as TextStore from \"state_helpers/TextStore\";\r\n\r\nconst DISMISS_CONTROLS_ON_CLICK = false;\r\nfunction getInsertionKey(annotation) {\r\n    return [annotation.start, annotation.length].join(\"-\");\r\n}\r\n\r\nlet _posAnnotatedText;\r\nlet _posAnnotations;\r\nlet _positions;\r\nlet _posVersion;\r\nconst getAnnotationPositions = (\r\n    annotatedText: AnnotatedText,\r\n    annotations: Annotation[]\r\n): { [string]: Annotation[] } => {\r\n    if (\r\n        annotatedText === _posAnnotatedText &&\r\n        annotations === _posAnnotations &&\r\n        annotatedText.version === _posVersion\r\n    ) {\r\n        return _positions;\r\n    }\r\n\r\n    let positions = {};\r\n    let activeInsertions = {};\r\n\r\n    for (let i = 0; i < annotations.length; i++) {\r\n        let annotation = annotations[i];\r\n        let [startPos, length] =\r\n            annotatedText.getPositionOfAnnotation(annotation);\r\n        if (startPos == null) {\r\n            continue;\r\n        }\r\n        if (length === 0) {\r\n            if (annotation.isInsertion) {\r\n                // group with any active insertions at the same position\r\n                const activeKey = getInsertionKey(annotation);\r\n                const activeInsertionPositions = activeInsertions[activeKey];\r\n                if (activeInsertionPositions) {\r\n                    activeInsertionPositions.map((pos) =>\r\n                        positions[pos].push(annotation)\r\n                    );\r\n                    continue;\r\n                }\r\n                startPos = INSERTION_KEY + startPos;\r\n            }\r\n            if (annotation.isDeletion && annotation.length > 0) {\r\n                // active deletion\r\n                startPos = DELETION_KEY + startPos;\r\n            }\r\n            if (annotation.type === ANNOTATION_TYPES.pageBreak) {\r\n                startPos = PAGE_BREAK_KEY + startPos;\r\n            }\r\n            if (annotation.type === ANNOTATION_TYPES.lineBreak) {\r\n                startPos = LINE_BREAK_KEY + startPos;\r\n            }\r\n            if (positions[startPos] === undefined) {\r\n                positions[startPos] = [];\r\n            }\r\n            if (positions[startPos].indexOf(annotation) === -1) {\r\n                positions[startPos].push(annotation);\r\n            }\r\n        } else {\r\n            let annotationPositions = [];\r\n            for (let j = startPos; j < startPos + length; j++) {\r\n                if (positions[j] === undefined) {\r\n                    positions[j] = [];\r\n                }\r\n                if (positions[j].indexOf(annotation) === -1) {\r\n                    positions[j].push(annotation);\r\n                }\r\n                annotationPositions.push(j);\r\n            }\r\n            // Store the positions this annotation is displayed at.\r\n            // This can then be used later to group with inactive insertions\r\n            if (annotation.isInsertion) {\r\n                const key = getInsertionKey(annotation);\r\n                activeInsertions[key] = annotationPositions;\r\n            }\r\n        }\r\n    }\r\n\r\n    _posAnnotatedText = annotatedText;\r\n    _posAnnotations = annotations;\r\n    _positions = positions;\r\n    _posVersion = annotatedText.version;\r\n    return positions;\r\n};\r\n\r\nlet _selectedWitness = null;\r\n\r\nconst mapStateToProps = (state) => {\r\n    const user = getUser(state);\r\n    const loading =\r\n        state.data.loadingWitnesses || state.data.loadingAnnotations;\r\n    const textListVisible = getTextListVisible(state);\r\n    const textAlignmentById = reducers.getTextAlignmentById(state);\r\n\r\n    if (loading) {\r\n        return {\r\n            text: null,\r\n            witnesses: null,\r\n            baseWitness: null,\r\n            annotations: null,\r\n            loading: loading,\r\n            paginated: null,\r\n            pageImagesVisible: true,\r\n            annotatedText: null,\r\n            selectedAnnotatedSegments: null,\r\n            annotationPositions: null,\r\n            activeAnnotations: null,\r\n            activeAnnotation: null,\r\n            user: user,\r\n            textListVisible,\r\n            fontSize: constants.DEFAULT_TEXT_FONT_SIZE,\r\n            textAlignmentById,\r\n        };\r\n    }\r\n\r\n    const selectedText = getSelectedText(state);\r\n    let witnesses = {};\r\n    let workingWitness;\r\n    let baseWitness;\r\n    if (selectedText) {\r\n        workingWitness = getWorkingWitness(state, selectedText.id);\r\n        baseWitness = getBaseWitness(state, selectedText.id);\r\n    }\r\n    let selectedSearchResult = getSelectedSearchResult(state);\r\n    let annotationPositions = {};\r\n    let annotations = [];\r\n    let annotatedText = null;\r\n    let activeAnnotation = getActiveTextAnnotation(state);\r\n    let selectedAnnotatedSegments = [];\r\n    let appliedAnnotations = {};\r\n    let pageBreaks = [];\r\n    let imagesBaseUrl = \"\";\r\n    let selectedWitness;\r\n    let searchValue = getSearchValue(state);\r\n    // Whether to show the text's page images\r\n    let paginated = false;\r\n    let pageImagesVisible = false;\r\n    let fontSize = getTextFontSize(state);\r\n    if (\r\n        workingWitness &&\r\n        selectedText &&\r\n        state.data.witnessAnnotationsById.hasOwnProperty(workingWitness.id)\r\n    ) {\r\n        witnesses = getTextWitnesses(state, selectedText.id);\r\n        let selectedWitnessId = getSelectedTextWitnessId(\r\n            state,\r\n            selectedText.id\r\n        );\r\n        if (selectedWitnessId) {\r\n            selectedWitness = getWitness(state, selectedWitnessId);\r\n        }\r\n        if (!selectedWitness) {\r\n            selectedWitness = workingWitness;\r\n            selectedWitnessId = workingWitness.id;\r\n        }\r\n\r\n        if (selectedWitness.id !== workingWitness.id) {\r\n            paginated = true;\r\n            pageImagesVisible = showPageImages(state);\r\n        }\r\n\r\n        annotatedText = TextStore.getWitnessText(state, selectedWitness.id);\r\n\r\n        [appliedAnnotations, annotations] = TextStore.getWitnessAnnotations(\r\n            state,\r\n            selectedWitness,\r\n            workingWitness\r\n        );\r\n\r\n        if (annotatedText) {\r\n            annotationPositions = getAnnotationPositions(\r\n                annotatedText,\r\n                (Object.values(annotations): any)\r\n            );\r\n        }\r\n\r\n        // Get the segments that are part of the current active annotation.\r\n        // These are used by Text to highlight the currently selected segment.\r\n        if (activeAnnotation && annotatedText) {\r\n            // If we've just switched witnesses, make sure we select the\r\n            // correct part of the text by getting a new annotation.\r\n            if (\r\n                !_selectedWitness ||\r\n                _selectedWitness.id !== selectedWitness.id\r\n            ) {\r\n                activeAnnotation = annotatedText.getAnnotation(\r\n                    activeAnnotation.start,\r\n                    activeAnnotation.length\r\n                );\r\n            }\r\n            if (activeAnnotation) {\r\n                selectedAnnotatedSegments =\r\n                    annotatedText.segmentsForAnnotation(activeAnnotation);\r\n            }\r\n        }\r\n        if (selectedWitness && baseWitness && annotatedText) {\r\n            let witnessPageBreaks =\r\n                annotatedText.getAnnotationsOfType(\r\n                    ANNOTATION_TYPES.pageBreak\r\n                ) || {};\r\n            let basePageBreaks = null;\r\n            if (selectedWitness.id !== baseWitness.id) {\r\n                basePageBreaks = getAnnotationsForWitnessId(\r\n                    state,\r\n                    workingWitness.id,\r\n                    ANNOTATION_TYPES.pageBreak,\r\n                    baseWitness.id\r\n                );\r\n            }\r\n\r\n            pageBreaks = getPageBreaks(witnessPageBreaks, basePageBreaks);\r\n\r\n            for (let i = 0, len = pageBreaks.length; i < len; i++) {\r\n                let position = pageBreaks[i];\r\n                let segment = annotatedText.segmentAtOriginalPosition(position);\r\n                if (segment instanceof TextSegment) {\r\n                    pageBreaks[i] = segment.start;\r\n                } else if (segment instanceof Number) {\r\n                    pageBreaks[i] = segment;\r\n                }\r\n            }\r\n\r\n            if (paginated) {\r\n                imagesBaseUrl =\r\n                    \"/static/images/texts/\" +\r\n                    selectedText.name +\r\n                    \"/\" +\r\n                    selectedWitness.source.name +\r\n                    \"/\";\r\n            }\r\n        }\r\n    }\r\n    _selectedWitness = selectedWitness;\r\n    const scrollToId = reducers.getScrollToId(state);\r\n    const isPanelLinked = reducers.isPanelLinked(state);\r\n\r\n    const textAlignment = reducers.getTextAlignment(state);\r\n    const syncIdOnClick = reducers.getSyncIdOnClick(state);\r\n    const selectedWindow = reducers.getSelectedWindow(state);\r\n    const selectedWitness2 = reducers.getSelectedTextWitness2(state);\r\n    let Media = reducers.getMediaData(state);\r\n    const isSecondWindowOpen = reducers.isSecondWindowOpen(state);\r\n    const condition = reducers.getConditionForAlignment(state);\r\n    return {\r\n        text: selectedText,\r\n        witnesses: witnesses,\r\n        workingWitness: workingWitness,\r\n        baseWitness: baseWitness,\r\n        annotations: annotations,\r\n        loading: loading,\r\n        paginated: paginated,\r\n        pageImagesVisible: pageImagesVisible,\r\n        annotatedText: annotatedText,\r\n        selectedAnnotatedSegments: selectedAnnotatedSegments,\r\n        annotationPositions: annotationPositions,\r\n        activeAnnotations: { ...appliedAnnotations },\r\n        activeAnnotation: activeAnnotation,\r\n        pageBreaks: pageBreaks,\r\n        imagesBaseUrl: imagesBaseUrl,\r\n        user: user,\r\n        textListVisible,\r\n        selectedWitness,\r\n        selectedSearchResult,\r\n        searchValue,\r\n        fontSize,\r\n        isSecondWindowOpen,\r\n        isAnnotating: reducers.isAnnotating(state),\r\n        textAlignment,\r\n        textAlignmentById,\r\n        scrollToId,\r\n        syncIdOnClick,\r\n        selectedWindow,\r\n        selectedSourceRange: getSelectedSourceRange(state),\r\n        selectedTargetRange: getSelectedTargetRange(state),\r\n        searchResults: getSearchResults(state, searchValue),\r\n        showTableContent: getShowTableContent(state),\r\n        selectedMedia: Media,\r\n        MediaInterval: getMediaInterval(state),\r\n        condition: condition && isPanelLinked && isSecondWindowOpen,\r\n        isPanelLinked,\r\n    };\r\n};\r\n\r\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\r\n    const { dispatch } = dispatchProps;\r\n    const { annotatedText, annotationPositions } = stateProps;\r\n\r\n    const didSelectSegmentPosition = (segmentPosition, start, length) => {\r\n        let segmentAnnotations = annotationPositions[segmentPosition];\r\n        let segmentVariants = [];\r\n        let segmentPageBreaks = [];\r\n        let segmentLineBreaks = [];\r\n        if (segmentAnnotations) {\r\n            segmentVariants = segmentAnnotations.filter(\r\n                (annotation: Annotation) =>\r\n                    annotation.type === ANNOTATION_TYPES.variant\r\n            );\r\n            segmentPageBreaks = segmentAnnotations.filter(\r\n                (annotation: Annotation) =>\r\n                    annotation.type === ANNOTATION_TYPES.pageBreak\r\n            );\r\n            segmentLineBreaks = segmentAnnotations.filter(\r\n                (annotation: Annotation) =>\r\n                    annotation.type === ANNOTATION_TYPES.lineBreak\r\n            );\r\n        }\r\n        let activeAnnotations = _.intersectionWith(\r\n            segmentVariants.concat(segmentPageBreaks, segmentLineBreaks),\r\n            annotatedText.annotations,\r\n            (a, b) => a.toString() == b.toString()\r\n        );\r\n        let activeAnnotation = null;\r\n        if (activeAnnotations.length > 0) {\r\n            // get any active annotations\r\n            activeAnnotation = activeAnnotations[0];\r\n        } else if (segmentVariants && segmentVariants.length > 0) {\r\n            // get base text annotation for longest annotation highlighted in text\r\n            let longestAvailable = getLongestAnnotation(segmentVariants);\r\n            let [start, textLength] =\r\n                annotatedText.getPositionOfAnnotation(longestAvailable);\r\n            if (longestAvailable && longestAvailable.isInsertion) {\r\n                textLength = 0;\r\n            }\r\n            activeAnnotation = annotatedText.getBaseAnnotation(\r\n                start,\r\n                textLength\r\n            );\r\n        } else {\r\n            // get base annotation of just the segment\r\n            activeAnnotation = annotatedText.getBaseAnnotation(start, length);\r\n        }\r\n\r\n        dispatch(changedActiveTextAnnotation(activeAnnotation));\r\n    };\r\n\r\n    const isInsertion = (id) => {\r\n        return id.indexOf(\"i_\") !== -1;\r\n    };\r\n\r\n    const isDeletion = (id) => {\r\n        return id.indexOf(\"ds_\") !== -1;\r\n    };\r\n\r\n    const isPageBreak = (id) => {\r\n        return id.indexOf(\"p_\") !== -1;\r\n    };\r\n\r\n    const isLineBreak = (id) => {\r\n        return id.indexOf(\"l_\") !== -1;\r\n    };\r\n\r\n    const idFromSegmentId = (id) => {\r\n        let start = 0;\r\n        if (isInsertion(id)) {\r\n            start = id.substr(2);\r\n        } else if (isDeletion(id)) {\r\n            start = id.substr(3);\r\n        } else {\r\n            start = id.substr(2);\r\n        }\r\n\r\n        return start;\r\n    };\r\n\r\n    return {\r\n        ...stateProps,\r\n        ...ownProps,\r\n        didSelectSegmentIds: (segmentIds) => {\r\n            if (segmentIds.length === 0) {\r\n                return;\r\n            }\r\n            let segmentAnnotations = [];\r\n            let segments = [];\r\n            for (let segmentId of segmentIds) {\r\n                if (isDeletion(segmentId) || isInsertion(segmentId)) {\r\n                    continue;\r\n                }\r\n\r\n                let segmentPosition = idFromSegmentId(segmentId);\r\n                let textSegment =\r\n                    annotatedText.segmentedText.segmentAtPosition(\r\n                        segmentPosition\r\n                    );\r\n                segments.push(textSegment);\r\n                const annotations = annotationPositions[textSegment.start];\r\n                if (annotations) {\r\n                    segmentAnnotations = segmentAnnotations.concat(annotations);\r\n                }\r\n            }\r\n            segmentAnnotations = _.uniqWith(\r\n                segmentAnnotations,\r\n                (a, b) => a.toString() == b.toString()\r\n            );\r\n\r\n            let activeAnnotations = _.intersectionWith(\r\n                segmentAnnotations,\r\n                annotatedText.annotations,\r\n                (a, b) => a.toString() == b.toString()\r\n            );\r\n\r\n            const range = getSegmentsRange(\r\n                segments,\r\n                activeAnnotations,\r\n                segmentAnnotations,\r\n                stateProps.annotatedText\r\n            );\r\n            if (!range) {\r\n                console.warn(\r\n                    \"No range for selected segment ids: %o\",\r\n                    segmentIds\r\n                );\r\n                return;\r\n            }\r\n            const baseAnnotation = annotatedText.getBaseAnnotation(\r\n                range.start,\r\n                range.length\r\n            );\r\n            let activeAnnotation = null;\r\n            if (range.annotation) {\r\n                activeAnnotation = range.annotation;\r\n            } else if (activeAnnotations.length > 0) {\r\n                const content = annotatedText.segmentedText\r\n                    .segmentsInRange(range.start, range.length)\r\n                    .reduce((content, segment) => content + segment.text, \"\");\r\n                // TODO: test this when editing non-working edition.\r\n                // Check if getTextWorkingWitness works as required\r\n                if (!stateProps.selectedWitness) {\r\n                    console.log(\r\n                        \"no stateProps.selectedWitness: %o\",\r\n                        stateProps.selectedWitness\r\n                    );\r\n                }\r\n                activeAnnotation = new Annotation(\r\n                    WORKING_VERSION_ANNOTATION_ID,\r\n                    getTextWorkingWitness(stateProps.text),\r\n                    baseAnnotation.start,\r\n                    baseAnnotation.length,\r\n                    content,\r\n                    ANNOTATION_TYPES.variant,\r\n                    stateProps.selectedWitness,\r\n                    stateProps.user\r\n                );\r\n            } else {\r\n                activeAnnotation = baseAnnotation;\r\n            }\r\n            dispatch(changedActiveTextAnnotation(activeAnnotation));\r\n        },\r\n        selectedSegmentId: (segmentId) => {\r\n            let start = idFromSegmentId(segmentId);\r\n            let positionKey = start;\r\n            if (isInsertion(segmentId)) {\r\n                positionKey = INSERTION_KEY + start;\r\n            } else if (isDeletion(segmentId)) {\r\n                positionKey = DELETION_KEY + start;\r\n            } else if (isPageBreak(segmentId)) {\r\n                positionKey = PAGE_BREAK_KEY + start;\r\n            } else if (isLineBreak(segmentId)) {\r\n                positionKey = LINE_BREAK_KEY + start;\r\n            }\r\n\r\n            let segmentAnnotations = annotationPositions[positionKey];\r\n            if (\r\n                (DISMISS_CONTROLS_ON_CLICK && stateProps.activeAnnotation) ||\r\n                segmentId === \"\"\r\n            ) {\r\n                const activeAnnotation = stateProps.activeAnnotation;\r\n\r\n                if (activeAnnotation) {\r\n                    const dismissTextAnnotation =\r\n                        actions.changedActiveTextAnnotation(null);\r\n                    dispatch(dismissTextAnnotation);\r\n                }\r\n            } else {\r\n                if (\r\n                    isInsertion(segmentId) ||\r\n                    isDeletion(segmentId) ||\r\n                    isPageBreak(segmentId) ||\r\n                    isLineBreak(segmentId)\r\n                ) {\r\n                    const length = 0;\r\n                    didSelectSegmentPosition(positionKey, start, length);\r\n                } else {\r\n                    let segmentPosition = Number(idFromSegmentId(segmentId));\r\n                    let textSegment =\r\n                        annotatedText.segmentedText.segmentAtPosition(\r\n                            segmentPosition\r\n                        );\r\n                    if (textSegment) {\r\n                        didSelectSegmentPosition(\r\n                            textSegment.start,\r\n                            textSegment.start,\r\n                            textSegment.length\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        changeScrollToId: (payload) =>\r\n            dispatch(actions.changeScrollToId(payload)),\r\n        changeSyncIdOnClick: (payload) =>\r\n            dispatch(actions.changeSyncIdOnClick(payload)),\r\n        changeSelectedImage: (payload) => {\r\n            dispatch(actions.selectImage(payload));\r\n        },\r\n        changeSelectedWindow: (payload) => {\r\n            dispatch(actions.changeSelectedWindow(payload));\r\n        },\r\n        changeSelectedRange: (payload) => {\r\n            dispatch(actions.changeSelectedRange(payload));\r\n        },\r\n        changeShowTableContent: (payload) => {\r\n            dispatch(actions.showTableContent(payload));\r\n        },\r\n        closeAnnotation: () => {\r\n            const dismissTextAnnotation =\r\n                actions.changedActiveTextAnnotation(null);\r\n            dispatch(dismissTextAnnotation);\r\n        },\r\n    };\r\n};\r\n\r\nconst getPageBreaks = (\r\n    witnessPageBreaks: { [AnnotationUniqueId]: Annotation },\r\n    basePageBreaks: { [AnnotationUniqueId]: AnnotationData } | null\r\n): number[] => {\r\n    let witnessStarts = [];\r\n    _.forIn(witnessPageBreaks, (o) => witnessStarts.push(o.start));\r\n    witnessStarts = witnessStarts.sort((a, b) => a - b);\r\n    if (!basePageBreaks) {\r\n        return witnessStarts;\r\n    }\r\n\r\n    let baseStarts = [];\r\n    _.forIn(basePageBreaks, (o) => baseStarts.push(o.start));\r\n    baseStarts = baseStarts.sort((a, b) => a - b);\r\n    if (witnessStarts.length === 0) {\r\n        return baseStarts;\r\n    }\r\n\r\n    // Only add page breaks if witness has < 90% of base witness breaks.\r\n    // Editions often have differing numbers of words per page so can't\r\n    // be 100%.\r\n    const threshold = 0.9;\r\n    if (witnessStarts.length / baseStarts.length < threshold) {\r\n        let lastWitnessPageStart = witnessStarts[witnessStarts.length - 1];\r\n        for (let i = 0, len = baseStarts.length; i < len; i++) {\r\n            let start = baseStarts[i];\r\n            if (start > lastWitnessPageStart) witnessStarts.push(start);\r\n        }\r\n    }\r\n    return witnessStarts;\r\n};\r\n\r\nconst getTextWorkingWitness = (textData: TextData): Witness => {\r\n    const source = new Source(\r\n        WORKING_VERSION_ANNOTATION_ID,\r\n        WORKING_VERSION_SOURCE_NAME\r\n    );\r\n    const text = new Text(textData.id, textData.name);\r\n    const witness = new Witness(\r\n        WORKING_VERSION_ANNOTATION_ID,\r\n        text,\r\n        source,\r\n        \"\",\r\n        false\r\n    );\r\n\r\n    return witness;\r\n};\r\n\r\nconst getSegmentsRange = (\r\n    segments: TextSegment[],\r\n    activeAnnotations: Annotation[],\r\n    annotations: Annotation[],\r\n    annotatedText: AnnotatedText\r\n): { start: number, length: number, annotation: Annotation | null } | null => {\r\n    if (segments.length === 0) {\r\n        return null;\r\n    }\r\n    let first = segments[0];\r\n    let last = segments[segments.length - 1];\r\n\r\n    let start = first.start;\r\n    let end = last.end;\r\n\r\n    let startAnnotation = null;\r\n    let endAnnotation = null;\r\n    for (let i = 0; i < annotations.length; i++) {\r\n        const annotation = annotations[i];\r\n        let annotationStart,\r\n            annotationLength,\r\n            annotationEnd = null;\r\n        [annotationStart, annotationLength] =\r\n            annotatedText.getPositionOfAnnotation(annotation);\r\n\r\n        if (activeAnnotations.indexOf(annotation) !== -1) {\r\n            if (annotationStart && annotationStart < start) {\r\n                start = annotationStart;\r\n                startAnnotation = annotation;\r\n            }\r\n\r\n            annotationEnd = annotationStart + annotationLength - 1;\r\n\r\n            if (annotationEnd && annotationEnd > end) {\r\n                end = annotationEnd;\r\n                endAnnotation = annotationEnd;\r\n            }\r\n        } else {\r\n            // For inactive annotions - we want to select the whole\r\n            // length of text the annotation refers to.\r\n            annotationEnd = annotationStart + annotationLength - 1;\r\n            if (annotationEnd > end) {\r\n                end = annotationEnd;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Set if the whole range is encompassed by a single annotation\r\n    let rangeAnnotation = null;\r\n    if (startAnnotation && endAnnotation && startAnnotation === endAnnotation) {\r\n        rangeAnnotation = startAnnotation;\r\n    }\r\n\r\n    return {\r\n        start: start,\r\n        length: end - start + 1,\r\n        annotation: rangeAnnotation,\r\n    };\r\n};\r\n\r\nconst getLongestAnnotation = (annotations: Annotation[]): Annotation | null => {\r\n    let longest = null;\r\n    for (let i = 0; i < annotations.length; i++) {\r\n        let annotation = annotations[i];\r\n        if (!longest) {\r\n            longest = annotation;\r\n        } else {\r\n            if (annotation.length > longest.length) {\r\n                longest = annotation;\r\n            }\r\n        }\r\n    }\r\n    return longest;\r\n};\r\n\r\nconst TextDetailContainer = connect(\r\n    mapStateToProps,\r\n    null,\r\n    mergeProps\r\n)(TextDetail);\r\n\r\nexport default TextDetailContainer;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"button_group_menu\":\"TextDetailHeading---button_group_menu\"};","import React, {\r\n    useState,\r\n    useRef,\r\n    useCallback,\r\n    useEffect,\r\n    useMemo,\r\n} from \"react\";\r\nimport styles from \"./TextDetailHeading.css\";\r\nimport SelectVersion from \"./SelectVersion\";\r\nimport _ from \"lodash\";\r\nimport TextList from \"./TextListContainer\";\r\nimport { Close as CloseIcon } from \"components/UI/muiIcon\";\r\nimport {\r\n    Stack,\r\n    Box,\r\n    TextField,\r\n    Button,\r\n    Collapse,\r\n    Divider,\r\n    ButtonGroup,\r\n    IconButton,\r\n} from \"components/UI/muiComponent\";\r\nimport Search from \"./HeaderMenu/Search\";\r\nimport Settings from \"./HeaderMenu/Settings\";\r\nimport TableOfContent from \"./HeaderMenu/TableOfContent\";\r\nimport SearchList from \"./HeaderMenu/SearchList\";\r\n\r\ntype HeaderProps = {\r\n    selectedText: {},\r\n    witnesses: Witness[],\r\n    selectedWitness: Witness,\r\n    onSelectedWitness: () => void,\r\n    user: User,\r\n    activeLocale: string,\r\n    accountOverlayVisible: boolean,\r\n    navigationButtonClicked: () => void,\r\n    menuButtonClicked: () => void,\r\n    textFontSize: Number,\r\n    onChangedFontSize: () => void,\r\n    onChangeWindowOpen: () => void,\r\n    isSecondWindowOpen: boolean,\r\n    changeIsAnnotating: () => void,\r\n    isAnnotating: Boolean,\r\n    searchChanged: () => void,\r\n    searchValue: String,\r\n    changeShowTableContent: () => void,\r\n    searchResults: [],\r\n    onSelectedSearchResult: () => void,\r\n};\r\n\r\nfunction TextDetailHeading(props: HeaderProps) {\r\n    const [findvalue, setfindvalue] = useState(\"\");\r\n    let [showFind, setShowFind] = useState(false);\r\n    let [visible, setVisible] = useState(false);\r\n    const headingRef = useRef();\r\n    const inputRef = useRef();\r\n    const handleListItemClick = (id) => {\r\n        props.changeSelectSyncId(id);\r\n    };\r\n    const debouncedSearch = React.useRef(\r\n        _.debounce((s) => {\r\n            props.searchChanged(s);\r\n        }, 1000)\r\n    ).current;\r\n    const handleSearch = useCallback(\r\n        (e) => {\r\n            e.preventDefault();\r\n            debouncedSearch(findvalue);\r\n            setVisible(true);\r\n        },\r\n        [findvalue]\r\n    );\r\n    const handleWindowSearch = useCallback(() => {\r\n        if (showFind === false) debouncedSearch(null);\r\n        setShowFind(!showFind);\r\n    }, [showFind]);\r\n\r\n    useEffect(() => {\r\n        if (showFind === true) {\r\n            inputRef.current.focus();\r\n        }\r\n        if (showFind === false) debouncedSearch(null);\r\n    }, [showFind]);\r\n\r\n    const closeSearchItemBox = useCallback(() => {\r\n        setVisible(false);\r\n        debouncedSearch(null);\r\n        setfindvalue(\"\");\r\n    }, []);\r\n\r\n    let condition = useMemo(\r\n        () =>\r\n            _.isObject(props.searchResults) &&\r\n            props.searchResults.hasOwnProperty(props.selectedText.id),\r\n        [props.searchResults, props.selectedText]\r\n    );\r\n    let results = condition\r\n        ? props.searchResults[props.selectedText.id].results\r\n        : [];\r\n    return (\r\n        <Stack\r\n            ref={headingRef}\r\n            direction=\"column\"\r\n            spacing={1}\r\n            sx={{\r\n                paddingInline: { md: 1, xs: 0 },\r\n                paddingBlock: { md: 1, xs: 0 },\r\n                bgcolor: \"heading.main\",\r\n                color: \"text.primary\",\r\n            }}\r\n        >\r\n            <Stack direction=\"row\" spacing={1} justifyContent=\"space-between\">\r\n                <Box\r\n                    sx={{\r\n                        display: \"flex\",\r\n                        gap: { md: 2, sx: 0 },\r\n                        flexDirection: { md: \"row\", xs: \"column\" },\r\n                    }}\r\n                >\r\n                    <TextList />\r\n                    <SelectVersion\r\n                        witnesses={props.witnesses}\r\n                        activeWitness={props.selectedWitness}\r\n                        onSelectedWitness={props.onSelectedWitness}\r\n                        user={props.user}\r\n                    />\r\n                </Box>\r\n\r\n                <ButtonGroup\r\n                    size=\"small\"\r\n                    sx={{\r\n                        position: \"relative\",\r\n                        display: \"flex\",\r\n                        height: \"fit-content\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                        width: \"fit-content\",\r\n                        border: (theme) => `1px solid ${theme.palette.divider}`,\r\n                        borderRadius: 1,\r\n                        bgcolor: \"background.paper\",\r\n                        color: \"text.secondary\",\r\n                        \"& svg\": {\r\n                            m: 1,\r\n                        },\r\n                        \"& hr\": {\r\n                            mx: 0.5,\r\n                        },\r\n                    }}\r\n                    className={styles.button_group_menu}\r\n                >\r\n                    <Divider orientation=\"vertical\" variant=\"middle\" flexItem />\r\n                    <Search handleWindowSearch={handleWindowSearch} />\r\n                    <Settings\r\n                        textFontSize={props.textFontSize}\r\n                        onChangedFontSize={props.onChangedFontSize}\r\n                        onExport={props.onExport}\r\n                    />\r\n                    <TableOfContent\r\n                        changeShowTableContent={props.changeShowTableContent}\r\n                        showTableContent={props.showTableContent}\r\n                    />\r\n                </ButtonGroup>\r\n            </Stack>\r\n\r\n            <Collapse in={showFind} mountOnEnter unmountOnExit>\r\n                <form onSubmit={handleSearch}>\r\n                    <Stack direction=\"row\" spacing={2} position=\"relative\">\r\n                        <TextField\r\n                            hiddenLabel\r\n                            id=\"filled-hidden-label-small\"\r\n                            inputProps={{\r\n                                style: {\r\n                                    height: 25,\r\n                                    padding: \"0 14px\",\r\n                                },\r\n                            }}\r\n                            style={{ height: 25, flex: 1 }}\r\n                            fullWidth\r\n                            inputRef={inputRef}\r\n                            value={findvalue}\r\n                            onChange={(e) => setfindvalue(e.target.value)}\r\n                        />\r\n\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            onClick={handleSearch}\r\n                            style={{ height: 25 }}\r\n                        >\r\n                            Search\r\n                        </Button>\r\n\r\n                        {props.searchResults && visible && (\r\n                            <Box\r\n                                sx={{\r\n                                    position: \"absolute\",\r\n                                    top: 35,\r\n                                    right: 0,\r\n                                    zIndex: 1,\r\n                                    bgcolor: \"heading.main\",\r\n                                    height: 350,\r\n                                    width: 350,\r\n                                    boxShadow: 3,\r\n                                    overflowX: \"hidden\",\r\n                                    boxShadow: 3,\r\n                                    display:\r\n                                        results.length === 0 ? \"none\" : \"block\",\r\n                                }}\r\n                            >\r\n                                {condition && results.length > 0 && (\r\n                                    <SearchList\r\n                                        onSelectedSearchResult={\r\n                                            props.onSelectedSearchResult\r\n                                        }\r\n                                        searchValue={props.searchValue}\r\n                                        results={results}\r\n                                        selectedText={props.selectedText}\r\n                                    />\r\n                                )}\r\n                                <IconButton\r\n                                    aria-label=\"closeButton\"\r\n                                    onClick={closeSearchItemBox}\r\n                                    size=\"small\"\r\n                                    sx={{\r\n                                        right: 15,\r\n                                        top: 0,\r\n                                        position: \"absolute\",\r\n                                    }}\r\n                                >\r\n                                    <CloseIcon fontSize=\"inherit\" />\r\n                                </IconButton>\r\n                            </Box>\r\n                        )}\r\n                    </Stack>\r\n                </form>\r\n            </Collapse>\r\n        </Stack>\r\n    );\r\n}\r\n\r\nexport default React.memo(TextDetailHeading);\r\n","// @flow\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport TextDetailHeading from \"./TextDetailHeading\";\r\nimport * as actions from \"actions\";\r\nimport * as reducers from \"reducers\";\r\nimport type { AppState } from \"reducers\";\r\n\r\nconst mapStateToProps = (state: AppState): {} => {\r\n    const selectedText = reducers.getSelectedText(state);\r\n    const selectedText2 = reducers.getSelectedText2(state);\r\n    let witnesses = [];\r\n    let exportingWitness = false;\r\n    let selectedWitness;\r\n    let selectedWitness2;\r\n\r\n    if (selectedText) {\r\n        witnesses = reducers.getTextWitnesses(state, selectedText.id);\r\n        const selectedWitnessId = reducers.getSelectedTextWitnessId(\r\n            state,\r\n            selectedText.id\r\n        );\r\n        if (selectedWitnessId) {\r\n            selectedWitness = reducers.getWitness(state, selectedWitnessId);\r\n            exportingWitness = reducers.getExportingWitness(\r\n                state,\r\n                selectedWitnessId\r\n            );\r\n        } else {\r\n            selectedWitness = reducers.getWorkingWitness(\r\n                state,\r\n                selectedText.id\r\n            );\r\n        }\r\n    }\r\n\r\n    if (selectedText2) {\r\n        // witnesses = reducers.getTextWitnesses(state, selectedText2.id);\r\n        const selectedWitnessId2 = reducers.getSelectedTextWitnessId2(\r\n            state,\r\n            selectedText2.id\r\n        );\r\n        if (selectedWitnessId2) {\r\n            selectedWitness2 = reducers.getWitness2(state, selectedWitnessId2);\r\n        } else {\r\n            selectedWitness2 = reducers.getWorkingWitness2(\r\n                state,\r\n                selectedText2.id\r\n            );\r\n        }\r\n    }\r\n\r\n    let textFontSize = reducers.getTextFontSize(state);\r\n    let searchValue = reducers.getSearchValue(state);\r\n    return {\r\n        witnesses,\r\n        selectedText,\r\n        selectedText2,\r\n        selectedWitness,\r\n        selectedWitness2,\r\n        textFontSize,\r\n        exportingWitness,\r\n        searchValue,\r\n        showTableContent: reducers.getShowTableContent(state),\r\n        searchResults: reducers.getSearchResults(state, searchValue),\r\n    };\r\n};\r\n\r\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\r\n    const navigationButtonClicked = () => {\r\n        dispatchProps.dispatch(\r\n            actions.changedTextListVisible(!stateProps.textListIsVisible)\r\n        );\r\n    };\r\n\r\n    const { dispatch } = dispatchProps;\r\n    const { selectedText } = stateProps;\r\n\r\n    return {\r\n        ...ownProps,\r\n        ...stateProps,\r\n        navigationButtonClicked,\r\n        onSelectedWitness: (witness: Witness) => {\r\n            dispatch(\r\n                actions.selectedTextWitness(selectedText?.id, witness?.id)\r\n            );\r\n        },\r\n        onChangedFontSize: (fontSize: number) => {\r\n            dispatch(actions.changedTextFontSize(fontSize));\r\n        },\r\n        onChangeWindowOpen: (data: boolean) => {\r\n            dispatch(actions.toggleSecondWindow(data));\r\n        },\r\n        onExport: () => {\r\n            dispatch(\r\n                actions.exportWitness(stateProps.selectedWitness.id, \"docx\")\r\n            );\r\n        },\r\n        navigationButtonClicked: () => {\r\n            dispatch(\r\n                actions.changedTextListVisible(!stateProps.textListIsVisible)\r\n            );\r\n        },\r\n\r\n        changeIsAnnotating: (payload) => {\r\n            dispatch(actions.changeIsAnnotating(payload));\r\n            if (payload === false) {\r\n                const dismissTextAnnotation =\r\n                    actions.changedActiveTextAnnotation(null);\r\n                dispatch(dismissTextAnnotation);\r\n                dispatch(actions.changedActiveTextAnnotation(null));\r\n            }\r\n        },\r\n        searchChanged: (searchTerm: string) => {\r\n            dispatch(actions.changedSearchValue(searchTerm));\r\n        },\r\n        changeShowTableContent: (payload) => {\r\n            dispatch(actions.showTableContent(payload));\r\n        },\r\n    \r\n          onSelectedSearchResult: (\r\n            text: api.TextData,\r\n            start: number,\r\n            length: number,\r\n            selectedText: api.TextData | null\r\n        ) => {\r\n            if (!selectedText || selectedText.id !== text.id) {\r\n                dispatch(\r\n                    batchActions([\r\n                        actions.selectedSearchResult(text.id, start, length),\r\n                        actions.selectedText(text),\r\n                    ])\r\n                );\r\n            } else {\r\n                dispatch(actions.selectedSearchResult(text.id, start, length));\r\n            }\r\n        },\r\n    };\r\n};\r\n\r\nconst TextDetailHeadingContainer = connect(\r\n    mapStateToProps,\r\n    null,\r\n    mergeProps\r\n)(TextDetailHeading);\r\n\r\nexport default TextDetailHeadingContainer;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textlist\":\"TextList---textlist\",\"open\":\"TextList---open\"};","import React, {\r\n    useState,\r\n    useRef,\r\n    useCallback,\r\n    useMemo,\r\n    useEffect,\r\n} from \"react\";\r\nimport {\r\n    List,\r\n    AutoSizer,\r\n    CellMeasurer,\r\n    CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport classname from \"classnames\";\r\nimport styles from \"./TextList.css\";\r\nimport {\r\n    TextField,\r\n    ClickAwayListener,\r\n    Box,\r\n    Typography,\r\n    Button,\r\n    Grow,\r\n} from \"components/UI/muiComponent\";\r\nimport addShay from \"lib/addTibetanShay\";\r\nimport { filter } from \"lodash\";\r\nfunction TextList(props) {\r\n    const temptext = useRef(props.texts);\r\n    const [textslist, setTextList] = useState(temptext.current);\r\n    const [filterValue, setFilterValue] = useState(null);\r\n    const onSelectedText = props.onSelectedText;\r\n    const selectedText = props.selectedText;\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    let selected = selectedText?.name;\r\n    const cache = useRef(\r\n        new CellMeasurerCache({\r\n            fixedHeight: true,\r\n            defaultHeight: 40,\r\n        })\r\n    );\r\n\r\n    let classes = [styles.textlist];\r\n    useEffect(() => {\r\n        let temp = [];\r\n        if (filterValue === \"\") {\r\n            setTextList([...temptext.current]);\r\n        }\r\n        if (filterValue !== null && filterValue !== \"\") {\r\n            temp = temptext.current.filter((val) => {\r\n                return val.name.includes(filterValue);\r\n            });\r\n            setTextList([...temp]);\r\n        }\r\n    }, [filterValue]);\r\n\r\n    const handleClick = () => {\r\n        setIsOpen((prev) => !prev);\r\n        if (isOpen === false) classes.push(styles.open);\r\n    };\r\n    const handleChange = (e) => {\r\n        let value = e.target.value;\r\n        setFilterValue(value);\r\n    };\r\n\r\n    const rowRenderer = React.useCallback(\r\n        ({ key, index, style, parent }) => {\r\n            let data = textslist[index];\r\n            return (\r\n                <CellMeasurer\r\n                    key={`optionvalues-${key}`}\r\n                    cache={cache.current}\r\n                    parent={parent}\r\n                    columnIndex={0}\r\n                    rowIndex={index}\r\n                >\r\n                    <div\r\n                        style={style}\r\n                        onClick={() => {\r\n                            setIsOpen(false);\r\n                            onSelectedText(data);\r\n                        }}\r\n                    >\r\n                        <Box\r\n                            sx={{\r\n                                overflow: \"hidden\",\r\n                                textOverflow: \"ellipsis\",\r\n                                width: \"13rem\",\r\n                                paddingLeft: 2,\r\n                                fontSize: {\r\n                                    lg: 12,\r\n                                    md: 11,\r\n                                    sm: 10,\r\n                                    xs: 10,\r\n                                },\r\n                                color: \"text.primary\",\r\n                            }}\r\n                            component=\"div\"\r\n                        >\r\n                            <Typography noWrap={true}>\r\n                                {addShay(data.name)}\r\n                            </Typography>\r\n                        </Box>\r\n                    </div>\r\n                </CellMeasurer>\r\n            );\r\n        },\r\n        [textslist]\r\n    );\r\n    return (\r\n        <ClickAwayListener onClickAway={() => setIsOpen(false)}>\r\n            <div style={{ position: \"relative\", marginLeft: 10 }}>\r\n                <Button\r\n                    onClick={handleClick}\r\n                    component=\"div\"\r\n                    variant=\"outlined\"\r\n                    sx={{\r\n                        textOverflow: \"ellipsis\",\r\n                        width: \"10rem\",\r\n                        height: \"100%\",\r\n                        color: \"text.primary\",\r\n                    }}\r\n                >\r\n                    <Typography noWrap={true}>\r\n                        {selected ? selected : \"select Text here\"}\r\n                    </Typography>\r\n                </Button>\r\n\r\n                <Grow in={isOpen}>\r\n                    <Box\r\n                        className={classname(classes)}\r\n                        sx={{\r\n                            position: \"absolute\",\r\n                            bgcolor: \"heading.main\",\r\n                            zIndex: 1,\r\n                        }}\r\n                    >\r\n                        <TextField\r\n                            onChange={handleChange}\r\n                            id=\"standard-basic\"\r\n                            label=\"Search\"\r\n                            variant=\"standard\"\r\n                            style={{ width: \"100%\" }}\r\n                        />\r\n                        <AutoSizer>\r\n                            {({ width, height }) => (\r\n                                <List\r\n                                    width={width}\r\n                                    height={height}\r\n                                    rowHeight={30}\r\n                                    deferredMeasurementCache={cache.current}\r\n                                    rowCount={textslist.length}\r\n                                    rowRenderer={rowRenderer}\r\n                                />\r\n                            )}\r\n                        </AutoSizer>\r\n                    </Box>\r\n                </Grow>\r\n            </div>\r\n        </ClickAwayListener>\r\n    );\r\n}\r\n\r\nexport default React.memo(TextList);\r\n","// @flow\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport TextList from \"./TextList\";\r\nimport * as actions from \"actions\";\r\nimport { getSelectedText } from \"reducers\";\r\nimport type { AppState } from \"reducers\";\r\nimport * as api from \"api\";\r\nimport * as reducers from \"reducers\";\r\nimport { batchActions } from \"redux-batched-actions\";\r\nimport { reduce } from \"lodash\";\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    // TODO: display search results or spinner depending on when anything\r\n    // returned\r\n    let texts = reducers.getTexts(state);\r\n    let selectedText = reducers.getSelectedText(state);\r\n    return {\r\n        texts,\r\n        selectedText,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSelectedText: (text: api.TextData) => {\r\n            dispatch(actions.selectedText(text));\r\n        },\r\n    };\r\n};\r\n\r\nconst TextListContainer = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TextList);\r\n\r\nexport default React.memo(TextListContainer);\r\n","export { default } from \"./TextDetail\";\r\n","// @flow\r\nimport * as React from \"react\";\r\nimport GraphemeSplitter from \"grapheme-splitter\";\r\nimport reactStringReplace from \"react-string-replace\";\r\n\r\ntype Props = {\r\n    string: string,\r\n    highlightClass: string,\r\n    stringClass?: string,\r\n    searchTerm?: string\r\n};\r\n\r\nexport default class HighlightedString extends React.Component<Props> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const string = this.props.string;\r\n        let nameHtml = string;\r\n        let stringClass = this.props.stringClass || \"\";\r\n        if (this.props.searchTerm) {\r\n            const searchTerm = this.props.searchTerm;\r\n            const splitter = new GraphemeSplitter();\r\n            const graphemes = splitter.splitGraphemes(string);\r\n            const start = string.indexOf(searchTerm);\r\n            const end = start + searchTerm.length;\r\n            let position = 0;\r\n            let foundGraphemes = \"\";\r\n            if (start > -1) {\r\n                for (let i = 0; i < graphemes.length; i++) {\r\n                    let grapheme = graphemes[i];\r\n                    if (position >= start && position < end) {\r\n                        foundGraphemes += grapheme;\r\n                    }\r\n                    position += grapheme.length;\r\n                }\r\n            }\r\n            if (foundGraphemes.length > 0) {\r\n                nameHtml = reactStringReplace(\r\n                    string,\r\n                    foundGraphemes,\r\n                    (match, i) => (\r\n                        <span className={this.props.highlightClass} key={`highlight-${i}`}>\r\n                            {match}\r\n                        </span>\r\n                    )\r\n                );\r\n            }\r\n        }\r\n        return <span className={stringClass}>{nameHtml}</span>;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Search as SearchIcon } from \"components/UI/muiIcon\";\r\nimport { IconButton } from \"components/UI/muiComponent\";\r\n\r\nfunction Search({ handleWindowSearch }) {\r\n    return (\r\n        <IconButton size=\"small\" variant=\"text\" onClick={handleWindowSearch}>\r\n            <SearchIcon />\r\n        </IconButton>\r\n    );\r\n}\r\n\r\nexport default Search;\r\n","import React, { useRef } from \"react\";\r\nimport {\r\n    AutoSizer,\r\n    CellMeasurer,\r\n    CellMeasurerCache,\r\n    List,\r\n} from \"react-virtualized\";\r\nimport HighlightedString from \"./HighlightedString\";\r\nimport styles from \"./SearchStyle.css\";\r\n\r\nfunction SearchList(props) {\r\n    const { onSelectedSearchResult, searchValue, results, selectedText } = props;\r\n    let listRef = useRef();\r\n    let cache = useRef(\r\n        new CellMeasurerCache({\r\n            fixedWidth: true,\r\n            defaultHeight: 100,\r\n        })\r\n    );\r\n    let rowRenderer = ({ key, index, parent, style }) => {\r\n        let result = results[index];\r\n        return (\r\n            <CellMeasurer\r\n                key={`listkeys2-${key}`}\r\n                cache={cache.current}\r\n                parent={parent}\r\n                columnIndex={0}\r\n                rowIndex={index}\r\n            >\r\n                <div style={style}>\r\n                    {results.length > 0 && (\r\n                        <div\r\n                            className={styles.searchListItem}\r\n                            onClick={() => onSelectedSearchResult(\r\n                                selectedText,\r\n                                result[0],\r\n                                searchValue.length,\r\n                                selectedText\r\n                            )}\r\n                        >\r\n                            <HighlightedString\r\n                                string={result[1]}\r\n                                highlightClass={styles.highlight}\r\n                                searchTerm={searchValue}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </CellMeasurer>\r\n        );\r\n    };\r\n\r\n    if (!results) return null;\r\n    return (\r\n        <>\r\n            <AutoSizer>\r\n                {({ height, width }) => (\r\n                    <List\r\n                        ref={listRef}\r\n                        height={height}\r\n                        rowCount={results?.length}\r\n                        rowHeight={cache.current.rowHeight}\r\n                        deferredMeasurementCache={cache.current}\r\n                        rowRenderer={rowRenderer}\r\n                        width={width}\r\n                        overscanRowCount={1}\r\n                    ></List>\r\n                )}\r\n            </AutoSizer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SearchList;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"highlight\":\"SearchStyle---highlight\",\"searchListItem\":\"SearchStyle---searchListItem\"};","import React, { useEffect, useState } from \"react\";\r\nimport WrenchIcon from \"images/wrench.svg\";\r\nimport useLocalStorage from \"components/utility/useLocalStorage\";\r\nimport FontContainer from \"components/textDetail/fontSize\";\r\n\r\nimport { Check as CheckIcon } from \"components/UI/muiIcon\";\r\nimport {\r\n    IconButton,\r\n    MenuList,\r\n    MenuItem,\r\n    Divider,\r\n    Grow,\r\n    Box,\r\n    ClickAwayListener,\r\n} from \"components/UI/muiComponent\";\r\nimport { FONT_LIST } from \"app_constants\";\r\n\r\nfunction Settings(props) {\r\n    let [showOption, setShowOption] = useState(false);\r\n    let [fontSelect, setFontSelect] = useLocalStorage(\r\n        \"WindowTwoFont\",\r\n        \"Tibetan\"\r\n    );\r\n    useEffect(() => {\r\n        document.body.style.setProperty(\"--tibetan-fonts2\", fontSelect);\r\n    }, []);\r\n    const handleClick = () => {\r\n        setShowOption((prev) => !prev);\r\n    };\r\n    const handlefont = (value) => {\r\n        setFontSelect(value);\r\n        document.body.style.setProperty(\"--tibetan-fonts2\", `${value}`);\r\n        setTimeout(() => {\r\n            window.dispatchEvent(new Event(\"resize\"));\r\n        }, 1000);\r\n        setShowOption(false);\r\n    };\r\n    return (\r\n        <ClickAwayListener onClickAway={() => setShowOption(false)}>\r\n            <Box position=\"relative\">\r\n                <IconButton onClick={handleClick} size=\"small\" variant=\"text\">\r\n                    <WrenchIcon height={20} width={20} fill=\"currentColor\" />\r\n                </IconButton>\r\n                <Grow in={showOption}>\r\n                    <MenuList\r\n                        dense\r\n                        sx={{\r\n                            position: \"absolute\",\r\n                            right: 0,\r\n                            zIndex: 2,\r\n                            top: 40,\r\n                            bgcolor: \"heading.main\",\r\n                        }}\r\n                    >\r\n                        <FontContainer\r\n                            fontSize={props.textFontSize}\r\n                            onChange={props.onChangedFontSize}\r\n                        />\r\n                        <Divider />\r\n                        <FontSelection\r\n                            selectFont={handlefont}\r\n                            selectedfont={fontSelect}\r\n                        />\r\n                        <MenuItem onClick={() => props.onExport()}>\r\n                            Export Document\r\n                            {props.exportingWitness && <CheckIcon />}\r\n                        </MenuItem>\r\n                    </MenuList>\r\n                </Grow>\r\n            </Box>\r\n        </ClickAwayListener>\r\n    );\r\n}\r\n\r\nexport default Settings;\r\n\r\nconst FontSelection = ({ selectFont, selectedfont }) => {\r\n    let fontAvailable = FONT_LIST || [];\r\n\r\n    return (\r\n        <Box textAlign={\"center\"}>\r\n            <span>Font:</span>{\" \"}\r\n            <select\r\n                onChange={(e) => selectFont(e.target.value)}\r\n                value={selectedfont}\r\n            >\r\n                {fontAvailable.map((font, index) => {\r\n                    return (\r\n                        <option key={index + \"-fontselect\"} value={font}>\r\n                            {font}\r\n                        </option>\r\n                    );\r\n                })}\r\n            </select>\r\n        </Box>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { IconButton } from \"components/UI/muiComponent\";\r\nimport { Menu as MenuIcon, Clear as ClearIcon } from \"components/UI/muiIcon\";\r\n\r\nfunction TableOfContent(props) {\r\n    const handleClick = () => {\r\n        props.changeShowTableContent(!props.showTableContent);\r\n    };\r\n    return (\r\n        <React.Fragment key=\"right\">\r\n            <IconButton onClick={handleClick}>\r\n                {props.showTableContent ? <ClearIcon /> : <MenuIcon />}\r\n            </IconButton>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default TableOfContent;\r\n","// @flow\r\nimport React, { useState, useEffect, memo, useLayoutEffect } from \"react\";\r\nimport _ from \"lodash\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport styles from \"components/TextDetail/SelectVersion.css\";\r\nimport Witness from \"lib/Witness\";\r\nimport { NativeSelect } from \"components/UI/muiComponent\";\r\n\r\nexport type Props = {\r\n    witnesses: Witness[],\r\n    activeWitness: Witness | null,\r\n    onSelectedWitness: (witness: Witness) => void,\r\n    user: {},\r\n};\r\n\r\nconst SelectVersion = (props: Props) => {\r\n    let witnesses = [];\r\n    let tabName = \"\";\r\n    let r = \"\";\r\n    let classes = [];\r\n    if (props.witnesses) {\r\n        witnesses = props.witnesses.map((witness) => witness);\r\n        if (props.activeWitness)\r\n            r = props.witnesses.findIndex(\r\n                (l) => l.id === props.activeWitness.id\r\n            );\r\n        witnesses.sort((a, b) => {\r\n            if (a.isWorking) {\r\n                return -1;\r\n            }\r\n            if (b.isWorking) {\r\n                return 1;\r\n            }\r\n            if (a.isBase) {\r\n                return -1;\r\n            }\r\n            if (b.isBase) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n        witnesses = witnesses.sort((a, b) => a.id - b.id);\r\n    }\r\n\r\n    const handleChangeWitness = (e) => {\r\n        if (!_.isEmpty(witnesses)) {\r\n            props.onSelectedWitness(witnesses[e.target.value]);\r\n        }\r\n    };\r\n\r\n    if (_.isEmpty(witnesses) && !props.activeWitness) return null;\r\n\r\n    return (\r\n        <NativeSelect\r\n            onChange={handleChangeWitness}\r\n            className={styles.selectVersion}\r\n            value={r}\r\n            label=\"Version2\"\r\n            classes={{\r\n                root: styles.selectEmpty,\r\n                select: styles.selectOptions,\r\n            }}\r\n        >\r\n            {witnesses.map((witness, key) => {\r\n                if (witness.id === props.activeWitness?.id)\r\n                    classes.push(styles.selected);\r\n                tabName = witness.source.name;\r\n\r\n                if (witness.isWorking) {\r\n                    tabName =\r\n                        props.intl.locale === \"en\"\r\n                            ? props.user.name === \"User\"\r\n                                ? \"Working\"\r\n                                : \"My Edition\"\r\n                            : \"མཉམ་འབྲེལ་པར་མ།\";\r\n                }\r\n\r\n                return (\r\n                    <option\r\n                        key={`versionSelect2-${key}`}\r\n                        value={key}\r\n                        className={styles.selectOptions}\r\n                    >\r\n                        {tabName}\r\n                    </option>\r\n                );\r\n            })}\r\n        </NativeSelect>\r\n    );\r\n};\r\n\r\nexport default memo(injectIntl(SelectVersion));\r\n","// @flow\r\nimport * as React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { AutoSizer } from \"react-virtualized/dist/es/AutoSizer\";\r\nimport { List } from \"react-virtualized\";\r\nimport {\r\n    CellMeasurer,\r\n    CellMeasurerCache,\r\n} from \"react-virtualized/dist/es/CellMeasurer\";\r\nimport \"react-virtualized/styles.css\";\r\nimport Text from \"./Text\";\r\nimport SplitText from \"lib/SplitText\";\r\nimport styles from \"components/TextDetail/SplitText.css\";\r\nimport _, { split } from \"lodash\";\r\nimport TextSegment from \"lib/TextSegment\";\r\nimport Witness from \"lib/Witness\";\r\nimport GraphemeSplitter from \"grapheme-splitter\";\r\n\r\nlet _searchResultsCache: {\r\n    [splitTextUniqueId: string]: {\r\n        [searchTerm: string]: {\r\n            [index: number]: { [position: number]: [number, number] },\r\n        },\r\n    },\r\n} = {};\r\n\r\nexport type Props = {\r\n    splitText: SplitText,\r\n    didSelectSegmentIds: (segmentIds: string[]) => void,\r\n    limitWidth: boolean,\r\n    // selectedAnnotatedSegments: Array<TextSegment | number>,\r\n    selectedSegmentId: (segmentId: string) => void,\r\n    selectedWitness: Witness | null,\r\n    // selectedSearchResult: {\r\n    //     textId: number,\r\n    //     start: number,\r\n    //     length: number\r\n    // } | null,\r\n    // searchValue: string | null,\r\n    fontSize: number,\r\n    isPanelLinked: Boolean,\r\n    textAlignment: {},\r\n    textAlignmentById: {},\r\n    changeScrollToId: () => void,\r\n    selectedWindow: Boolean,\r\n    selectedTargetRange: [],\r\n    selectedSourceRange: [],\r\n    changeSyncIdOnClick: () => void,\r\n};\r\n\r\nexport default class SplitTextComponent extends React.PureComponent<Props> {\r\n    list: List | null;\r\n    splitText: HTMLDivElement | null;\r\n    didSelectSegmentIds;\r\n    cache: CellMeasurerCache;\r\n    rowRenderer: (params: {\r\n        key: string,\r\n        index: number,\r\n        parent: {},\r\n        style: {},\r\n    }) => React.Element<CellMeasurer>;\r\n    resizeHandler: () => void;\r\n    selectionHandler: (e: Event) => void;\r\n    textListVisible: boolean;\r\n    editMenuVisible: Boolean;\r\n    activeSelection: Selection | null;\r\n    selectedNodes: Node[] | null;\r\n    // Whether the mouse button is down\r\n    textAlignmentById;\r\n    changeScrollToId: () => void;\r\n\r\n    selectedTextIndex: number | null;\r\n    splitTextRect: ClientRect | null;\r\n    firstSelectedSegment: TextSegment | null;\r\n    selectedElementId: string | null;\r\n    selectedElementIds: string[] | null;\r\n    selectedWindow: Boolean;\r\n    scrollEvent: () => void;\r\n    mouseEnter: () => void;\r\n    mouseLeft: () => void;\r\n    scrollTop;\r\n    debouncedScroll;\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.textAlignmentById = [];\r\n        this.changeScrollToId = props.changeScrollToId;\r\n        this.condition = props.condition;\r\n        this.list = null;\r\n        this.splitText = null;\r\n        this.cache = new CellMeasurerCache({\r\n            fixedWidth: true,\r\n        });\r\n        this.rowRenderer = this.rowRenderer.bind(this);\r\n        this.activeSelection = null;\r\n        this.selectedNodes = null;\r\n        this._mouseDown = false;\r\n        this._activeWitness = null;\r\n        this._didSetInitialScrollPosition = false;\r\n        this._modifyingSelection = false;\r\n        this.imageHeight = null;\r\n        this.imageWidth = null;\r\n        this.calculatedImageHeight = null;\r\n        this.selectedWindow = this.props.selectedWindow;\r\n        this.scrollEvent = this.scrollEvent.bind(this);\r\n        // this.processProps(props);\r\n        this.scrollTop = 0;\r\n    }\r\n    scrollEvent(e) {\r\n        if (this.selectedWindow === 1) return null;\r\n        if (this.selectedWindow === 2) {\r\n            let list = [];\r\n            this.textAlignmentById.map((l) => {\r\n                let number = document.getElementById(\"s2_\" + l.TStart);\r\n                if (number) {\r\n                    let position = number.getBoundingClientRect();\r\n                    if (position.top > 90) {\r\n                        list.push({\r\n                            id: l.id,\r\n                            start: l.start,\r\n                            TStart: l.TStart,\r\n                            end: l.end,\r\n                            TEnd: l.TEnd,\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n            if (!_.isEmpty(list)) {\r\n                if (this.selectedWindow === 2) {\r\n                    this.debouncedScroll(list);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    selectedListRow(props: Props): number | null {\r\n        let row = null;\r\n        if (props.activeAnnotation) {\r\n            row = props.splitText.getTextIndexOfPosition(\r\n                props.activeAnnotation.start\r\n            );\r\n        }\r\n        return row;\r\n    }\r\n    handleSelection(e: Event) {\r\n        if (!this._modifyingSelection) {\r\n            this.activeSelection = document.getSelection();\r\n            if (!this._mouseDown) {\r\n                // sometimes, this gets called after the mouseDown event handler\r\n                this.mouseUp();\r\n            }\r\n        } else {\r\n            e.stopPropagation();\r\n            // Need to set this here. If set at callsite, the event will not\r\n            // have time to propagate.\r\n            this._modifyingSelection = false;\r\n        }\r\n    }\r\n    mouseDown() {\r\n        this._mouseDown = true;\r\n    }\r\n\r\n    mouseUp() {\r\n        this._mouseDown = false;\r\n        if (this.activeSelection) {\r\n            // let segmentIds = this.processSelection(this.activeSelection);\r\n            // if (!segmentIds) {\r\n            //     segmentIds = [];\r\n            // }\r\n            // this.props.didSelectSegmentIds(segmentIds);\r\n            this.activeSelection = null;\r\n        }\r\n    }\r\n\r\n    // processSelection(selection: Selection): string[] | null {\r\n    //     if (\r\n    //         selection.rangeCount === 0 ||\r\n    //         selection.isCollapsed ||\r\n    //         selection.type === \"Caret\"\r\n    //     ) {\r\n    //         this.selectedNodes = null;\r\n    //         return null;\r\n    //     }\r\n\r\n    //     const range = selection.getRangeAt(0);\r\n    //     const start = range.startContainer;\r\n    //     const startSpan = this.getNodeSegmentSpan(start);\r\n    //     if (!(startSpan && startSpan.parentNode)) {\r\n    //         If the selection is not a text segment, ignore.\r\n    //         Assuming if the first node is a non-segment, they\r\n    //         all are.\r\n    //         return null;\r\n    //     }\r\n\r\n    //     let nodes = this.getRangeNodes(range, startSpan.parentNode);\r\n    //     Check if the selection starts after the end of a node, and\r\n    //     if so remove that node.\r\n    //     if (nodes.length > 0) {\r\n    //         let firstNode = nodes[0];\r\n    //         if (range.startOffset === firstNode.textContent.length) {\r\n    //             nodes.shift();\r\n    //         }\r\n    //     }\r\n\r\n    //     const end = range.endContainer;\r\n    //     const endSpan = this.getNodeSegmentSpan(end);\r\n    //     if (!(endSpan && endSpan.parentNode)) {\r\n    //         return null;\r\n    //     }\r\n    //     if (endSpan && startSpan.parentNode !== endSpan.parentNode) {\r\n    //         Selection is spanning Texts.\r\n    //         We assume a selection can only run across a maximum\r\n    //         of two Texts.\r\n    //         nodes = nodes.concat(this.getRangeNodes(range, endSpan.parentNode));\r\n    //     } else {\r\n    //         Check if the selection ends before the start of a node, and\r\n    //         if so remove that node.\r\n    //         if (range.endOffset === 0) {\r\n    //             nodes.pop();\r\n    //         }\r\n    //     }\r\n    //     this.selectedNodes = nodes;\r\n    //     let nodeIds = [];\r\n    //     nodes.reduce((accumulator: string[], current: Node) => {\r\n    //         if (current instanceof Element) {\r\n    //             accumulator.push(current.id);\r\n    //         }\r\n    //         return accumulator;\r\n    //     }, nodeIds);\r\n\r\n    //     return nodeIds;\r\n    // }\r\n    // getRangeNodes(range: Range, parentNode: Node): Node[] {\r\n    //     let rangeSpans = [];\r\n    //     for (let i = 0, len = parentNode.childNodes.length; i < len; i++) {\r\n    //         const node = parentNode.childNodes[i];\r\n    //         // TODO: add polyfill for i.e.?\r\n    //         // e.g. https://gist.github.com/jonathansampson/6d09bd6d2e8c22c53868aec42e66b0f9\r\n    //         if (range.intersectsNode(node)) {\r\n    //             rangeSpans.push(node);\r\n    //         }\r\n    //     }\r\n    //     return rangeSpans;\r\n    // }\r\n    getNodeSegmentSpan(node: Node): Element | null {\r\n        let currentNode = node;\r\n        let span = null;\r\n        const test = /^(i|s|ds)_/;\r\n        while (!span && currentNode.parentNode) {\r\n            if (currentNode instanceof Element && test.test(currentNode.id)) {\r\n                span = currentNode;\r\n            }\r\n            currentNode = currentNode.parentNode;\r\n        }\r\n\r\n        return span;\r\n    }\r\n\r\n    updateList(\r\n        resetCache: boolean = true,\r\n        resetRows: number | number[] | null = null\r\n    ) {\r\n        if (\r\n            this.props.showImages &&\r\n            !this.calculatedImageHeight &&\r\n            this.imageHeight &&\r\n            this.imageWidth\r\n        ) {\r\n            this.calculatedImageHeight = this.calculateImageHeight();\r\n        }\r\n        if (this.list) {\r\n            const list = this.list;\r\n            if (resetCache) {\r\n                if (resetRows !== null) {\r\n                    if (!Array.isArray(resetRows)) {\r\n                        this.cache.clear(resetRows);\r\n                    } else if (Array.isArray(resetRows)) {\r\n                        for (let i = 0; i < resetRows.length; i++) {\r\n                            let resetRow = resetRows[i];\r\n                            this.cache.clear(resetRow);\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.cache.clearAll();\r\n                    list.measureAllRows();\r\n                    list.recomputeRowHeights(0);\r\n                }\r\n            }\r\n            list.forceUpdateGrid();\r\n        }\r\n    }\r\n\r\n    processProps(props: Props) {\r\n        let changedWitness = false;\r\n        if (\r\n            !this.props.selectedWitness ||\r\n            (props.selectedWitness &&\r\n                props.selectedWitness.id !== this.props.selectedWitness.id)\r\n        ) {\r\n            changedWitness = true;\r\n            this._didSetInitialScrollPosition = false;\r\n        }\r\n\r\n        if (\r\n            props.selectedSearchResult &&\r\n            (!this.props.selectedSearchResult ||\r\n                props.selectedSearchResult.start !==\r\n                    this.props.selectedSearchResult.start ||\r\n                props.selectedSearchResult.textId !==\r\n                    this.props.selectedSearchResult.textId)\r\n        ) {\r\n            console.log(\"resetting scroll position from search result\");\r\n            this._didSetInitialScrollPosition = false;\r\n        }\r\n\r\n        // TODO: check if new selectedSearchResult and if so\r\n        // set this._didSetInitialScrollPosition = false\r\n\r\n        // make sure there's no numbers in selectedAnnotatedSegments\r\n        // as we want to pass it to Text which only expects TextSegments\r\n        // this._filteredSelectedAnnotatedSegments = props.selectedAnnotatedSegments.reduce(\r\n        //     (acc, current: TextSegment | number) => {\r\n        //         if (current instanceof TextSegment) acc.push(current);\r\n        //         return acc;\r\n        //     },\r\n        //     []\r\n        // );\r\n\r\n        const controlsMeasurements = this.getControlsMeasurements(props);\r\n        if (controlsMeasurements) {\r\n            this.selectedTextIndex = controlsMeasurements.selectedTextIndex;\r\n            this.firstSelectedSegment =\r\n                controlsMeasurements.firstSelectedSegment;\r\n            this.splitTextRect = controlsMeasurements.splitTextRect;\r\n            this.selectedElementId = controlsMeasurements.selectedElementId;\r\n            this.selectedElementIds = controlsMeasurements.selectedElementIds;\r\n        }\r\n\r\n        if (\r\n            props.textListVisible !== this.textListVisible ||\r\n            props.editMenuVisible !== this.editMenuVisible\r\n        ) {\r\n            setTimeout(() => {\r\n                this.textListVisible = props.textListVisible;\r\n                this.editMenuVisible = props.editMenuVisible;\r\n                this.updateList(true);\r\n            }, 500);\r\n        } else {\r\n            if (changedWitness) {\r\n                this.updateList(true);\r\n            } else if (this.pageBreaksChanged(this.props, props)) {\r\n                let selectedRows = null;\r\n                let currentSelectedRow = this.selectedListRow(this.props);\r\n                let newSelectedRow = this.selectedListRow(props);\r\n                if (currentSelectedRow && newSelectedRow) {\r\n                    let firstChangedRow =\r\n                        currentSelectedRow > newSelectedRow\r\n                            ? newSelectedRow\r\n                            : currentSelectedRow;\r\n\r\n                    let splitRowTexts = this.props.splitText.texts;\r\n                    selectedRows = [];\r\n                    for (\r\n                        let i = firstChangedRow, len = splitRowTexts.length;\r\n                        i < len;\r\n                        i++\r\n                    ) {\r\n                        selectedRows.push(i);\r\n                    }\r\n                }\r\n                this.updateList(true, selectedRows);\r\n            } else if (this.lineBreaksChanges(this.props, props)) {\r\n                let selectedRow = this.selectedListRow(props);\r\n                if (!selectedRow)\r\n                    selectedRow = this.selectedListRow(this.props);\r\n                let splitRowTexts = this.props.splitText.texts;\r\n                let selectedRows = [];\r\n                if (selectedRow !== null) {\r\n                    for (\r\n                        let i = selectedRow, len = splitRowTexts.length;\r\n                        i < len;\r\n                        i++\r\n                    ) {\r\n                        selectedRows.push(i);\r\n                    }\r\n                    this.updateList(true, selectedRows);\r\n                }\r\n            } else if (this.props.fontSize !== props.fontSize) {\r\n                this.updateList(true);\r\n            } else if (\r\n                this.props.activeAnnotation &&\r\n                props.activeAnnotation &&\r\n                this.annotationsInSameLocation(\r\n                    this.props.activeAnnotation,\r\n                    props.activeAnnotation\r\n                )\r\n            ) {\r\n                this.updateList(true, this.selectedListRow(props));\r\n            } else {\r\n                this.updateList(this.shouldResetListCache(this.props, props));\r\n            }\r\n        }\r\n    }\r\n\r\n    pageBreaksChanged(oldProps: Props, newProps: Props) {\r\n        const oldTextBreaks = oldProps.splitText.getTextsFinalPositions();\r\n        const newTextBreaks = newProps.splitText.getTextsFinalPositions();\r\n\r\n        if (oldTextBreaks.length !== newTextBreaks.length) return true;\r\n\r\n        return JSON.stringify(oldTextBreaks) !== JSON.stringify(newTextBreaks);\r\n    }\r\n\r\n    lineBreaksChanges(oldProps: Props, newProps: Props) {\r\n        let oldActiveAnnotation = oldProps.activeAnnotation;\r\n        let newActiveAnnotation = newProps.activeAnnotation;\r\n        let hasChanged = false;\r\n\r\n        if (\r\n            oldActiveAnnotation &&\r\n            oldActiveAnnotation.isType(ANNOTATION_TYPES.lineBreak) &&\r\n            newProps.activeAnnotations &&\r\n            !newProps.activeAnnotations.hasOwnProperty(\r\n                oldActiveAnnotation.uniqueId\r\n            )\r\n        ) {\r\n            hasChanged = true;\r\n        }\r\n\r\n        if (\r\n            newActiveAnnotation &&\r\n            newActiveAnnotation.isType(ANNOTATION_TYPES.lineBreak) &&\r\n            oldProps.activeAnnotations &&\r\n            !oldProps.activeAnnotations.hasOwnProperty(\r\n                newActiveAnnotation.uniqueId\r\n            )\r\n        ) {\r\n            hasChanged = true;\r\n        }\r\n\r\n        return hasChanged;\r\n    }\r\n    shouldResetListCache(oldProps: Props, newProps: Props) {\r\n        let shouldReset = false;\r\n        if (\r\n            oldProps.showImages !== newProps.showImages ||\r\n            this.pageBreaksChanged(oldProps, newProps)\r\n        ) {\r\n            shouldReset = true;\r\n        }\r\n\r\n        return shouldReset;\r\n    }\r\n\r\n    UNSAFE_componentWillReceiveProps(props: Props) {\r\n        this.processProps(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resizeHandler = _.throttle(() => {\r\n            this.calculatedImageHeight = null;\r\n            this.updateList();\r\n        }, 500).bind(this);\r\n        window.addEventListener(\"resize\", this.resizeHandler);\r\n\r\n        this.debouncedScroll = _.debounce((list) => {\r\n            this.changeScrollToId({ id: list[0].TStart, from: 2 });\r\n        }, 1000);\r\n        this.selectionHandler = _.debounce((e) => {\r\n            this.handleSelection(e);\r\n        }, 200).bind(this);\r\n\r\n        document.addEventListener(\"selectionchange\", this.selectionHandler);\r\n\r\n        document.addEventListener(\"mousedown\", this.mouseDown.bind(this), true);\r\n        document.addEventListener(\"mouseup\", this.mouseUp.bind(this), true);\r\n\r\n        this.processProps(this.props);\r\n        this.componentDidUpdate();\r\n        this.splitText.style.scrollBehavior = \"smooth\";\r\n        this.timer = setTimeout(() => {\r\n            this.resizeHandler();\r\n        }, 2000);\r\n    }\r\n    scrollToIndex(selectedTextIndex) {\r\n        let list = this.list;\r\n\r\n        setTimeout(() => {\r\n            list.scrollToRow(selectedTextIndex);\r\n            setTimeout(() => {\r\n                list.scrollToPosition(list.props.scrollTop - 300);\r\n            }, 0);\r\n        }, 100);\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        let scrollToId = this.props.scrollToId;\r\n        this.targetId2 = this.props.syncIdOnClick;\r\n        this.selectedWindow = this.props.selectedWindow;\r\n        let list = this.list;\r\n        let result = this.props.searchResults;\r\n        let Alignment = this.props.textAlignment;\r\n        this.condition = this.props.condition;\r\n\r\n        if (!this._didSetInitialScrollPosition && this.list) {\r\n            const list = this.list;\r\n            if (\r\n                this.props.activeAnnotation ||\r\n                this.props.selectedSearchResult\r\n            ) {\r\n                let selectedTextIndex = this.getSelectedTextIndex();\r\n                setTimeout(() => {\r\n                    list.scrollToRow(selectedTextIndex);\r\n                    // scrollToRow often positions the annotation at the\r\n                    // bottom of the screen, so scroll up a bit\r\n                    setTimeout(() => {\r\n                        list.scrollToPosition(list.props.scrollTop - 300);\r\n                    }, 0);\r\n                }, 100);\r\n            }\r\n            this._didSetInitialScrollPosition = true;\r\n        }\r\n\r\n        // scroll dom with respect to window 1 scrolling\r\n\r\n        if (\r\n            this.selectedWindow === 1 &&\r\n            scrollToId.from === 1 &&\r\n            this.condition &&\r\n            scrollToId.id !== null\r\n        ) {\r\n            this.textAlignmentById = this.props.textAlignmentById || [];\r\n\r\n            if (Alignment) {\r\n                let req = this.textAlignmentById.find(\r\n                    (l) => l.start === scrollToId.id\r\n                );\r\n                let TStart = req?.TStart;\r\n                if (TStart !== null) {\r\n                    let selectedTextIndex =\r\n                        this.props.splitText.getTextIndexOfPosition(TStart);\r\n                    this.scrollToIndex(selectedTextIndex);\r\n                }\r\n            }\r\n        }\r\n        // scroll dom with respect to window 1 click\r\n        //for scrolling to the highlighted alignment if its outside visible DOM\r\n        if (\r\n            this.targetId2 &&\r\n            scrollToId.from === null &&\r\n            this.selectedWindow === 1 &&\r\n            scrollToId.id === null &&\r\n            this.condition\r\n        ) {\r\n            let clickIdObj = Alignment.alignment.find(\r\n                (l) =>\r\n                    this.targetId2 >= l.source_segment.start &&\r\n                    this.targetId2 < l.source_segment.end\r\n            );\r\n            let syncClickTargetId = clickIdObj?.target_segment?.start;\r\n            let selectedTextIndex =\r\n                this.props.splitText.getTextIndexOfPosition(syncClickTargetId);\r\n\r\n            this.scrollToIndex(selectedTextIndex);\r\n        }\r\n\r\n        // if (this.selectedNodes && this.selectedNodes.length > 0) {\r\n        //     const selectedNodes = this.selectedNodes;\r\n        //     const selectedSegments = this.props.selectedAnnotatedSegments;\r\n        //     setTimeout(() => {\r\n        //         let selRange = document.createRange();\r\n        //         let startNode = selectedNodes[0];\r\n        //         let endNode = selectedNodes[selectedNodes.length - 1];\r\n        //         // let lastSegment = selectedSegments[selectedSegments.length - 1];\r\n        //         if (lastSegment instanceof TextSegment) {\r\n        //             let lastElement = document.getElementById(\r\n        //                 idForSegment(lastSegment)\r\n        //             );\r\n        //             if (lastElement) endNode = lastElement;\r\n        //         }\r\n        //         if (\r\n        //             startNode instanceof Element &&\r\n        //             endNode instanceof Element\r\n        //         ) {\r\n        //             startNode = document.getElementById(startNode.id);\r\n        //             endNode = document.getElementById(endNode.id);\r\n        //             if (startNode && endNode) {\r\n        //                 selRange.setStart(startNode, 0);\r\n        //                 selRange.setEnd(endNode, endNode.childNodes.length);\r\n        //                 let sel = document.getSelection();\r\n        //                 if (sel) {\r\n        //                     this._modifyingSelection = true;\r\n        //                     sel.removeAllRanges();\r\n        //                     sel.addRange(selRange);\r\n        //                     this.selectedNodes = null;\r\n        //                 }\r\n        //             }\r\n        //         }\r\n        //     }, 0);\r\n        // }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"mousedown\", this);\r\n        document.removeEventListener(\"mouseup\", this);\r\n        window.removeEventListener(\"resize\", this.resizeHandler);\r\n\r\n        document.removeEventListener(\"selectionchange\", this.selectionHandler);\r\n        clearTimeout(this.timer);\r\n    }\r\n\r\n    getSelectedTextIndex(): number {\r\n        let selectedTextIndex = 0;\r\n        let startPos = null;\r\n        if (this.props.activeAnnotation) {\r\n            [startPos] =\r\n                this.props.splitText.annotatedText.getPositionOfAnnotation(\r\n                    this.props.activeAnnotation\r\n                );\r\n        } else if (this.props.selectedSearchResult) {\r\n            let segment =\r\n                this.props.splitText.annotatedText.segmentAtOriginalPosition(\r\n                    this.props.selectedSearchResult.start\r\n                );\r\n            if (segment instanceof TextSegment) {\r\n                startPos = segment.start;\r\n            } else if (typeof segment === \"number\") {\r\n                startPos = segment;\r\n            }\r\n        }\r\n        if (startPos) {\r\n            selectedTextIndex =\r\n                this.props.splitText.getTextIndexOfPosition(startPos);\r\n        }\r\n        return selectedTextIndex;\r\n    }\r\n    getControlsMeasurements(props: Props): {\r\n        selectedTextIndex: number,\r\n        firstSelectedSegment: TextSegment,\r\n        selectedElementId: string,\r\n        splitTextRect: ClientRect,\r\n        selectedElementIds: string[],\r\n    } | null {\r\n        if (!this.splitText) {\r\n            return null;\r\n        }\r\n        let splitTextComponent = this.splitText;\r\n        let selectedTextIndex = null;\r\n        let firstSelectedSegment = null;\r\n        let selectedElementId = null;\r\n        let splitTextRect = null;\r\n        let segmentIdFunction: null | ((segment: TextSegment) => string) = null;\r\n        let selectedElementIds = [];\r\n        let startPos = 0;\r\n        if (props.activeAnnotation) {\r\n            let activeAnnotation = props.activeAnnotation;\r\n            [startPos] =\r\n                props.splitText.annotatedText.getPositionOfAnnotation(\r\n                    activeAnnotation\r\n                );\r\n            if (startPos === null) {\r\n                console.warn(\"No startPos in getControlsMeasurements\");\r\n                return null;\r\n            }\r\n            if (activeAnnotation.type === ANNOTATION_TYPES.pageBreak) {\r\n                startPos -= 1;\r\n            }\r\n            if (activeAnnotation.type === ANNOTATION_TYPES.lineBreak) {\r\n                startPos -= 1;\r\n            }\r\n\r\n            // Index of text containing end of annotation\r\n            let positionEnd = startPos + activeAnnotation.length;\r\n            if (activeAnnotation.length > 0) positionEnd -= 1;\r\n            selectedTextIndex =\r\n                props.splitText.getTextIndexOfPosition(positionEnd);\r\n            splitTextRect = splitTextComponent.getBoundingClientRect();\r\n        }\r\n        let selectedAnnotatedSegments = [];\r\n        if (\r\n            props.selectedAnnotatedSegments &&\r\n            props.selectedAnnotatedSegments.length > 0\r\n        ) {\r\n            selectedAnnotatedSegments = props.selectedAnnotatedSegments;\r\n            for (let i = 0; i < selectedAnnotatedSegments.length; i++) {\r\n                let segment = selectedAnnotatedSegments[i];\r\n                if (\r\n                    firstSelectedSegment === null &&\r\n                    segment instanceof TextSegment\r\n                ) {\r\n                    firstSelectedSegment = segment;\r\n                    break;\r\n                }\r\n            }\r\n            if (firstSelectedSegment) {\r\n                if (\r\n                    firstSelectedSegment.length === 0 &&\r\n                    props.activeAnnotation &&\r\n                    props.activeAnnotation.isInsertion\r\n                ) {\r\n                    selectedElementId = idForInsertion(firstSelectedSegment);\r\n                    segmentIdFunction = idForInsertion;\r\n                } else {\r\n                    selectedElementId = idForSegment(firstSelectedSegment);\r\n                    segmentIdFunction = idForSegment;\r\n                }\r\n            }\r\n        } else if (props.activeAnnotation) {\r\n            if (props.activeAnnotation.isDeletion) {\r\n                let segment = new TextSegment(startPos, \"\");\r\n                selectedElementId = idForDeletedSegment(segment);\r\n                segmentIdFunction = idForDeletedSegment;\r\n                firstSelectedSegment = segment;\r\n                selectedAnnotatedSegments = [firstSelectedSegment];\r\n            } else if (props.activeAnnotation.isInsertion) {\r\n                const [start] =\r\n                    props.splitText.annotatedText.getPositionOfAnnotation(\r\n                        props.activeAnnotation\r\n                    );\r\n                if (start) {\r\n                    let segment = new TextSegment(start, \"\");\r\n                    selectedElementId = idForInsertion(segment);\r\n                    segmentIdFunction = idForInsertion;\r\n                    firstSelectedSegment = segment;\r\n                    selectedAnnotatedSegments = [firstSelectedSegment];\r\n                }\r\n            } else if (\r\n                props.activeAnnotation.type === ANNOTATION_TYPES.pageBreak\r\n            ) {\r\n                let segment = new TextSegment(startPos + 1, \"\");\r\n                let prevSegment = new TextSegment(startPos, \"\");\r\n                selectedElementId = idForPageBreak(prevSegment);\r\n                firstSelectedSegment = segment;\r\n                selectedAnnotatedSegments = [segment];\r\n                selectedElementIds = [selectedElementId];\r\n            } else if (\r\n                props.activeAnnotation.type === ANNOTATION_TYPES.lineBreak\r\n            ) {\r\n                let segment = new TextSegment(startPos + 1, \"\");\r\n                let prevSegment = new TextSegment(startPos, \"\");\r\n                selectedElementId = idForLineBreak(prevSegment);\r\n                firstSelectedSegment = segment;\r\n                selectedAnnotatedSegments = [segment];\r\n                selectedElementIds = [selectedElementId];\r\n            }\r\n        }\r\n        if (segmentIdFunction) {\r\n            for (let i = 0; i < selectedAnnotatedSegments.length; i++) {\r\n                let segment = selectedAnnotatedSegments[i];\r\n                if (segment instanceof TextSegment) {\r\n                    const segmentId = segmentIdFunction(segment);\r\n                    selectedElementIds.push(segmentId);\r\n                }\r\n            }\r\n        }\r\n        if (\r\n            selectedTextIndex != null &&\r\n            firstSelectedSegment &&\r\n            selectedElementId &&\r\n            splitTextRect\r\n        ) {\r\n            return {\r\n                selectedTextIndex: selectedTextIndex,\r\n                firstSelectedSegment: firstSelectedSegment,\r\n                selectedElementId: selectedElementId,\r\n                splitTextRect: splitTextRect,\r\n                selectedElementIds: selectedElementIds,\r\n            };\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const props = this.props;\r\n        const rowRenderer = this.rowRenderer;\r\n        const cache = this.cache;\r\n        const key = props.selectedWitness ? props.selectedWitness.id : 0;\r\n\r\n        return (\r\n            <div\r\n                className={styles.splitText}\r\n                ref={(div) => (this.splitText = div)}\r\n                key={key}\r\n                style={{\r\n                    cursor: \"pointer\",\r\n                }}\r\n            >\r\n                <AutoSizer disableWidth>\r\n                    {({ height }) => (\r\n                        <List\r\n                            ref={(list) => (this.list = list)}\r\n                            height={height}\r\n                            rowCount={props.splitText.texts.length}\r\n                            rowHeight={cache.rowHeight}\r\n                            rowRenderer={rowRenderer}\r\n                            width={1}\r\n                            overscanRowCount={1}\r\n                            deferredMeasurementCache={cache}\r\n                            onScroll={this.scrollEvent}\r\n                            scrollToAlignment=\"start\"\r\n                            containerStyle={{\r\n                                width: \"100%\",\r\n                                maxWidth: \"100%\",\r\n                            }}\r\n                            style={{\r\n                                width: \"100%\",\r\n                                paddingTop: 30,\r\n                                paddingInline: 50,\r\n                            }}\r\n                        ></List>\r\n                    )}\r\n                </AutoSizer>\r\n            </div>\r\n        );\r\n    }\r\n    getStringPositions(\r\n        text: SegmentedText,\r\n        string: string,\r\n        index: number\r\n    ): { [position: number]: [number, number] } {\r\n        const uniqueId = this.props.splitText.annotatedText.getUniqueId();\r\n\r\n        if (!_searchResultsCache.hasOwnProperty(uniqueId)) {\r\n            _searchResultsCache = {\r\n                [uniqueId]: {},\r\n            };\r\n        }\r\n\r\n        if (!_searchResultsCache[uniqueId].hasOwnProperty(string)) {\r\n            _searchResultsCache[uniqueId] = {\r\n                [string]: {},\r\n            };\r\n        }\r\n\r\n        if (_searchResultsCache[uniqueId][string].hasOwnProperty(index)) {\r\n            return _searchResultsCache[uniqueId][string][index];\r\n        }\r\n\r\n        const splitter = new GraphemeSplitter();\r\n        const content = text.getText();\r\n        const firstSegment = text.segments[0];\r\n        const startingPosition = firstSegment.start;\r\n        let positions = [];\r\n        let position = content.indexOf(string);\r\n        while (position !== -1) {\r\n            positions.push(position);\r\n            position = content.indexOf(string, position + 1);\r\n        }\r\n\r\n        // Position needs to be position in complete text\r\n        let verifiedPositions: { [position: number]: [number, number] } = {};\r\n        if (positions.length > 0) {\r\n            const graphemes = splitter.splitGraphemes(content);\r\n            let position = 0;\r\n            let activePosition = null;\r\n            for (let i = 0; i < graphemes.length; i++) {\r\n                const grapheme = graphemes[i];\r\n                const graphemeEnd = position + (grapheme.length - 1);\r\n                if (activePosition !== null) {\r\n                    let expectedEnd = activePosition + (string.length - 1);\r\n                    if (graphemeEnd >= expectedEnd) {\r\n                        verifiedPositions[activePosition + startingPosition] = [\r\n                            activePosition + startingPosition,\r\n                            graphemeEnd + startingPosition,\r\n                        ];\r\n                        activePosition = null;\r\n                    }\r\n                } else if (positions.indexOf(position) !== -1) {\r\n                    if (string.length === grapheme.length) {\r\n                        verifiedPositions[position + startingPosition] = [\r\n                            position + startingPosition,\r\n                            graphemeEnd + startingPosition,\r\n                        ];\r\n                    } else if (string.length > grapheme.length) {\r\n                        activePosition = position;\r\n                    }\r\n                } else {\r\n                    activePosition = null;\r\n                }\r\n\r\n                position += grapheme.length;\r\n            }\r\n        }\r\n\r\n        _searchResultsCache[uniqueId][string][index] = verifiedPositions;\r\n\r\n        return verifiedPositions;\r\n    }\r\n\r\n    rowRenderer({\r\n        key,\r\n        index,\r\n        parent,\r\n        style,\r\n    }: {\r\n        key: string,\r\n        index: number,\r\n        parent: {},\r\n        style: {},\r\n    }): React.Element<CellMeasurer> {\r\n        const props = this.props;\r\n        const cache = this.cache;\r\n\r\n        let searchStringPositions = {};\r\n        let searchValue = this.props.searchValue;\r\n        if (searchValue && searchValue.length > 0 && props.splitText) {\r\n            searchStringPositions = this.getStringPositions(\r\n                props.splitText.texts[index],\r\n                searchValue,\r\n                index\r\n            );\r\n        }\r\n\r\n        let newStyle = {\r\n            ...style,\r\n            height: style.height + 10,\r\n        };\r\n        return (\r\n            <CellMeasurer\r\n                columnIndex={0}\r\n                parent={parent}\r\n                rowIndex={index}\r\n                cache={cache}\r\n                key={key}\r\n            >\r\n                <div\r\n                    style={newStyle}\r\n                    ref={this.splitTextRef}\r\n                    id={`index2_${index}`}\r\n                    className={styles.splitTextRow}\r\n                >\r\n                    <div className={styles.splitTextRowContent}>\r\n                        <Text\r\n                            segmentedText={props.splitText.texts[index]}\r\n                            row={index}\r\n                            selectedSegmentId={props.selectedSegmentId}\r\n                            // searchValue={searchValue}\r\n                            // selectedSearchResult={\r\n                            //     this.props.selectedSearchResult\r\n                            // }\r\n                            searchStringPositions={searchStringPositions}\r\n                            textAlignmentById={props.textAlignmentById}\r\n                            fontSize={props.fontSize}\r\n                            isPanelLinked={this.props.isPanelLinked}\r\n                            selectedSourceRange={props.selectedSourceRange}\r\n                            selectedTargetRange={props.selectedTargetRange}\r\n                            changeSelectedRange={props.changeSelectedRange}\r\n                            changeSyncIdOnClick={this.props.changeSyncIdOnClick}\r\n                            changeScrollToId={this.props.changeScrollToId}\r\n                            condition={this.condition}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </CellMeasurer>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Box, Typography } from \"components/UI/muiComponent\";\r\nimport Loader from \"react-loader\";\r\n\r\nimport { styled, alpha } from \"@mui/material/styles\";\r\nimport { Search as SearchIcon } from \"components/UI/muiIcon\";\r\nimport { InputBase, Toolbar } from \"components/UI/muiComponent\";\r\n\r\nconst Search = styled(\"div\")(({ theme }) => ({\r\n    position: \"relative\",\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n    \"&:hover\": {\r\n        backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n        marginLeft: theme.spacing(1),\r\n        width: \"auto\",\r\n    },\r\n}));\r\n\r\nconst SearchIconWrapper = styled(\"div\")(({ theme }) => ({\r\n    padding: theme.spacing(0, 2),\r\n    height: \"100%\",\r\n    position: \"absolute\",\r\n    pointerEvents: \"none\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n}));\r\n\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n    color: \"inherit\",\r\n    \"& .MuiInputBase-input\": {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n        transition: theme.transitions.create(\"width\"),\r\n        width: \"100%\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: \"0\",\r\n            cursor: \"pointer\",\r\n            \"&:focus\": {\r\n                width: \"20ch\",\r\n            },\r\n        },\r\n    },\r\n}));\r\n\r\nfunction TableOfContent() {\r\n    let data = [\r\n        { Id: 1, Title: \"chapter 1\", segment_id: 0 },\r\n        { Id: 2, Title: \"chapter 2\", segment_id: 400 },\r\n    ];\r\n    let loaded = data.length > 0 ? true : false;\r\n\r\n    return (\r\n        <Box\r\n            sx={{\r\n                bgcolor: \"heading.main\",\r\n                color: \"text.primary\",\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                paddingInline: 2,\r\n            }}\r\n        >\r\n            <Toolbar\r\n                sx={{\r\n                    justifyContent: \"space-between\",\r\n                    paddingLeft: \"0 !important\",\r\n                    margin: 0,\r\n                }}\r\n            >\r\n                <Typography textTransform={\"uppercase\"} component=\"h6\">\r\n                    Table Of Content\r\n                </Typography>\r\n                <Search>\r\n                    <SearchIconWrapper>\r\n                        <SearchIcon />\r\n                    </SearchIconWrapper>\r\n                    <StyledInputBase\r\n                        placeholder=\"Search…\"\r\n                        inputProps={{ \"aria-label\": \"search\" }}\r\n                    />\r\n                </Search>\r\n            </Toolbar>\r\n            {/* <Loader loaded={loaded} /> */}\r\n            <Box>\r\n                {data.map((list, index) => {\r\n                    return (\r\n                        <Box\r\n                            key={\"TableContent-\" + index}\r\n                            sx={{\r\n                                cursor: \"pointer\",\r\n                                width: \"fit-content\",\r\n                                \"&:hover\": {\r\n                                    fontWeight: \"bold\",\r\n                                },\r\n                            }}\r\n                        >\r\n                            {list.Title}\r\n                        </Box>\r\n                    );\r\n                })}\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default TableOfContent;\r\n","import React from \"react\";\r\n\r\nfunction TextHtml() {\r\n    return (\r\n        <p style={{ margin: 40 }}>\r\n            bodhicaryāvatāra oṃ namo buddhāya sugatān sasutān sadharmakāyān\r\n            praṇipatyādarato ’khilāṃś ca vandyān sugatātmajasaṃvarāvatāraṃ\r\n            kathayiṣyāmi yathāgamaṃ samāsāt{\" \"}\r\n            <span\r\n                style={{\r\n                    background: \"#eee\",\r\n                }}\r\n            >\r\n                na hi kiṃcid apūrvam atra vācyaṃ na ca saṃgranthanakauśalaṃ\r\n                mamāsti ata eva na me parārthacintā svamano bhāvayituṃ 1 kṛtaṃ\r\n                mayedam 2\r\n            </span>{\" \"}\r\n            mama tāvad anena yāti vṛddhiṃ kuśalaṃ bhāvayituṃ prasādavegaḥ atha\r\n            matsamadhātur eva paśyed aparo ’py enam ato ’pi sārthako ’yam\r\n            kṣaṇasaṃpad iyaṃ sudurlabhā pratilabdhā puruṣārthasādhanī yadi nātra\r\n            vicintyate hitaṃ punar apy eṣa samāgamaḥ kutaḥ rātrau yathā\r\n            meghaghanāndhakāre vidyut kṣaṇaṃ darśayati prakāśam buddhānubhāvena\r\n            tathā kadācil lokasya puṇyeṣu matiḥ kṣaṇaṃ syāt tasmāc chubhaṃ\r\n            durbalam eva nityaṃ balaṃ tu pāpasya mahat sughoram taj jīyate\r\n            ’nyena śubhena kena saṃbodhicittaṃ yadi nāma na syāt kalpān analpān\r\n            pravicintayadbhir dṛṣṭaṃ munīndrair hitam etad eva yati kiṃcid\r\n            apūrvam atra vācyaṃ aḥ sukhenaiva sukhaṃ pravṛddham utplāvayaty\r\n            apramitāñ janaughān bhavaduḥkhaśatāni tartukāmair api\r\n            sattvavyasanāni hartukāmaiḥ bahusaukhyaśatāni bhoktukāmair na\r\n            vimocyaṃ hi sadaiva bodhicittam bhavacārakabandhano varākaḥ\r\n            sugatānāṃ suta ucyate kṣaṇena sanarāmaralokavandanīyo bhavati\r\n            smodita eva bodhicitte aśucipratimām imāṃ gṛhītvā jinaratnapratimāṃ\r\n            karoty anarghām rasajātam atīva vedhanīyaṃ sudṛḍhaṃ gṛhṇata\r\n            bodhicittasaṃjñam suparīkṣitam aprameyadhībhir bahumūlyaṃ\r\n            jagadekasārthavāhaiḥ gatipattanavipravāsaśīlāḥ sudṛḍhaṃ gṛhṇata\r\n            bodhicittaratnam kadalīva phalaṃ vihāya yāti kṣayam anyat kuśalaṃ hi\r\n            sarvam eva satataṃ phalati kṣayaṃ na yāti prasavaty eva tu\r\n            bodhicittavṛkṣaḥ kṛtvāpi pāpāni sudāruṇāni yadāśrayād uttarati\r\n            kṣaṇena śūrāśrayeṇeva mahābhayāni nāśrīyate tat katham ajñasattvaiḥ\r\n            yugāntakālānalavan mahānti pāpāni yan nirdahati kṣaṇena\r\n            yasyānuśaṃsān amitān uvāca maitreyanāthaḥ sudhanāya dhīmān tad\r\n            bodhicittaṃ dvividhaṃ vijñātavyaṃ samāsataḥ bodhipraṇidhicittaṃ ca\r\n            bodhiprasthānam eva ca gantukāmasya gantuś ca yathā bhedaḥ pratīyate\r\n            tathā bhedo ’nayor jñeyo yāthāsaṃkhyena paṇḍitaiḥ\r\n            bodhipraṇidhicittasya saṃsāre ’pi phalaṃ mahat na tv\r\n            avicchinnapuṇyatvaṃ yathā prasthāna cetasaḥ yataḥ prabhṛty\r\n            aparyantasattvadhātupramokṣaṇe samādadāti tac cittam anivartyena\r\n            cetasā tataḥ prabhṛti suptasya pramattasyāpy anekaśaḥ avicchinnāḥ\r\n            puṇyadhārāḥ pravartante nabhaḥ samāḥ idaṃ subāhupṛcchāyāṃ\r\n            sopapattikam uktavān hīnādhimuktisattvārthaṃ svayam eva tathāgataḥ\r\n            śiraḥśūlāni sattvānāṃ nāśayāmīti cintayan aprameyeṇa puṇyena gṛhyate\r\n            sma hitāśayaḥ kim utāpramitaṃ śūlam ekaikasya jihīrṣataḥ\r\n            aprameyaguṇaṃ sattvam ekaikaṃ ca cikīrṣataḥ kasya mātuḥ pitur vāpi\r\n            hitāśaṃseyam īdṛśī devatānām ṛṣīṇāṃ vā brahmaṇāṃ vā bhaviṣyati teṣām\r\n            eva ca sattvānāṃ svārthe ’py eṣa manorathaḥ notpannapūrvaḥ svapne\r\n            ’pi parārthe saṃbhavaḥ kutaḥ sattvaratnaviśeṣo ’yam apūrvo jāyate\r\n            katham3 yat parārthāśayo ’nyeṣāṃ na svārthe ’py upajāyate\r\n            jagadānandabījasya jagadduḥkhauṣadhasya ca cittaratnasya yat puṇyaṃ\r\n            tat kathaṃ hi pramīyatām hitāśaṃsanamātreṇa buddhapūjā viśiṣyate kiṃ\r\n            punaḥ sarvasattvānāṃ sarvasaukhyārtham udyamāt duḥkham\r\n            evābhidhāvanti duḥkhaniḥsaraṇāśayā sukhecchayaiva saṃmohāt svasukhaṃ\r\n            ghnanti śatruvat yas teṣāṃ sukharaṅkāṇāṃ pīḍitānām anekaśaḥ tṛptiṃ\r\n            sarvasukhaiḥ kuryāt sarvāḥ pīḍāś chinatti ca nāśayaty api saṃmohaṃ\r\n            sādhus tena samaḥ kutaḥ kuto vā tādṛśaṃ mitraṃ puṇyaṃ vā tādṛśaṃ\r\n            kutaḥ kṛte yaḥ pratikurvīta so ’pi tāvat praśasyate avyāpāritasādhus\r\n            tu bodhisattvaḥ kim ucyatām katipayajanasattradāyakaḥ kuśalakṛd ity\r\n            abhipūjyate janaiḥ kṣaṇam aśanakamātradānataḥ saparibhavaṃ\r\n            divasārdhayāpanāt kim u niravadhisattvasaṃkhyayā niravadhikālam\r\n            anuprayacchataḥ gaganajanaparikṣayākṣayaṃ\r\n            sakalamanorathasaṃprapūraṇam iti sattrapatau jinasya putre kaluṣaṃ\r\n            sve hṛdaye karoti yaś ca kaluṣodayasaṃkhyayā sa kalpān narakeṣv\r\n            āvasatīti nātha āha atha yasya manaḥ prasādam eti prasavet tasya\r\n            tato ’dhikaṃ phalam mahatā hi balena pāpakarma jinaputreṣu śubhaṃ tv\r\n            ayatnataḥ4 teṣāṃ śarīrāṇi namaskaromi yatroditaṃ tad varacittaratnam\r\n            yatrāpakāro ’pi sukhānubandhī sukhākarāṃs tāṃ śaraṇaṃ prayāmi\r\n            bodhicaryāvatāre bodhicittānuśaṃsaḥ nāma prathamaḥ paricchedaḥ\r\n            taccittaratnagrahaṇāya samyakpūjāṃ karomy eṣa tathāgatānām\r\n            saddharmaratnasya ca nirmalasya buddhātmajānāṃ ca guṇodadhīnām\r\n            yāvanti puṣpāṇi phalāni caiva bhaiṣajyajātāni ca yāni santi ratnāni\r\n            yāvanti ca santi loke jalāni ca svacchamanoramāṇi mahīdharā\r\n            ratnamayās tathānye vanapradeśāś ca vivekaramyāḥ latāḥ\r\n            supuṣpābharaṇojjvalāś ca drumāś ca ye satphalanamraśākhāḥ\r\n            devādilokeṣu ca gandhadhūpāḥ kalpadrumā ratnamayāś ca vṛkṣāḥ sarāṃsi\r\n            cāmbhoruhabhūṣaṇāni haṃsasvanātyantamanoharāṇi akṛṣṭajātāni ca\r\n            śasyajātāny anyāni vā pūjyavibhūṣaṇāni ākāśadhātuprasarāvadhīni\r\n            sarvāṇy apīmāny aparigrahāṇi ādāya buddhyā munipuṃgavebhyo\r\n            niryātayāmy eṣa saputrakebhyaḥ gṛhṇantu tan me varadakṣiṇīyā\r\n            mahākṛpā mām anukampamānāḥ apuṇyavān asmi mahādaridraḥ pūjārtham\r\n            anyan mama nāsti kiṃcit ato mamārthāya parārthacittā gṛhṇantu nāthā\r\n            idam ātmaśaktyā dadāmi cātmānam ahaṃ jinebhyaḥ sarveṇa sarvaṃ ca\r\n            tadātmajebhyaḥ parigrahaṃ me kurutāgrasattvāḥ yuṣmāsu dāsatvam\r\n            upaimi bhaktyā parigraheṇāsmi bhavatkṛtena nirbhīr bhave sattvahitaṃ\r\n            karomi pūrvaṃ ca pāpaṃ samatikramāmi nānyac ca pāpaṃ prakaromi\r\n            bhūyaḥ ratnojjvalastambhamanorameṣu muktāmayodbhāsivitānakeṣu\r\n            svacchojjvalasphāṭikakuṭṭimeṣu sugandhiṣu snānagṛheṣu teṣu\r\n            manojñagandhodakapuṣpapūrṇaiḥ kumbhair mahāratnamayair anekaiḥ\r\n            snānaṃ karomy eṣa tathāgatānāṃ tadātmajānāṃ ca sagītavādyam\r\n            pradhūpitair dhautamalair atulyair vastraiś ca teṣāṃ tanum unmṛśāmi\r\n            tataḥ suraktāni sudhūpitāni dadāmi tebhyo varacīvarāṇi divyair\r\n            mṛduślakṣṇavicitraśobhair vastrair alaṃkāravaraiś ca tais taiḥ\r\n            samantabhadrājitamañjughoṣalokeśvarādīn api maṇḍayāmi\r\n            sarvatrisāhasravisārigandhair gandhottamais tān anulepayāmi\r\n            sūttaptasūnmṛṣṭasudhautahemaprabhojjvalān sarvamunīndrakāyān\r\n            māndāravendīvaramallikādyaiḥ sarvaiḥ sugandhaiḥ kusumair manojñaiḥ\r\n            abhyarcayāmy arcyatamān munīndrān sragbhiś ca saṃsthānamanoramābhiḥ\r\n            sphītasphuradgandhamanoramaiś ca tān dhūpameghair upadhūpayāmi\r\n            bhojyaiś ca svādyair vividhaiś ca peyais tebhyo nivedyaṃ ca\r\n            nivedayāmi ratnapradīpāṃś ca nivedayāmi suvarṇapadmeṣu\r\n            niviṣṭapaṅktīn gandhopalipteṣu ca kuṭṭimeṣu kirāmi puṣpaprakarān1\r\n            manojñān pralambamuktāmaṇihāraśobhān ābhāsvarān digmukhamaṇḍanāṃs\r\n            tān vimānameghān stutigītaramyān maitrīmayebhyo ’pi nivedayāmi\r\n            suvarṇadaṇḍaiḥ kamanīyarūpaiḥ saṃsaktamuktāni samucchritāni\r\n            pradhārayāmy eṣa mahāmunīnāṃ ratnātapatrāṇy atiśobhanāni ataḥ paraṃ\r\n            pratiṣṭhantāṃ pūjāmeghā manoramāḥ tūryasaṃgītimeghāś ca\r\n            sarvasattvapraharṣaṇāḥ sarvasaddharmaratneṣu caityeṣu pratimāsu ca\r\n            puṣparatnādivarṣāś ca pravartantāṃ nirantaram mañjughoṣaprabhṛtayaḥ\r\n            pūjayanti yathā jinān tathā tathāgatān nāthān saputrān pūjayāmy aham\r\n            svarāṅgasāgaraiḥ stotraiḥ staumi cāhaṃ guṇodadhīn stutisaṃgītimeghāś\r\n            ca saṃbhavantv eṣv ananyathā sarvakṣetrāṇusaṃkhyaiś ca praṇāmaiḥ\r\n            praṇamāmy aham sarvatrādhvagatān buddhān sahadharmagaṇottamān\r\n            sarvacaityāni vande ’haṃ bodhisattvāśrayāṃs tathā namaḥ karomy\r\n            upādhyāyān abhivandyān yatīṃs tathā buddhaṃ gacchāmi śaraṇaṃ yāvad ā\r\n            bodhimaṇḍataḥ dharmaṃ gacchāmi śaraṇaṃ bodhisattvagaṇaṃ tathā\r\n            vijñāpayāmi saṃbuddhān sarvadikṣu vyavasthitān mahākāruṇikāṃś cāpi\r\n            bodhisattvān kṛtāñjaliḥ anādimati saṃsāre janmany atraiva vā punaḥ\r\n            yan mayā paśunā pāpaṃ kṛtaṃ kāritam eva vā yac cānumoditaṃ kiṃcid\r\n            ātmaghātāya mohataḥ tad atyayaṃ deśayāmi paścāttāpena tāpitaḥ\r\n            ratnatraye ’pakāro yo mātāpitṛṣu vā mayā guruṣv anyeṣu vā kṣepāt\r\n            kāyavāgbuddhibhiḥ kṛtaḥ anekadoṣaduṣṭena mayā pāpena nāyakāḥ yat\r\n            kṛtaṃ dāruṇaṃ pāpaṃ tat sarvaṃ deśayāmy aham kathaṃ ca niḥsarāmy\r\n            asmāt paritrāyata satvaram mā mamākṣīṇapāpasya maraṇaṃ śīghram\r\n            eṣyati kṛtākṛtāparīkṣo ’yaṃ mṛtyur viśrambhaghātakaḥ\r\n            svasthāsvasthair aviśvāsya ākasmikamahāśaniḥ priyāpriyanimittena\r\n            pāpaṃ kṛtam anekadhā sarvam utsṛjya gantavyam iti na jñātam īdṛśam\r\n            apriyā na bhaviṣyanti priyo me na bhaviṣyati ahaṃ ca na bhaviṣyāmi\r\n            sarvaṃ ca na bhaviṣyati 3 tattatsmaraṇatāṃ yāti\r\n            yadyadvastvanubhūyate svapnānubhūtavatsarvaṃ gataṃ na punar īkṣyate\r\n            ihaiva tiṣṭhatas tāvad gatā naike priyāpriyāḥ tannimittaṃ tu yat\r\n            pāpaṃ tat sthitaṃ ghoram agrataḥ evam āgantuko ’smīti na mayā\r\n            pratyavekṣitam mohānunayavidveṣaiḥ kṛtaṃ pāpam anekadhā rātriṃdivam\r\n            aviśrāmam āyuṣo vardhate vyayaḥ āyasya cāgamo nāsti na mariṣyāmi kiṃ\r\n            nv aham iha śayyāgatenāpi bandhumadhye ’pi tiṣṭhatā mayaivaikena\r\n            soḍhavyā marmacchedādivedanā yamadūtair gṛhītasya kuto bandhuḥ kutaḥ\r\n            suhṛt puṇyam ekaṃ tadā trāṇaṃ mayā tac ca na sevitam\r\n            anityajīvitāsaṅgād idaṃ bhayam ajānatā pramattena mayā nāthā bahu\r\n            pāpam4 upārjitam aṅgacchedārtham apy adya nīyamāno viśuṣyati\r\n            pipāsito dīnadṛṣṭir anyad evekṣate jagat kiṃ punar bhairavākārair\r\n            yamadūtair adhiṣṭhitaḥ mahātrāsajvaragrastaḥ purīṣotsargaveṣṭitaḥ\r\n            kātarair dṛṣṭipātaiś ca trāṇānveṣī caturdiśam ko me mahābhayād asmāt\r\n            sādhus trāṇaṃ bhaviṣyati5 trāṇaśūnyā diśo dṛṣṭvā punaḥ saṃmoham\r\n            āgataḥ tadāhaṃ kiṃ kariṣyāmi tasmin sthāne mahābhaye adyaiva śaraṇaṃ\r\n            yāmi jagannāthān mahābalān jagadrakṣārtham udyuktān sarvatrāsaharān\r\n            jinān taiś cāpy adhigataṃ dharmaṃ saṃsārabhayanāśanam śaraṇaṃ yāmi\r\n            bhāvena bodhisattvagaṇaṃ tathā samantabhadrāyātmānaṃ dadāmi\r\n            bhayavihvalaḥ punaś ca mañjughoṣāya dadāmy ātmānam ātmanā taṃ\r\n            cāvalokitaṃ nāthaṃ kṛpāvyākulacāriṇam viraumy ārtaravaṃ bhītaḥ sa\r\n            māṃ rakṣatu pāpinam āryam ākāśagarbhaṃ ca kṣitigarbhaṃ ca bhāvataḥ\r\n            sarvān mahākṛpāṃś cāpi trāṇānveṣī viraumy aham yaṃ dṛṣṭvaiva6 ca\r\n            saṃtrastāḥ palāyante caturdiśam yamadūtādayo duṣṭās taṃ namasyāmi\r\n            vajriṇam atītya yuṣmadvacanaṃ sāṃprataṃ bhayadarśanāt śaraṇaṃ yāmi\r\n            vo bhīto bhayaṃ nāśayata drutam itvaravyādhibhīto ’pi vaidyavākyaṃ\r\n            na laṅghayet kim u vyādhiśatair grastaś caturbhiś caturuttaraiḥ\r\n            ekenāpi yataḥ sarve jambudvīpagatā narāḥ naśyanti yeṣāṃ bhaiṣajyaṃ\r\n            sarvadikṣu na labhyate tatra sarvajñavaidyasya sarvaśalyāpahāriṇaḥ\r\n            vākyam ullaṅghayāmīti dhig mām atyantamohitam atyapramattas tiṣṭhāmi\r\n            prapāteṣv itareṣv api kim u yojanasāhasre prapāte dīrghakālike\r\n            adyaiva maraṇaṃ naiti na yuktā me sukhāsikā avaśyam eti sā velā na\r\n            bhaviṣyāmy ahaṃ yadā abhayaṃ kena me dattaṃ niḥsariṣyāmi vā katham\r\n            avaśyaṃ na bhaviṣyāmi kasmān me susthitaṃ manaḥ\r\n            pūrvānubhūtanaṣṭebhyaḥ kiṃ me sāram avasthitam yeṣu me ’bhiniviṣṭena\r\n            gurūṇāṃ laṅghitaṃ vacaḥ jīvalokam imaṃ tyaktvā bandhūn paricitāṃs\r\n            tathā ekākī kvāpi yāsyāmi kiṃ me sarvaiḥ priyāpriyaiḥ iyam eva tu me\r\n            cintā yuktā rātrin divaṃ sadā aśubhān niyataṃ duḥkhaṃ niḥsareyaṃ\r\n            tataḥ katham mayā bālena mūḍhena yat kiṃcit pāpam ācitam prakṛtyā\r\n            yac ca sāvadyaṃ prajñaptyāvadyam eva ca tatsarvaṃ deśayāmy eṣa\r\n            nāthānām agrataḥ sthitaḥ kṛtāñjalir duḥkhabhītaḥ praṇipatya punaḥ\r\n            punaḥ atyayam atyayatvena pratigṛhṇantu nāyakāḥ na bhadrakam idaṃ\r\n            nāthā na karttavyaṃ punar mayā bodhicaryāvatāre pāpadeśanā dvitīyaḥ\r\n            paricchedaḥ apāyaduḥkhaviśrāmaṃ sarvasattvaiḥ kṛtaṃ śubham anumode\r\n            pramodena sukhaṃ tiṣṭhantu duḥkhitāḥ saṃsāraduḥkhanirmokṣam anumode\r\n            śarīriṇām bodhisattvatvabuddhatvam anumode ca tāyinām\r\n            cittotpādasamudrāṃś ca sarvasattvasukhāvahān sarvasattvahitādhānān\r\n            anumode ca śāsinām puṇyānumodanā sarvāsu dikṣu saṃbuddhān\r\n            prārthayāmi kṛtāñjaliḥ dharmapradīpaṃ kurvantu mohād\r\n            duḥkhaprapātinām adhyoṣaṇā nirvātukāmāṃś ca jinān yācayāmi\r\n            kṛtāñjaliḥ kalpān anantāṃs tiṣṭhantu mā bhūd andham idaṃ jagat\r\n            yācanā evaṃ sarvam idaṃ kṛtvā yan mayāsāditaṃ śubham tena syāṃ\r\n            sarvasattvānāṃ sarvaduḥkhapraśāntikṛt glānānām asmi bhaiṣajyaṃ\r\n            bhaveyaṃ vaidya eva ca tadupasthāyakaś caiva yāvad rogāpunarbhavaḥ\r\n            kṣutpipāsāvyathāṃ hanyām annapānapravarṣaṇaiḥ durbhikṣāntarakalpeṣu\r\n            bhaveyaṃ pānabhojanam daridrāṇāṃ ca sattvānāṃ nidhiḥ syām aham\r\n            akṣayaḥ nānopakaraṇākārair upatiṣṭheyam agrataḥ ātmabhāvāṃs tathā\r\n            bhogān sarvatryadhvagataṃ śubham nirapekṣas tyajāmy eṣa\r\n            sarvasattvārthasiddhaye sarvatyāgaś ca nirvāṇaṃ nirvāṇārthi ca me\r\n            manaḥ tyaktavyaṃ cen mayā sarvaṃ varaṃ sattveṣu dīyatām\r\n            yathāsukhīkṛtaś1 cātmā mayāyaṃ sarvadehinām ghnantu nindantu vā\r\n            nityam ākirantu ca pāṃsubhiḥ krīḍantu mama kāyena hasantu vilasantu\r\n            ca dattas tebhyo mayā kāyaś cintayā kiṃ mamānayā kārayantu ca\r\n            karmāṇi yāni teṣāṃ sukhāvaham anarthaḥ kasyacin mā bhūn mām ālambya\r\n            kadā cana yeṣāṃ kruddhāprasannā2 vā mām ālambya matir bhavet teṣāṃ\r\n            sa eva3 hetuḥ syān nityaṃ sarvārthasiddhaye4 abhyākhyāsyanti māṃ ye\r\n            ca ye cānye ’py apakāriṇaḥ utprāsakās tathānye ’pi5 sarve syur\r\n            bodhibhāginaḥ anāthānām ahaṃ nāthaḥ sārthavāhaś ca yāyinām\r\n            pārepsūnāṃ ca naubhūtaḥ setuḥ saṃkrama eva ca dīpārthinām ahaṃ dīpaḥ\r\n            śayyā śayyārthinām aham dāsārthinām ahaṃ dāso bhaveyaṃ sarvadehinām\r\n            cintāmaṇir bhadraghaṭaḥ siddhavidyā mahauṣadhiḥ bhaveyaṃ kalpavṛkṣaś\r\n            ca kāmadhenuś ca dehinām pṛthivyādīni bhūtāni niḥśeṣākāśavāsinām\r\n            sattvānām aprameyāṇāṃ yathā bhogāny anekadhā evam ākāśaniṣṭhasya\r\n            sattvadhātor anekadhā bhaveyam upajīvyo ’haṃ yāvat sarve na nirvṛtāḥ\r\n            yathā gṛhītaṃ sugatair bodhicittaṃ purātanaiḥ te bodhisattvaśikṣāyām\r\n            ānupūrvyā6 yathā sthitāḥ tadvad utpādayāmy eṣa bodhicittaṃ\r\n            jagaddhite tadvad eva ca tāḥ śikṣāḥ śikṣiṣyāmi yathā kramam evaṃ\r\n            gṛhītvā matimān bodhicittaṃ prasādataḥ punaḥ pṛṣṭhasya puṣṭyarthaṃ\r\n            cittam evaṃ praharṣayet adya me saphalaṃ janma sulabdho mānuṣo\r\n            bhavaḥ adya buddhakule jāto buddhaputro ’smi sāmpratam tathādhunā\r\n            mayā kāryaṃ svakulocitakāriṇām nirmalasya kulasyāsya kalaṅko na\r\n            bhaved yathā andhaḥ saṃkārakūṭebhyo yathā ratnam avāpnuyāt tathā\r\n            kathaṃcid apy etad bodhicittaṃ mamoditam jaganmṛtyuvināśāya jātam\r\n            etad rasāyanam jagaddāridryaśamanaṃ nidhānam idam akṣayam\r\n            jagadvyādhipraśamanaṃ bhaiṣajyam idam uttamam\r\n            bhavādhvabhramaṇaśrāntajagadviśrāmapādapaḥ durgatyuttaraṇe setuḥ\r\n            sāmānyaḥ sarvayāyinām jagatkleśopaśamana uditaś cittacandramāḥ\r\n            jagadajñānatimiraprotsāraṇamahāraviḥ saddharmakṣīramathanān\r\n            navanītaṃ samutthitam sukhabhogabubhukṣitasya vā janasārthasya\r\n            bhavādhvacāriṇaḥ sukhasattram idaṃ hy upasthitaṃ\r\n            sakalābhyāgatasattvatarpaṇam jagad adya nimantritaṃ mayā sugatatvena\r\n            sukhena cāntarā purataḥ khalu sarvatāyinām abhinandantu\r\n            surāsurādayaḥ bodhicaryāvatāre bodhicittaparigraho nāma tṛtīyaḥ\r\n            paricchedaḥ evaṃ gṛhītvā sudṛḍhaṃ bodhicittaṃ jinātmajaḥ\r\n            śikṣānatikrame yatnaṃ kuryān nityam atandritaḥ sahasā yat\r\n            samārabdhaṃ samyag yad avicāritam tatra kuryān na vety evaṃ\r\n            pratijñāyāpi yujyate vicāritaṃ tu yad buddhair mahāprājñaiś ca\r\n            tatsutaiḥ mayāpi ca yathāśakti tatra kiṃ parilambyate yadi caivaṃ\r\n            pratijñāya sādhayeyaṃ na karmaṇā etāṃ sarvāṃ visaṃvādya kā gatir me\r\n            bhaviṣyati manasā cintayitvāpi yo na dadyāt punar naraḥ sa preto\r\n            bhavatīty uktam alpamātre ’pi vastuni kim utānuttaraṃ saukhyam\r\n            uccair uddhuṣya bhāvataḥ jagatsarvaṃ visaṃvādya kā gatir me\r\n            bhaviṣyati vetti sarvajña evaitām acintyāṃ karmaṇo gatim yad\r\n            bodhicittatyāge ’pi mocayaty eva tāṃ narān bodhisattvasya tenaivaṃ\r\n            sarvāpattir garīyasī yasmād āpadyamāno ’sau sarvasattvārthahānikṛt\r\n            yo ’py anyaḥ kṣaṇam apy asya puṇyavighnaṃ kariṣyati tasya\r\n            durgatiparyanto nāsti sattvārthaghātinaḥ ekasyāpi hi sattvasya hitaṃ\r\n            hatvā hato bhavet aśeṣākāśaparyantavāsināṃ kim u dehinām evam\r\n            āpattibalato bodhicittabalena ca dolāyamānaḥ saṃsāre bhūmiprāptaś\r\n            cirāyate tasmād yathāpratijñātaṃ sādhanīyaṃ mayādarāt nādya cet\r\n            kriyate yatnas talenāsmi talaṃ gataḥ aprameyā gatā buddhāḥ\r\n            sarvasattvagaveṣakāḥ naiṣām ahaṃ svadoṣeṇa cikitsāgocaraṃ gataḥ\r\n            adyāpi cet tathaiva syāṃ yathaivāhaṃ punaḥ punaḥ\r\n            durgativyādhimaraṇacchedabhedādy avāpnuyām kadā tathāgatotpādaṃ\r\n            śraddhāṃ mānuṣyam eva ca kuśalābhyāsayogyatvam evaṃ lapsye\r\n            ’tidurlabham ārogyaṃ divasaṃ cedaṃ sabhaktaṃ nirupadravam āyuḥ\r\n            kṣaṇaṃ visaṃvādi kāyo yācitakopamaḥ1 na hīdṛśair maccaritair\r\n            mānuṣyaṃ labhyate punaḥ alabhyamāne mānuṣye pāpam eva kutaḥ śubham\r\n            yadā kuśalayogyo ’pi kuśalaṃ na karomy aham apāyaduḥkhaiḥ saṃmūḍhaḥ\r\n            kiṃ kariṣyāmy ahaṃ tadā akurvataś ca kuśalaṃ pāpaṃ cāpy upacinvataḥ\r\n            hataḥ sugataśabdo ’pi kalpakoṭiśatair api ata evāha bhagavān mānuṣam\r\n            atidurlabham mahārṇavayugacchidrakūrmagrīvārpaṇopamam ekakṣaṇakṛtāt\r\n            pāpād avīcau kalpam āsyate anādikālopacitāt pāpāt kā sugatau kathā\r\n            na ca tanmātram evāsau vedayitvā vimucyate tasmāt tadvedayann eva\r\n            pāpam anyat prasūyate nātaḥ parā vañcanāsti na ca moho ’sty ataḥ\r\n            paraḥ yad īdṛśaṃ kṣaṇaṃ prāpya nābhyastaṃ kuśalaṃ mayā yadi caivaṃ\r\n            vimṛṣyāmi2 punaḥ sīdāmi mohitaḥ śociṣyāmi ciraṃ bhūyo yamadūtaiḥ\r\n            pracoditaḥ ciraṃ dhakṣyati me kāyaṃ nārakāgniḥ suduḥsahaḥ\r\n            paścāttāpānalaś cittaṃ ciraṃ dhakṣyaty aniścitam kathaṃcid api\r\n            saṃprāpto hitabhūmiṃ sudurlabhām jānann api ca nīye ’haṃ tān eva\r\n            narakān punaḥ atra me cetanā nāsti mantrair iva vimohitaḥ na jāne\r\n            kena muhyāmi ko ’trāntar mama tiṣṭhati hastapādādirahitās\r\n            tṛṣṇādveṣādiśatravaḥ na śūrā na ca te prājñāḥ kathaṃ dāsīkṛto ’smi\r\n            taiḥ maccittāvasthitā eva ghnanti mām eva susthitāḥ tatrāpy ahaṃ na\r\n            kupyāmi dhigasthānasahiṣṇutām sarve devā manuṣyāś ca yadi syur mama\r\n            śatravaḥ te ’pi nāvīcikaṃ vahniṃ samudānayituṃ kṣamāḥ meror api yadā\r\n            saṅgān na bhasmāpy upalabhyate kṣaṇāt kṣipanti māṃ tatra balinaḥ\r\n            kleśaśatravaḥ na hi sarvānyaśatrūṇāṃ dīrgham āyur apīdṛśam\r\n            anādyantaṃ mahādīrghaṃ yan mama kleśavairiṇām sarve hitāya kalpante\r\n            ānukūlyena sevitāḥ sevyamānās tv amī kleśāḥ sutarāṃ duḥkhakārakāḥ\r\n            iti satatadīrghavairiṣu vyasanaughaprasavaikahetuṣu hṛdaye nivasatsu\r\n            nirbhayaṃ mama saṃsāraratiḥ kathaṃ bhavet bhavacārakapālakā ime\r\n            narakādiṣv api vadhyaghātakāḥ mativeśmani lobhapañjare yadi\r\n            tiṣṭhanti kutaḥ sukhaṃ mama tasmān na tāvad aham atra dhuraṃ kṣipāmi\r\n            yāvan na śatrava ime nihatāḥ samakṣam svalpe ’pi tāvad apakāriṇi\r\n            baddharoṣā mānonnatās tam anihatya na yānti nidrām\r\n            prakṛtimaraṇaduḥkhitāndhakārān raṇaśirasi prasabhaṃ nihantum ugrāḥ\r\n            agaṇitaśaraśaktighātaduḥkhā na vimukhatām upayānty asādhayitvā kim\r\n            uta satatasarvaduḥkhahetūn prakṛtiripūn upahantum udyatasya bhavati\r\n            mama viṣādadainyam adya vyasanaśatair api kena hetunā vai\r\n            akāraṇenaiva ripukṣatāni gātreṣv alaṃkāravad udvahanti\r\n            mahārthasiddhyai tu samudyatasya duḥkhāni kasmān mama bādhakāni\r\n            svajīvikāmātranibaddhacittāḥ kaivartacaṇḍālakṛṣīvalādyāḥ\r\n            śītātapādivyasanaṃ sahante jagaddhitārthaṃ na kathaṃ sahe ’ham\r\n            daśadigvyomaparyantajagatkleśavimokṣaṇe pratijñāya madātmāpi na\r\n            kleśebhyo vimocitaḥ ātmapramāṇam ajñātvā bruvann unmattakas tadā\r\n            anivartī bhaviṣyāmi tasmāt kleśavadhe sadā atra grahī bhaviṣyāmi\r\n            baddhavairaś ca vigrahī anyatra tadvidhāt kleśāt\r\n            kleśaghātānubandhinaḥ galantv antrāṇi me kāmaṃ śiraḥ patatu nāma me\r\n            na tv evāvanatiṃ yāmi sarvathā kleśavairiṇām nirvāsitasyāpi tu nāma\r\n            śatror deśāntare sthānaparigrahaḥ syāt yataḥ punaḥ saṃbhṛtaśaktir\r\n            eti na kleśaśatror gatir īdṛśī tu kvāsau yāyān manmanaḥstho nirastaḥ\r\n            sthitvā yasmin madvadhārthaṃ yateta nodyogo me kevalaṃ mandabuddheḥ\r\n            kleśāḥ prajñādṛṣṭisādhyā varākāḥ na kleśā viṣayeṣu nendriyagaṇe nāpy\r\n            antarāle sthitā nāto ’nyatra kuha sthitāḥ punar ime3 mathnanti\r\n            kṛtsnaṃ jagat māyaiveyam ato vimuñca hṛdayatrāsaṃ4 bhajasvodyamaṃ\r\n            prajñārthaṃ kim akāṇḍa eva narakeṣv ātmānam ābādhase 1 evaṃ\r\n            viniścitya karomi yatnaṃ yathoktaśikṣāpratipattihetoḥ vaidyopadeśāc\r\n            calataḥ kuto ’sti bhaiṣajyasādhyasya nirāmayatvam bodhicaryāvatāre\r\n            bodhicittāpramādo nāma caturthaḥ paricchedaḥ śikṣāṃ rakṣitukāmena\r\n            cittaṃ rakṣyaṃ prayatnataḥ na śikṣā rakṣituṃ śakyā calaṃ cittam\r\n            arakṣatā adāntā mattamātaṅgā na kurvantīha tāṃ vyathām karoti yām\r\n            avīcyādau muktaś cittamataṅgajaḥ baddhaś cec cittamātaṅgaḥ\r\n            smṛtirajjvā samantataḥ bhayam astaṃ gataṃ sarvaṃ kṛtsnaṃ kalyāṇam\r\n            āgatam vyāghrāḥ siṃhā gajā ṛkṣāḥ sarpāḥ sarve ca śatravaḥ sarve\r\n            narakapālāś ca ḍākinyo rākṣasās tathā sarve baddhā bhavanty ete\r\n            cittasyaikasya bandhanāt cittasyaikasya damanāt sarve dāntā bhavanti\r\n            ca yasmād bhayāni sarvāṇi duḥkhāny apramitāni ca cittād eva\r\n            bhavantīti kathitaṃ tattvavādinā śastrāṇi kena narake ghaṭitāni\r\n            prayatnataḥ taptāyaḥkuṭṭimaṃ kena kuto jātāś ca tāḥ striyaḥ\r\n            pāpacittasamudbhūtaṃ tattatsarvaṃ jagau muniḥ tasmān na kaścit\r\n            trailokye cittād anyo bhayānakaḥ adaridraṃ jagat kṛtvā dānapāramitā\r\n            yadi jagaddaridram adyāpi sā kathaṃ pūrvatāyinām phalena saha\r\n            sarvasvatyāgacittāj1 jane ’khile dānapāramitā proktā tasmāt sā\r\n            cittam eva tu matsyādayaḥ kva nīyantāṃ mārayeyaṃ yato na tān labdhe\r\n            viraticitte tu śīlapāramitā matā kiyato mārayiṣyāmi durjanān\r\n            gaganopamān mārite krodhacitte tu māritāḥ sarvaśatravaḥ bhūmiṃ\r\n            chādayituṃ sarvāṃ kutaś carma bhaviṣyati upānaccarmamātreṇa channā\r\n            bhavati medinī bāhyā bhāvā mayā tadvac chakyā vārayituṃ na hi\r\n            svacittaṃ vārayiṣyāmi kiṃ mamānyair nivāritaiḥ sahāpi\r\n            vākcharīrābhyāṃ mandavṛtter na tat phalam yat paṭor ekakasyāpi\r\n            cittasya brahmatādikam japās tapāṃsi sarvāṇi dīrghakālakṛtāny api\r\n            anyacittena mandena vṛthaivety āha sarvavit duḥkhaṃ hantuṃ sukhaṃ\r\n            prāptuṃ te bhramanti mudhāmbare2 yair etad dharmasarvasvaṃ cittaṃ\r\n            guhyaṃ na bhāvitam tasmāt svadhiṣṭhitaṃ cittaṃ mayā kāryaṃ\r\n            surakṣitam cittarakṣāvrataṃ muktvā bahubhiḥ kiṃ mama vrataiḥ yathā\r\n            capalamadhyastho rakṣati vraṇam ādarāt evaṃ durjanamadhyastho rakṣec\r\n            cittavraṇaṃ sadā vraṇaduḥkhalavād bhīto rakṣāmi vraṇam ādarāt\r\n            saṃghātaparvatāghātād bhītaś cittavraṇaṃ na kim anena hi vihāreṇa\r\n            viharan durjaneṣv api pramadājanamadhye ’pi yatir dhīro na khaṇḍyate\r\n            lābhā naśyantu me kāmaṃ satkāraḥ kāyajīvitam naśyatv anyac ca\r\n            kuśalaṃ mā tu cittaṃ kadā cana cittaṃ rakṣitukāmānāṃ mayaiṣa kriyate\r\n            ’ñjaliḥ smṛtiṃ ca saṃprajanyaṃ ca sarvayatnena rakṣata vyādhyākulo\r\n            naro yadvan na kṣamaḥ sarvakarmasu tathābhyāṃ vyākulaṃ cittaṃ na\r\n            kṣamaṃ sarvakarmasu asaṃprajanyacittasya śrutacintitabhāvitam\r\n            sacchidrakumbhajalavan na smṛtāv avatiṣṭhate aneke śrutavanto ’pi\r\n            śrāddhā yatnaparā api asaṃprajanyadoṣeṇa bhavanty āpattikaśmalāḥ\r\n            asaṃprajanyacaureṇa smṛtimoṣānusāriṇā upacityāpi puṇyāni muṣitā\r\n            yānti durgatim kleśataskarasaṃgho ’yam avatāragaveṣakaḥ\r\n            prāpyāvatāraṃ muṣṇāti hanti sadgatijīvitam tasmāt smṛtir manodvārān\r\n            nāpaneyā kadā cana gatāpi pratyupasthāpyā saṃsmṛtyāpāyikīṃ vyathām\r\n            upādhyāyānuśāsinyā bhītyāpy ādarakāriṇām dhanyānāṃ gurusaṃvāsāt\r\n            sukaraṃ jāyate smṛtiḥ buddhāś ca bodhisattvāś ca\r\n            sarvatrāvyāhatekṣaṇāḥ sarvam evāgratas teṣāṃ teṣām asmi puraḥ\r\n            sthitaḥ iti dhyātvā tathā tiṣṭhet trapādarabhayānvitaḥ\r\n            buddhānusmṛtir apy evaṃ bhavet tasya muhur muhuḥ saṃprajanyaṃ\r\n            tadāyāti na ca yāty āgataṃ punaḥ smṛtir yadā manodvāre rakṣārtham\r\n            avatiṣṭhate pūrvaṃ tāvad idaṃ cittaṃ sadopasthāpyam īdṛśam\r\n            nirindriyeṇeva mayā sthātavyaṃ kāṣṭhavat sadā niṣphalā netravikṣepā\r\n            na kartavyāḥ kadā cana nidhyāyantīva satataṃ kāryā dṛṣṭir adhogatā\r\n            dṛṣṭiviśrāmahetos tu diśaḥ paśyet kadā cana ābhāsamātraṃ dṛṣṭvā ca\r\n            svāgatārthaṃ vilokayet mārgādau bhayabodhārthaṃ muhuḥ paśyec\r\n            caturdiśam diśo viśramya3 vīkṣeta parāvṛtyaiva pṛṣṭhataḥ sared\r\n            apasared vāpi puraḥ paścān nirūpya ca evaṃ sarvāsv avasthāsu kāryaṃ\r\n            buddhvā samācaret kāyenaivam avastheyam ity ākṣipya kriyāṃ punaḥ\r\n            kathaṃ kāyaḥ sthita iti draṣṭavyaṃ punar antarā nirūpyaḥ4\r\n            sarvayatnena cittamattadvipas tathā dharmacintāmahāstambhe yathā\r\n            baddho na mucyate kutra me vartata iti pratyavekṣyaṃ tathā manaḥ\r\n            samādhānadhuraṃ naiva kṣaṇam apy utsṛjed yathā bhayotsavādisaṃbandhe\r\n            yady aśakto yathā sukham dānakāle tu śīlasya yasmād uktam upekṣaṇam\r\n            yad buddhvā kartum ārabdhaṃ tato ’nyan na vicintayet tad eva tāvan\r\n            niṣpādyaṃ tadgatenāntarātmanā evaṃ hi sukṛtaṃ sarvam anyathā\r\n            nobhayaṃ5 bhavet asaṃprajanyakleśo ’pi vṛddhiṃ caivaṃ gamiṣyati\r\n            nānāvidhapralāpeṣu vartamāneṣv anekadhā kautūhaleṣu sarveṣu hanyād\r\n            autsukyam āgatam mṛnmardanatṛṇacchedarekhādyaphalam āgatam smṛtvā\r\n            tāthāgatīṃ śikṣāṃ bhītas tatkṣaṇam utsṛjet yadā calitukāmaḥ syād\r\n            vaktukāmo ’pi vā bhavet svacittaṃ pratyavekṣyādau kuryād dhairyeṇa\r\n            yuktimat anunītaṃ pratihataṃ yadā paśyet svakaṃ manaḥ na kartavyaṃ\r\n            na vaktavyaṃ sthātavyaṃ kāṣṭhavat tadā uddhataṃ sopahāsaṃ vā yadā\r\n            mānamadānvitam sotprāsātiśayaṃ vakraṃ vañcakaṃ ca mano bhavet\r\n            yadātmotkarṣaṇābhāsaṃ parapaṃsanam eva ca sādhikṣepaṃ sasaṃrambhaṃ\r\n            sthātavyaṃ kāṣṭhavat tadā lābhasatkārakīrtyarthi parivārārthi vā\r\n            punaḥ upasthānārthi me cittaṃ tasmāt tiṣṭhāmi kāṣṭhavat\r\n            parārtharūkṣaṃ6 svārthārthi pariṣatkāmam eva vā vaktum icchati me\r\n            cittaṃ tasmāt tiṣṭhāmi kāṣṭhavat asahiṣṇv alasaṃ bhītaṃ7 pragalbhaṃ\r\n            mukharaṃ tathā svapakṣābhiniviṣṭaṃ vā tasmāt tiṣṭhāmi kāṣṭhavat evaṃ\r\n            saṃkliṣṭam ālokya niṣphalārambhi vā manaḥ nigṛhṇīyād dṛḍhaṃ śūraḥ\r\n            pratipakṣeṇa tatsadā suniścitaṃ suprasannaṃ dhīraṃ sādaragauravam\r\n            salajjaṃ sabhayaṃ śāntaṃ parārādhanatatparam parasparaviruddhābhir\r\n            bālecchābhir akheditam kleśotpādād idaṃ hy etad eṣām iti dayānvitam\r\n            ātmasattvavaśaṃ nityam anavadyeṣu vastuṣu nirmāṇam iva nirmānaṃ\r\n            dhārayāmy eṣa mānasam cirāt prāptaṃ kṣaṇavaraṃ smṛtvā smṛtvā muhur\r\n            muhuḥ dhārayāmīdṛśaṃ cittam aprakampyaṃ sumeruvat gṛdhrair\r\n            āmiṣasaṃgṛddhaiḥ kṛṣyamāṇa itastataḥ na karoty anyathā kāyaḥ kasmād\r\n            atra pratikriyām rakṣasīmaṃ manaḥ kasmād ātmīkṛtya samucchrayam tvat\r\n            taś cet pṛthag evāyaṃ tenātra tava ko vyayaḥ na svīkaroṣi he mūḍha\r\n            kāṣṭhaputtalakaṃ8 śucim amedhyaghaṭitaṃ yantraṃ kasmād rakṣasi\r\n            pūtikam imaṃ carmapuṭaṃ tāvat svabuddhyaiva pṛthak kuru\r\n            asthipañjarato māṃsaṃ prajñāśastreṇa mocaya asthīny api pṛthak kṛtvā\r\n            paśya majjānam antataḥ kim atra sāram astīti svayam eva vicāraya\r\n            evam anviṣya yatnena na dṛṣṭaṃ sāram atra te adhunā vada kasmāt tvaṃ\r\n            kāyam adyāpi rakṣasi na khāditavyam aśuci9 tvayā peyaṃ na śoṇitam\r\n            nāntrāṇi cūṣitavyāni kiṃ kāyena kariṣyasi yuktaṃ gṛdhraśṛgālāder\r\n            āhārārthaṃ tu rakṣitum10 karmopakaraṇaṃ tv etan manuṣyāṇāṃ śarīrakam\r\n            evaṃ te rakṣataś cāpi mṛtyur ācchidya nirdayaḥ kāyaṃ dāsyati\r\n            gṛdhrebhyas tadā tvaṃ kiṃ kariṣyasi na sthāsyatīti bhṛtyāya na\r\n            vastrādi pradīyate kāyo yāsyati khāditvā kasmāt tvaṃ kuruṣe vyayam\r\n            dattvāsmai vetanaṃ tasmāt svārthaṃ kuru mano ’dhunā na hi\r\n            vaitanikopāttaṃ sarvaṃ tasmai pradīyate kāye naubuddhim ādhāya\r\n            gatyāgamananiśrayāt yathākāmaṃ gamaṃ kāyaṃ kuru sattvārthasiddhaye\r\n            evaṃ vaśīkṛtasvātmā nityaṃ smitamukho bhavet tyajed bhṛkuṭisaṃkocaṃ\r\n            pūrvābhāṣī jagatsuhṛt saśabdapātaṃ sahasā na pīṭhādīn vinikṣipet\r\n            nāsphālayet kapāṭaṃ ca syān niḥśabdaruciḥ sadā bako biḍālaś cauraś\r\n            ca niḥśabdo nibhṛtaś caran prāpnoty abhimataṃ kāryam evaṃ nityaṃ\r\n            yatiś caret paracodanadakṣāṇām anadhīṣṭopakāriṇām pratīcchec chirasā\r\n            vākyaṃ sarvaśiṣyaḥ sadā bhavet subhāṣiteṣu sarveṣu sādhukāram\r\n            udīrayet puṇyakāriṇam ālokya stutibhiḥ saṃpraharṣayet parokṣaṃ ca\r\n            guṇān11 brūyād anubrūyāc ca toṣataḥ svavarṇe bhāṣyamāṇe ca bhāvayet\r\n            tad guṇajñatām sarvārambhā hi tuṣṭyarthāḥ sā vittair api durlabhā\r\n            bhokṣye12 tuṣṭisukhaṃ tasmāt paraśramakṛtair guṇaiḥ na cātra me\r\n            vyayaḥ kaścit paratra ca mahatsukham aprītiduḥkhaṃ dveṣais tu\r\n            mahadduḥkhaṃ paratra ca viśvastavinyastapadaṃ vispaṣṭārthaṃ\r\n            manoramam śrutisaukhyaṃ kṛpāmūlaṃ mṛdumandasvaraṃ vadet ṛju paśyet\r\n            sadā sattvāṃś cakṣuṣā saṃpibann iva etān eva samāśritya buddhatvaṃ\r\n            me bhaviṣyati sātatyābhiniveśotthaṃ pratipakṣottham13 eva ca\r\n            guṇopakārikṣetre ca duḥkhite ca mahacchubham dakṣa utthānasaṃpannaḥ\r\n            svayaṃkārī sadā bhavet nāvakāśaḥ pradātavyaḥ kasyacit sarvakarmasu\r\n            uttarottarataḥ śreṣṭhā dānapāramitādayaḥ netarārthaṃ tyajec\r\n            chreṣṭhām anyatrācārasetutaḥ evaṃ buddhvā parārtheṣu bhavet satatam\r\n            utthitaḥ niṣiddham apy anujñātaṃ kṛpālor arthadarśinaḥ\r\n            vinipātagatānāthavratasthān saṃvibhajya ca bhuñjīta madhyamāṃ mātrāṃ\r\n            tricīvarabahis tyajet saddharmasevakaṃ kāyam itarārtaṃ na pīḍayet\r\n            evam eva hi sattvānām āśām āśu prapūrayet tyajen na jīvitaṃ tasmād\r\n            aśuddhe karuṇāśaye tulyāśaye tu tat tyājyam itthaṃ na parihīyate\r\n            dharmaṃ nirgaurave svasthe na śiroveṣṭhite vadet\r\n            sacchatradaṇḍaśastre ca nāvaguṇṭhitamastake gambhīrodāram alpeṣu na\r\n            strīṣu puruṣaṃ vinā hīnotkṛṣṭeṣu dharmeṣu samaṃ gauravam ācaret\r\n            nodāradharmapātraṃ ca hīne dharme niyojayet na cācāraṃ parityajya\r\n            sūtramantraiḥ pralobhayet dantakāṣṭhasya kheṭasya visarjanam\r\n            apāvṛtam neṣṭaṃ jale sthale bhogye mūtrādeś cāpi garhitam mukhapūraṃ\r\n            na bhuñjīta saśabdaṃ prasṛtānanam pralambapādaṃ nāsīta na bāhū\r\n            mardayet samam naikayānyastriyā kuryād yānaṃ śayanam āsanam\r\n            lokāprasādakaṃ sarvaṃ dṛṣṭvā pṛṣṭvā ca varjayet nāṅgulyā kārayet\r\n            kiṃcid dakṣiṇena tu sādaram samastenaiva hastena mārgam apy evam\r\n            ādiśet na bāhūtkṣepakaṃ kaṃcic chabdayed alpasaṃbhrame acchaṭādi tu\r\n            kartavyam anyathā syād asaṃvṛtaḥ nāthanirvāṇaśayyāvac chayītepsitayā\r\n            diśā saṃprajānaṃl laghūtthānaḥ prāgavaśyaṃ niyogataḥ ācāro\r\n            bodhisattvānām aprameya udāhṛtaḥ cittaśodhanam ācāraṃ niyataṃ tāvad\r\n            ācaret rātriṃ divaṃ ca triskandhaṃ trikālaṃ ca pravartayet\r\n            śeṣāpattiśamas tena bodhicittajināśrayāt yā avasthāḥ prapadyeta\r\n            svayaṃ paravaśo ’pi vā tāsv avasthāsu yāḥ śikṣāḥ śikṣet tā eva\r\n            yatnataḥ na hi tad vidyate kiṃcid yan na śikṣyaṃ jinātmajaiḥ na tad\r\n            asti na yat puṇyam evaṃ viharataḥ sataḥ pāraṃparyeṇa sākṣād vā\r\n            sattvārthaṃ nānyadācaret sattvānām eva cārthāya sarvaṃ bodhāya\r\n            nāmayet sadā kalyāṇamitraṃ ca jīvitārthe ’pi na tyajet\r\n            bodhisattvavratadharaṃ mahāyānārthakovidam śrīsaṃbhavavimokṣāc ca\r\n            śikṣed yad guruvartanam etac cānyac ca buddhoktaṃ jñeyaṃ\r\n            sūtrāntavācanāt śikṣāḥ sūtreṣu dṛśyante tasmāt sūtrāṇi vācayet\r\n            ākāśagarbhasūtre ca mūlāpattīr nirūpayet śikṣāsamuccayo ’vaśyaṃ\r\n            draṣṭavyaś ca14 punaḥ punaḥ vistareṇa sadācāro yasmāt tatra\r\n            pradarśitaḥ saṃkṣepeṇātha vā tāvat paśyet sūtrasamuccayam\r\n            āryanāgārjunābaddhaṃ dvitīyaṃ ca prayatnataḥ yato nivāryate yatra\r\n            yad eva ca niyujyate tal lokacittarakṣārthaṃ śikṣāṃ dṛṣṭvā samācaret\r\n            etad eva samāsena saṃprajanyasya lakṣaṇam yat kāyacittāvasthāyāḥ\r\n            pratyavekṣā muhur muhuḥ kāyenaiva paṭhiṣyāmi vākpāṭhena tu kiṃ\r\n            bhavet cikitsāpāṭhamātreṇa rogiṇaḥ kiṃ bhaviṣyati bodhicaryāvatāre\r\n            saṃprajanyarakṣaṇaḥ nāma pañcamaḥ paricchedaḥ sarvam etat sucaritaṃ\r\n            dānaṃ sugatapūjanam kṛtaṃ kalpasahasrair1 yat pratighaḥ pratihanti\r\n            tat na ca dveṣasamaṃ pāpaṃ na ca kṣāntisamaṃ tapaḥ tasmāt kṣāntiṃ\r\n            prayatnena bhāvayed vividhair nayaiḥ manaḥ śamaṃ na gṛhṇāti na\r\n            prītisukham aśnute na nidrāṃ na dhṛtiṃ yāti dveṣaśalye hṛdi sthite\r\n            pūjayaty arthamānair yān ye ’pi cainaṃ samāśritāḥ te ’py enaṃ hantum\r\n            icchanti svāminaṃ dveṣadurbhagam suhṛdo ’py udvijante ’smād dadāti\r\n            na ca sevyate saṃkṣepān nāsti tat kiṃ cit krodhano yena susthitaḥ\r\n            evamādīni duḥkhāni karotīty ari saṃjñayā yaḥ krodhaṃ hanti\r\n            nirbandhāt sa sukhīha paratra ca aniṣṭakaraṇāj jātam iṣṭasya ca\r\n            vighātanāt daurmanasyāśanaṃ prāpya dveṣo dṛpto2 nihanti mām tasmād\r\n            vighātayiṣyāmi tasyāśanam ahaṃ ripoḥ yasmān na madvadhād anyat\r\n            kṛtyam asyāsti vairiṇaḥ atyaniṣṭāgamenāpi na kṣobhyā muditā mayā\r\n            daurmanasye ’pi nāstīṣṭaṃ3 kuśalaṃ tv avahīyate yady asty eva\r\n            pratīkāro daurmanasyena tatra kim atha nāsti pratīkāro daurmanasyena\r\n            tatra kim duḥkhaṃ nyakkārapāruṣyam ayaśaś cety anīpsitam priyāṇām\r\n            ātmano vāpi śatroś ca etad viparyayāt kathaṃ cil labhyate saukhyaṃ\r\n            duḥkhaṃ sthitam ayatnataḥ duḥkhenaiva ca niḥsāraś cetas tasmād\r\n            dṛḍhībhava durgāputrakakarṇāṭā dāhacchedādivedanām vṛthā sahante\r\n            muktyartham ahaṃ kasmāt tu kātaraḥ na kiṃcid asti tad vastu yad\r\n            abhyāsasya duṣkaram tasmān mṛduvyathābhyāsāt soḍhavyāpi mahāvyathā\r\n            uddaṃśadaṃśamaśakakṣutpipāsādivedanām mahatkaṇḍvādiduḥkhaṃ ca kim\r\n            anarthaṃ na paśyasi śītoṣṇavṛṣṭivātādhvavyādhibandhanatāḍanaiḥ\r\n            saukumāryaṃ na kartavyam anyathā vardhate vyathā kecit svaśoṇitaṃ\r\n            dṛṣṭvā vikramante viśeṣataḥ paraśoṇitam apy eke dṛṣṭvā mūrchāṃ\r\n            vrajanti yat tac cittasya dṛḍhatvena kātaratvena cāgatam\r\n            duḥkhaduryodhanas tasmād bhaved abhibhaved vyathām duḥkhe ’pi naiva\r\n            cittasya prasādaṃ kṣobhayed budhaḥ saṃgrāmo4 hi saha kleśair yuddhe\r\n            ca sulabhā vyathā urasārātighātān ye pratīcchanto jayanty arīn te te\r\n            vijayinaḥ śūrāḥ śeṣās tu mṛtamārakāḥ guṇo ’paraś ca duḥkhasya\r\n            yatsaṃvegān madacyutiḥ saṃsāriṣu ca kāruṇyaṃ pāpād bhītir jine spṛhā\r\n            pittādiṣu na me kopo mahāduḥkhakareṣv5 api sacetaneṣu kiṃ kopaḥ te\r\n            ’pi pratyayakopitāḥ aniṣyamāṇam apy etac chūlam utpadyate yathā\r\n            aniṣyamāṇo ’pi balāt krodha utpadyate tathā kupyāmīti na saṃcintya\r\n            kupyati svecchayā janaḥ utpatsya ity abhipretya krodha utpadyate na\r\n            ca ye kecid aparādhās tu pāpāni vividhāni ca sarvaṃ tat\r\n            pratyayabalāt svatantraṃ tu na vidyate na ca pratyayasāmagryā\r\n            janayāmīti cetanā na cāpi janitasyāsti janito ’smīti cetanā yat\r\n            pradhānaṃ kilābhīṣṭaṃ yat tadātmeti kalpitam tad eva hi bhavāmīti na\r\n            saṃcintyopajāyate anutpannaṃ hi tan nāsti ka icched bhavituṃ tadā\r\n            viṣayavyāpṛtatvāc6 ca niroddhum api nehate nityo hy acetanaś cātmā\r\n            vyomavat sphuṭam akriyaḥ pratyayāntarasaṅge ’pi nirvikārasya kā\r\n            kriyā yaḥ pūrvavat kriyākāle kriyāyās tena kiṃ kṛtam tasya kriyeti\r\n            saṃbandhe katarat tan7 nibandhanam evaṃ paravaśaṃ sarvaṃ yadvaśaṃ so\r\n            ’pi cāvaśaḥ nirmāṇavadaceṣṭeṣu bhāveṣv evaṃ kva kupyate vāraṇāpi na\r\n            yuktaivaṃ kaḥ kiṃ vārayatīti cet yuktā pratītyatā yasmād\r\n            duḥkhasyoparatir matā tasmād amitraṃ mitraṃ vā dṛṣṭvāpy\r\n            anyāyakāriṇam īdṛśāḥ pratyayā asyety evaṃ matvā sukhī bhavet yadi tu\r\n            svecchayā siddhiḥ sarveṣām eva dehinām na bhavet kasyacid duḥkhaṃ na\r\n            duḥkhaṃ kaścid icchati pramādād ātmanātmānaṃ bādhante kaṇṭakādibhiḥ\r\n            bhaktacchedādibhiḥ kopād durāpastryādilipsayā udvandhanaprapātaiś ca\r\n            viṣāpathyādibhakṣaṇaiḥ nighnanti kecid ātmānam apuṇyācaraṇena ca\r\n            yadaivaṃ kleśavaśyatvād ghnanty ātmānam api priyam tadaiṣāṃ\r\n            parakāyeṣu parihāraḥ kathaṃ bhavet kleśonmattīkṛteṣv eṣu pravṛtteṣv\r\n            ātmaghātane na kevalaṃ dayā nāsti krodha utpadyate katham yadi\r\n            svabhāvo bālānāṃ paropadravakāritā teṣu kopo na yukto me yathāgnau\r\n            dahanātmake atha doṣo ’yam āgantuḥ sattvāḥ prakṛtipeśalāḥ yathāpy\r\n            ayuktas tatkopaḥ kaṭudhūme yathāmbare mukhyaṃ daṇḍādikaṃ hitvā\r\n            prerake yadi kupyate dveṣeṇa preritaḥ so ’pi dveṣe dveṣo ’stu me\r\n            varam mayāpi pūrvaṃ sattvānām īdṛśyeva vyathā kṛtā tasmān me yuktam\r\n            evaitat sattvopadravakāriṇaḥ tacchastraṃ mama kāyaś ca dvayaṃ\r\n            duḥkhasya kāraṇam tena śastraṃ mayā kāyo gṛhītaḥ kutra kupyate gaṇḍo\r\n            ’yaṃ pratim ākāro gṛhīto ghaṭṭanāsahaḥ tṛṣṇāndhena mayā tatra\r\n            vyathāyāṃ kutra kupyate duḥkhaṃ necchāmi duḥkhasya hetum icchāmi\r\n            bāliśaḥ svāparādhāgate duḥkhe kasmād anyatra kupyate asipattravanaṃ\r\n            yadvad yathā nārakapakṣiṇaḥ matkarmajanitā eva tathedaṃ kutra\r\n            kupyate{\" \"}\r\n        </p>\r\n    );\r\n}\r\n\r\nexport default TextHtml;\r\n","// @flow\r\nimport React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport styles from \"components/TextDetail/Text.css\";\r\nimport TextSegment from \"lib/TextSegment\";\r\nimport {\r\n    INSERTION_KEY,\r\n    DELETION_KEY,\r\n    PAGE_BREAK_KEY,\r\n    LINE_BREAK_KEY,\r\n} from \"lib/AnnotatedText\";\r\nimport _ from \"lodash\";\r\nimport SegmentedText from \"lib/SegmentedText\";\r\nimport Annotation from \"lib/Annotation\";\r\nimport Witness from \"lib/Witness\";\r\nimport { ANNOTATION_TYPES } from \"lib/Annotation\";\r\nimport type { AnnotationUniqueId } from \"lib/Annotation\";\r\nimport GraphemeSplitter from \"grapheme-splitter\";\r\nimport { withTheme } from \"@mui/styles\";\r\n\r\nexport function idForSegment(segment: TextSegment): string {\r\n    return \"s2_\" + segment.start;\r\n}\r\n\r\nexport function idForDeletedSegment(segment: TextSegment): string {\r\n    return \"ds_\" + segment.start;\r\n}\r\n\r\n// export function idForInsertion(segment: TextSegment): string {\r\n//     return \"i_\" + segment.start;\r\n// }\r\n\r\n// export function idForPageBreak(segment: TextSegment): string {\r\n//     return \"p_\" + (segment.end + 1);\r\n// }\r\n\r\n// export function idForLineBreak(segment: TextSegment): string {\r\n//     return \"l_\" + (segment.end + 1);\r\n// }\r\n\r\nexport type Props = {\r\n    segmentedText: SegmentedText,\r\n    annotationPositions: { [string]: Annotation[] },\r\n    selectedSegmentId: (id: string) => void,\r\n    activeAnnotations: { [AnnotationUniqueId]: Annotation } | null,\r\n    getBaseAnnotation: (annotation: Annotation) => Annotation,\r\n    selectedAnnotatedSegments: TextSegment[],\r\n    row: number,\r\n    activeAnnotation: Annotation | null,\r\n    searchValue: string | null,\r\n    selectedSearchResult: {\r\n        textId: number,\r\n        start: number,\r\n        length: number,\r\n    } | null,\r\n    searchStringPositions: { [position: number]: [number, number] },\r\n    fontSize?: number,\r\n    activeWitness: Witness,\r\n    textAlignmentById: {},\r\n    selectedSourceRange: [],\r\n    selectedTargetRange: [],\r\n    changeSyncIdOnClick: () => void,\r\n};\r\n\r\nexport type State = {\r\n    segmentedText: SegmentedText,\r\n};\r\n\r\n// import ReactDOMServer from \"react-dom/server\";\r\n// import PageBreakIcon from \"images/page_break_icon.svg\";\r\n// const PARA_SYMBOL = String.fromCharCode(182);\r\n// const pageBreakIconString = ReactDOMServer.renderToStaticMarkup(\r\n//     <PageBreakIcon />\r\n// );\r\n\r\nclass Text2 extends React.Component<Props, State> {\r\n    _renderedSegments: TextSegment[] | null;\r\n    _renderedHtml: { __html: string } | null;\r\n    textAlignmentById;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            segmentedText: props.segmentedText,\r\n        };\r\n        this.textAlignmentById = this.props.textAlignmentById;\r\n        this._renderedSegments = null;\r\n        this._renderedHtml = null;\r\n    }\r\n\r\n    UNSAFE_componentWillReceiveProps(nextProps: Props) {\r\n        this.setState((prevState: State, props: Props) => {\r\n            return {\r\n                ...prevState,\r\n                segmentedText: nextProps.segmentedText,\r\n            };\r\n        });\r\n    }\r\n\r\n    // annotationsForSegment(segment: TextSegment): Annotation[] {\r\n    //     let annotations: Annotation[] = [];\r\n    //     const foundAnnotations = this.props.annotationPositions[\r\n    //         String(segment.start)\r\n    //     ];\r\n    //     if (foundAnnotations) {\r\n    //         annotations = foundAnnotations;\r\n    //     }\r\n    //     const insertions =\r\n    //         this.props.annotationPositions[INSERTION_KEY + segment.start] || [];\r\n    //     const deletions =\r\n    //         this.props.annotationPositions[DELETION_KEY + segment.start] || [];\r\n    //     const pageBreaks =\r\n    //         this.props.annotationPositions[\r\n    //             PAGE_BREAK_KEY + (segment.end + 1)\r\n    //         ] || [];\r\n    //     const lineBreaks =\r\n    //         this.props.annotationPositions[\r\n    //             LINE_BREAK_KEY + (segment.end + 1)\r\n    //         ] || [];\r\n\r\n    //     return annotations.concat(\r\n    //         insertions,\r\n    //         deletions,\r\n    //         pageBreaks,\r\n    //         lineBreaks\r\n    //     );\r\n    // }\r\n\r\n    // segmentsContainSegment(segments: TextSegment[], segment: TextSegment) {\r\n    //     for (let i = 0; i < segments.length; i++) {\r\n    //         let listSegment = segments[i];\r\n    //         if (\r\n    //             listSegment.start === segment.start &&\r\n    //             listSegment.text === segment.text\r\n    //         ) {\r\n    //             return true;\r\n    //         }\r\n    //     }\r\n    //     return false;\r\n    // }\r\n\r\n    selectedElement(element: Element) {\r\n        let sourceRangeSelection = [];\r\n        let targetRangeSelection = [];\r\n        const selection = document.getSelection();\r\n        if (element?.id.includes(\"s2_\") && this.props.condition) {\r\n            var clickId = parseInt(element.id.replace(\"s2_\", \"\"));\r\n\r\n            this.props.changeSyncIdOnClick(clickId);\r\n            this.props.changeScrollToId({ id: \"ua\", from: \"ua\" });\r\n\r\n            let id = parseInt(element.id.replace(\"s2_\", \"\"));\r\n            let rangeUnique = this.textAlignmentById.find(\r\n                (l) => id >= l.TStart && id < l.TEnd\r\n            );\r\n            if (rangeUnique) {\r\n                for (let i = rangeUnique.start; i < rangeUnique.end; i++) {\r\n                    sourceRangeSelection.push(i);\r\n                }\r\n                for (let i = rangeUnique.TStart; i < rangeUnique.TEnd; i++) {\r\n                    targetRangeSelection.push(i);\r\n                }\r\n                this.props.changeSelectedRange({\r\n                    source: sourceRangeSelection,\r\n                    target: targetRangeSelection,\r\n                });\r\n            }\r\n        }\r\n\r\n        if (selection && selection.type === \"Range\") {\r\n            return;\r\n        }\r\n        this.props.selectedSegmentId(element.id);\r\n        if (!element.id) {\r\n            this.props.changeSelectedRange({ source: [], target: [] });\r\n        }\r\n    }\r\n\r\n    generateHtml(renderProps: Props, renderState: State): { __html: string } {\r\n        let segments = renderState.segmentedText.segments;\r\n\r\n        let textLineClass = styles.textLine;\r\n        let segmentHTML = '<p class=\"' + textLineClass + '\">';\r\n        if (segments.length === 0) return { __html: segmentHTML };\r\n\r\n        const endPosition = segments[segments.length - 1].end + 1;\r\n\r\n        let highlightClass = styles.highlight;\r\n        let activeHighlightClass = styles.activeHighlight;\r\n        let activeSearchResultEnd = null;\r\n        for (let i = 0; i < segments.length; i++) {\r\n            let segment = segments[i];\r\n            let classAttribute = \"\";\r\n            let classes = [];\r\n            let selectedCurrentDeletion = false;\r\n            let selectedCurrentPageBreak = false;\r\n            let selectedCurrentLineBreak = false;\r\n            let lineBreakAnnotation = false;\r\n            let pageBreakAnnotation = null;\r\n\r\n            // It's an insertion at the end of the text, which should have just been added to the html.\r\n            // So break as we don't want anymore segment html adding.\r\n            if (segment.start === endPosition) {\r\n                break;\r\n            }\r\n            let id = null;\r\n            if (segment.length === 0) {\r\n                // id = idForDeletedSegment(segment);\r\n                // classes.push(styles.removedByAnnotation);\r\n                // if (deletionText) {\r\n                //     segment = new TextSegment(segment.start, deletionText);\r\n                // }\r\n            } else {\r\n                id = idForSegment(segment);\r\n            }\r\n\r\n            // if (\r\n            //     this.segmentsContainSegment(\r\n            //         renderProps.selectedAnnotatedSegments,\r\n            //         segment\r\n            //     ) ||\r\n            //     selectedCurrentDeletion\r\n            // ) {\r\n            //     classes.push(styles.selectedAnnotation);\r\n            // }\r\n            if (\r\n                renderProps.selectedTargetRange?.includes(segment.start) &&\r\n                renderProps.condition\r\n            ) {\r\n                let newClass =\r\n                    renderProps.theme.palette.mode === \"light\"\r\n                        ? styles.selectedRangelight\r\n                        : styles.selectedRangeDark;\r\n                classes.push(newClass);\r\n            }\r\n\r\n            if (classes.length > 0) {\r\n                let className = classnames(...classes);\r\n                classAttribute = 'class=\"' + className + '\"';\r\n            }\r\n\r\n            let segmentContent = segment.text;\r\n            // Add search result highlight if required.\r\n            if (renderProps.searchStringPositions) {\r\n                let segmentStart = segment.start;\r\n                let position = segmentStart;\r\n                segmentContent = \"\";\r\n\r\n                let highlight = highlightClass;\r\n                if (\r\n                    renderProps.selectedSearchResult &&\r\n                    renderProps.selectedSearchResult.start <= position &&\r\n                    renderProps.selectedSearchResult.start +\r\n                        renderProps.selectedSearchResult.length >\r\n                        position\r\n                ) {\r\n                    highlight = activeHighlightClass;\r\n                }\r\n\r\n                for (let j = 0; j < segment.text.length; j++) {\r\n                    let char = segment.text.charAt(j);\r\n                    position = segmentStart + j;\r\n                    if (activeSearchResultEnd) {\r\n                        let [start, end] = activeSearchResultEnd;\r\n                        if (j === 0) {\r\n                            segmentContent +=\r\n                                '<span class=\"' + highlight + '\">';\r\n                        }\r\n                        if (position === end) {\r\n                            segmentContent += char + \"</span>\";\r\n                            activeSearchResultEnd = null;\r\n                        } else if (j === segment.text.length - 1) {\r\n                            segmentContent += char + \"</span>\";\r\n                        } else {\r\n                            segmentContent += char;\r\n                        }\r\n                    } else if (position in renderProps.searchStringPositions) {\r\n                        let [start, end] =\r\n                            renderProps.searchStringPositions[position];\r\n                        segmentContent +=\r\n                            '<span class=\"' + highlight + '\">' + char;\r\n                        if (j === segment.text.length - 1 || position === end) {\r\n                            segmentContent += \"</span>\";\r\n                        }\r\n                        if (position < end) {\r\n                            activeSearchResultEnd = [start, end];\r\n                        }\r\n                    } else {\r\n                        segmentContent += char;\r\n                    }\r\n                }\r\n            }\r\n            // if (\r\n            //     this.props.textAlignmentById !== null\r\n            //     // && selectedTextId === TargetId\r\n            // ) {\r\n            //     let r = this.props.textAlignmentById.find(\r\n            //         (d) => d.TStart === segment.start\r\n            //     );\r\n            //     if (r) {\r\n            //         segmentHTML +=\r\n            //             \"<span id='alignment2_\" +\r\n            //             segment.start +\r\n            //             \"'>\" +\r\n            //             `<sup class=` +\r\n            //             styles.syncIdClass +\r\n            //             `>${r.id}</sup>` +\r\n            //             \"</span>\";\r\n            //     }\r\n            // }\r\n\r\n            segmentHTML +=\r\n                \"<span id=\" +\r\n                id +\r\n                \" key=\" +\r\n                id +\r\n                \" \" +\r\n                classAttribute +\r\n                \">\" +\r\n                segmentContent +\r\n                \"</span>\";\r\n        }\r\n\r\n        this._renderedSegments = segments;\r\n        segmentHTML += \"</p>\";\r\n\r\n        const html = {\r\n            __html: segmentHTML,\r\n        };\r\n        return html;\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps: Props, nextState: State) {\r\n        const renderedHtml = this.generateHtml(nextProps, nextState);\r\n        if (this.props.fontSize !== nextProps.fontSize) {\r\n            return true;\r\n        } else if (\r\n            this._renderedHtml &&\r\n            renderedHtml.__html === this._renderedHtml.__html\r\n        ) {\r\n            return false;\r\n        } else if (this._renderedHtml !== renderedHtml) {\r\n            this._renderedHtml = renderedHtml;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    componentDidUpdate() {\r\n        this.textAlignmentById = this.props.textAlignmentById;\r\n    }\r\n    render() {\r\n        let classes = [styles.text];\r\n        if (this.props.row === 0) {\r\n            classes.push(styles.textFirstRow);\r\n        }\r\n\r\n        // Generate HTML manually as it is much faster when\r\n        // creating large numbers of elements, such as these spans.\r\n        const html = this._renderedHtml\r\n            ? this._renderedHtml\r\n            : this.generateHtml(this.props, this.state);\r\n        if (!this._renderedHtml) {\r\n            this._renderedHtml = html;\r\n        }\r\n        return (\r\n            <div className={styles.textContainer}>\r\n                <div\r\n                    className={classnames(...classes)}\r\n                    dangerouslySetInnerHTML={html}\r\n                    onClick={(e) => this.selectedElement(e.target)}\r\n                    style={{\r\n                        fontSize: this.props.fontSize,\r\n                        fontFamily: \"var(--tibetan-fonts2)\",\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default withTheme(Text2);\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport TextDetailHeading from \"./TextDetailHeadingContainer\";\r\nimport SplitText from \"lib/SplitText\";\r\nimport Loader from \"react-loader\";\r\nimport lengthSplitter from \"lib/text_splitters/lengthSplitter\";\r\nimport styles from \"components/TextDetail/TextDetail.css\";\r\nimport { Box, Divider, Slide } from \"components/UI/muiComponent\";\r\nimport TableOfContent from \"./TableOfContent/TableOfContent\";\r\nimport utilStyles from \"css/util.css\";\r\nimport classnames from \"classnames\";\r\nimport TestHtml from \"./TestHtml\";\r\n\r\nimport SplitTextComponent from \"./SplitText\";\r\nimport TextHtml from \"./TestHtml\";\r\n\r\nfunction TextDetail(props) {\r\n    const ref = useRef();\r\n    let text = {\r\n        name: \"\",\r\n    };\r\n    if (props.text) {\r\n        text = props.text;\r\n    }\r\n    useEffect(() => {\r\n        let element = ref.current;\r\n        element.addEventListener(\"mouseenter\", mouseEnter);\r\n        return () => {\r\n            element.removeEventListener(\"mouseenter\", mouseEnter);\r\n        };\r\n    }, []);\r\n\r\n    function mouseEnter() {\r\n        if (text.name) {\r\n            props.changeSelectedWindow(2);\r\n        }\r\n    }\r\n\r\n    let inlineControls = false;\r\n    let textComponent = null;\r\n    let splitText = null;\r\n    const selectedWindow = props.selectedWindow;\r\n    if (!props.annotatedText || !props.text || props.loading) {\r\n        textComponent = <div key={Math.random()} />;\r\n    } else {\r\n        let limitWidth = false;\r\n        let splitter;\r\n        if (props.paginated) {\r\n            splitter = positionSplitter(props.pageBreaks);\r\n        } else {\r\n            splitter = lengthSplitter(800, /^།[\\s]+(?!།[\\s]+)/, 2, 5);\r\n        }\r\n\r\n        let key = 12;\r\n        splitText = new SplitText(props.annotatedText, splitter);\r\n        inlineControls = true;\r\n        textComponent = (\r\n            <SplitTextComponent\r\n                splitText={splitText}\r\n                limitWidth={limitWidth}\r\n                selectedSegmentId={props.selectedSegmentId}\r\n                annotationPositions={props.annotationPositions}\r\n                selectedAnnotatedSegments={props?.selectedAnnotatedSegments}\r\n                selectedWitness={props.selectedWitness}\r\n                key={key}\r\n                selectedSearchResult={props.selectedSearchResult}\r\n                fontSize={props.textFontSize}\r\n                scrollToId={props.scrollToId}\r\n                syncIdOnClick={props.syncIdOnClick}\r\n                textAlignment={props.textAlignment}\r\n                textAlignmentById={props.textAlignmentById}\r\n                isPanelLinked={props.isPanelLinked}\r\n                changeScrollToId={props.changeScrollToId}\r\n                changeSyncIdOnClick={props.changeSyncIdOnClick}\r\n                selectedWindow={selectedWindow}\r\n                selectedSourceRange={props.selectedSourceRange}\r\n                selectedTargetRange={props.selectedTargetRange}\r\n                changeSelectedRange={props.changeSelectedRange}\r\n                searchResults={props.searchResults}\r\n                searchValue={props.searchValue}\r\n                selectedText={props.text}\r\n                condition={props.condition}\r\n            ></SplitTextComponent>\r\n        );\r\n    }\r\n\r\n    let textComponents = [textComponent];\r\n    return (\r\n        <Box\r\n            ref={ref}\r\n            className={styles.textDetail}\r\n            sx={{\r\n                height: \"100%\",\r\n                flex: 1,\r\n                bgcolor: \"heading.main\",\r\n                color: \"texts.main\",\r\n            }}\r\n        >\r\n            <TextDetailHeading />\r\n            <Divider />\r\n            <Loader loaded={!props.loading} zIndex={5} />\r\n            <Box\r\n                style={{\r\n                    display: \"flex\",\r\n                    height: \"100%\",\r\n                    width: \"100%\",\r\n                    position: \"relative\",\r\n                }}\r\n            >\r\n                <Box\r\n                    className={classnames(\r\n                        styles.textContainer,\r\n                        utilStyles.flex\r\n                    )}\r\n                >\r\n                    {!props.loading ? textComponents : <div />}\r\n                </Box>\r\n                <Slide\r\n                    direction=\"left\"\r\n                    in={props.showTableContent}\r\n                    container={ref.current}\r\n                    unmountOnExit\r\n                    mountOnEnter\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            position: \"absolute\",\r\n                            height: \"100%\",\r\n                            minWidth: \"50%\",\r\n                            right: 0,\r\n                        }}\r\n                    >\r\n                        <TableOfContent />\r\n                    </Box>\r\n                </Slide>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default TextDetail;\r\n","// @flow\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport TextDetail from \"./TextDetail\";\r\nimport * as actions from \"actions\";\r\nimport * as reducers from \"reducers\";\r\nimport AnnotatedText from \"lib/AnnotatedText\";\r\nimport _ from \"lodash\";\r\nimport * as TextStore2 from \"state_helpers/TextStore2\";\r\nimport {\r\n    showPageImages,\r\n    getAnnotationsForWitnessId,\r\n    getActiveAnnotationsForWitnessId,\r\n    getActiveAnnotation,\r\n    getActiveTextAnnotation,\r\n    getBaseWitness,\r\n    getWorkingWitness,\r\n    getSelectedText,\r\n    annotationFromData,\r\n    getAnnotationData,\r\n    getUser,\r\n    getTextListVisible,\r\n    getSelectedTextWitnessId,\r\n    getTextWitnesses,\r\n    getWitness,\r\n    hasLoadedWitnessAnnotations,\r\n    getRemovedDefaultAnnotationsForWitnessId,\r\n    hasLoadedWitnessAppliedAnnotations,\r\n    getScrollPosition,\r\n    getSelectedSearchResult,\r\n    getTextFontSize,\r\n    isSecondWindowOpen,\r\n    getSelectedImage,\r\n    isPanelVisible,\r\n    getSelectedTargetRange,\r\n    getSelectedSourceRange,\r\n    getSearchResults2,\r\n    getTextFontSize2,\r\n    getSelectedText2,\r\n    getTextAlignmentById,\r\n    getShowTableContent2,\r\n    getSelectedSearchResult2,\r\n    isPanelLinked,\r\n    getScrollToId,\r\n    getSyncIdOnClick,\r\n    getTextAlignment,\r\n    getSelectedWindow,\r\n    getSearchValue2,\r\n    getConditionForAlignment,\r\n} from \"reducers\";\r\n\r\nconst DISMISS_CONTROLS_ON_CLICK = true;\r\n\r\nfunction getInsertionKey(annotation) {\r\n    return [annotation.start, annotation.length].join(\"-\");\r\n}\r\n\r\nlet _posAnnotatedText;\r\nlet _posAnnotations;\r\nlet _positions;\r\nlet _posVersion;\r\nconst getAnnotationPositions = (\r\n    annotatedText: AnnotatedText,\r\n    annotations: Annotation[]\r\n): { [string]: Annotation[] } => {\r\n    if (\r\n        annotatedText === _posAnnotatedText &&\r\n        annotations === _posAnnotations &&\r\n        annotatedText.version === _posVersion\r\n    ) {\r\n        return _positions;\r\n    }\r\n\r\n    let positions = {};\r\n    let activeInsertions = {};\r\n\r\n    for (let i = 0; i < annotations.length; i++) {\r\n        let annotation = annotations[i];\r\n        let [startPos, length] =\r\n            annotatedText.getPositionOfAnnotation(annotation);\r\n        if (startPos == null) {\r\n            continue;\r\n        }\r\n        if (length === 0) {\r\n            if (annotation.isInsertion) {\r\n                // group with any active insertions at the same position\r\n                const activeKey = getInsertionKey(annotation);\r\n                const activeInsertionPositions = activeInsertions[activeKey];\r\n                if (activeInsertionPositions) {\r\n                    activeInsertionPositions.map((pos) =>\r\n                        positions[pos].push(annotation)\r\n                    );\r\n                    continue;\r\n                }\r\n                startPos = INSERTION_KEY + startPos;\r\n            }\r\n            if (annotation.isDeletion && annotation.length > 0) {\r\n                // active deletion\r\n                startPos = DELETION_KEY + startPos;\r\n            }\r\n            if (annotation.type === ANNOTATION_TYPES.pageBreak) {\r\n                startPos = PAGE_BREAK_KEY + startPos;\r\n            }\r\n            if (annotation.type === ANNOTATION_TYPES.lineBreak) {\r\n                startPos = LINE_BREAK_KEY + startPos;\r\n            }\r\n            if (positions[startPos] === undefined) {\r\n                positions[startPos] = [];\r\n            }\r\n            if (positions[startPos].indexOf(annotation) === -1) {\r\n                positions[startPos].push(annotation);\r\n            }\r\n        } else {\r\n            let annotationPositions = [];\r\n            for (let j = startPos; j < startPos + length; j++) {\r\n                if (positions[j] === undefined) {\r\n                    positions[j] = [];\r\n                }\r\n                if (positions[j].indexOf(annotation) === -1) {\r\n                    positions[j].push(annotation);\r\n                }\r\n                annotationPositions.push(j);\r\n            }\r\n            // Store the positions this annotation is displayed at.\r\n            // This can then be used later to group with inactive insertions\r\n            if (annotation.isInsertion) {\r\n                const key = getInsertionKey(annotation);\r\n                activeInsertions[key] = annotationPositions;\r\n            }\r\n        }\r\n    }\r\n\r\n    _posAnnotatedText = annotatedText;\r\n    _posAnnotations = annotations;\r\n    _positions = positions;\r\n    _posVersion = annotatedText.version;\r\n    return positions;\r\n};\r\n\r\nconst mapStateToProps = (state: AppState): {} => {\r\n    let selectedWitness = {};\r\n    let annotatedText = null;\r\n    let workingWitness;\r\n    let textFontSize = getTextFontSize2(state);\r\n    let selectedText = getSelectedText2(state);\r\n    let annotationPositions = {};\r\n    let annotations = [];\r\n    if (selectedText) {\r\n        workingWitness =\r\n            reducers.getWorkingWitness2(state, selectedText.id) || {};\r\n        let selectedWitnessId = reducers.getSelectedTextWitnessId2(\r\n            state,\r\n            selectedText.id\r\n        );\r\n        if (selectedWitnessId) {\r\n            selectedWitness = reducers.getWitness2(state, selectedWitnessId);\r\n        }\r\n        if (_.isEmpty(selectedWitness) && !_.isEmpty(workingWitness));\r\n        {\r\n            selectedWitness = workingWitness;\r\n        }\r\n    }\r\n\r\n    annotatedText = TextStore2.getWitnessText(state, selectedWitness?.id);\r\n\r\n    const loading = state.data2.loadingWitnesses;\r\n\r\n    if (annotatedText) {\r\n        annotationPositions = getAnnotationPositions(\r\n            annotatedText,\r\n            (Object.values(annotations): any)\r\n        );\r\n    }\r\n    const isPanelLinked = reducers.isPanelLinked(state);\r\n    const scrollToId = getScrollToId(state);\r\n    const syncIdOnClick = getSyncIdOnClick(state);\r\n    const textAlignment = getTextAlignment(state);\r\n    const selectedWindow = getSelectedWindow(state);\r\n    const searchValue = getSearchValue2(state);\r\n    const isSecondWindowOpen = reducers.isSecondWindowOpen(state);\r\n    const condition = getConditionForAlignment(state);\r\n\r\n    return {\r\n        text: selectedText,\r\n        textFontSize,\r\n        annotatedText,\r\n        selectedWitness,\r\n        loading,\r\n        annotationPositions,\r\n        scrollToId,\r\n        syncIdOnClick,\r\n        textAlignment,\r\n        textAlignmentById: getTextAlignmentById(state),\r\n        selectedWindow,\r\n        selectedSourceRange: getSelectedSourceRange(state),\r\n        selectedTargetRange: getSelectedTargetRange(state),\r\n        showTableContent: getShowTableContent2(state),\r\n        selectedSearchResult: getSelectedSearchResult2(state),\r\n        searchResults: getSearchResults2(state, searchValue),\r\n        searchValue,\r\n        condition: condition && isPanelLinked && isSecondWindowOpen,\r\n    };\r\n};\r\n\r\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\r\n    const { annotatedText, annotationPositions } = stateProps;\r\n    const { dispatch } = dispatchProps;\r\n\r\n    const isDeletion = (id) => {\r\n        return id.indexOf(\"ds2_\") !== -1;\r\n    };\r\n    const isInsertion = (id) => {\r\n        return id.indexOf(\"i2_\") !== -1;\r\n    };\r\n    const isPageBreak = (id) => {\r\n        return id.indexOf(\"p2_\") !== -1;\r\n    };\r\n\r\n    const isLineBreak = (id) => {\r\n        return id.indexOf(\"l2_\") !== -1;\r\n    };\r\n\r\n    const idFromSegmentId = (id) => {\r\n        let start = 0;\r\n        if (isInsertion(id)) {\r\n            start = id.substr(2);\r\n        } else if (isDeletion(id)) {\r\n            start = id.substr(3);\r\n        } else {\r\n            start = id.substr(2);\r\n        }\r\n\r\n        return start;\r\n    };\r\n\r\n    const didSelectSegmentPosition = (segmentPosition, start, length) => {\r\n        let segmentAnnotations = annotationPositions[segmentPosition];\r\n        let segmentVariants = [];\r\n        let segmentPageBreaks = [];\r\n        let segmentLineBreaks = [];\r\n        if (segmentAnnotations) {\r\n            segmentVariants = segmentAnnotations.filter(\r\n                (annotation: Annotation) =>\r\n                    annotation.type === ANNOTATION_TYPES.variant\r\n            );\r\n            segmentPageBreaks = segmentAnnotations.filter(\r\n                (annotation: Annotation) =>\r\n                    annotation.type === ANNOTATION_TYPES.pageBreak\r\n            );\r\n            segmentLineBreaks = segmentAnnotations.filter(\r\n                (annotation: Annotation) =>\r\n                    annotation.type === ANNOTATION_TYPES.lineBreak\r\n            );\r\n        }\r\n        let activeAnnotations = _.intersectionWith(\r\n            segmentVariants.concat(segmentPageBreaks, segmentLineBreaks),\r\n            annotatedText.annotations,\r\n            (a, b) => a.toString() == b.toString()\r\n        );\r\n        let activeAnnotation = null;\r\n        if (activeAnnotations.length > 0) {\r\n            // get any active annotations\r\n            activeAnnotation = activeAnnotations[0];\r\n        } else if (segmentVariants && segmentVariants.length > 0) {\r\n            // get base text annotation for longest annotation highlighted in text\r\n            let longestAvailable = getLongestAnnotation(segmentVariants);\r\n            let [start, textLength] =\r\n                annotatedText.getPositionOfAnnotation(longestAvailable);\r\n            if (longestAvailable && longestAvailable.isInsertion) {\r\n                textLength = 0;\r\n            }\r\n            activeAnnotation = annotatedText.getBaseAnnotation(\r\n                start,\r\n                textLength\r\n            );\r\n        } else {\r\n            // get base annotation of just the segment\r\n            activeAnnotation = annotatedText.getBaseAnnotation(start, length);\r\n        }\r\n\r\n        // dispatch(actions.changedActiveTextAnnotation(activeAnnotation));\r\n    };\r\n\r\n    return {\r\n        ...ownProps,\r\n        ...stateProps,\r\n        onChangedFontSize: (fontSize: number) => {\r\n            dispatch(actions.changedTextFontSize(fontSize));\r\n        },\r\n\r\n        didSelectSegmentIds: (segmentIds) => {\r\n            if (segmentIds.length === 0) {\r\n                return;\r\n            }\r\n            let segmentAnnotations = [];\r\n            let segments = [];\r\n            for (let segmentId of segmentIds) {\r\n                if (isDeletion(segmentId) || isInsertion(segmentId)) {\r\n                    continue;\r\n                }\r\n\r\n                let segmentPosition = idFromSegmentId(segmentId);\r\n                let textSegment =\r\n                    annotatedText.segmentedText.segmentAtPosition(\r\n                        segmentPosition\r\n                    );\r\n                segments.push(textSegment);\r\n                const annotations = annotationPositions[textSegment.start];\r\n                if (annotations) {\r\n                    segmentAnnotations = segmentAnnotations.concat(annotations);\r\n                }\r\n            }\r\n            segmentAnnotations = _.uniqWith(\r\n                segmentAnnotations,\r\n                (a, b) => a.toString() == b.toString()\r\n            );\r\n\r\n            let activeAnnotations = _.intersectionWith(\r\n                segmentAnnotations,\r\n                annotatedText.annotations,\r\n                (a, b) => a.toString() == b.toString()\r\n            );\r\n\r\n            const range = getSegmentsRange(\r\n                segments,\r\n                activeAnnotations,\r\n                segmentAnnotations,\r\n                stateProps.annotatedText\r\n            );\r\n            if (!range) {\r\n                console.warn(\r\n                    \"No range for selected segment ids: %o\",\r\n                    segmentIds\r\n                );\r\n                return;\r\n            }\r\n            const baseAnnotation = annotatedText.getBaseAnnotation(\r\n                range.start,\r\n                range.length\r\n            );\r\n            let activeAnnotation = null;\r\n            if (range.annotation) {\r\n                activeAnnotation = range.annotation;\r\n            } else if (activeAnnotations.length > 0) {\r\n                const content = annotatedText.segmentedText\r\n                    .segmentsInRange(range.start, range.length)\r\n                    .reduce((content, segment) => content + segment.text, \"\");\r\n                // TODO: test this when editing non-working edition.\r\n                // Check if getTextWorkingWitness works as required\r\n                if (!stateProps.selectedWitness) {\r\n                    console.log(\r\n                        \"no stateProps.selectedWitness: %o\",\r\n                        stateProps.selectedWitness\r\n                    );\r\n                }\r\n                activeAnnotation = new Annotation(\r\n                    WORKING_VERSION_ANNOTATION_ID,\r\n                    getTextWorkingWitness(stateProps.text),\r\n                    baseAnnotation.start,\r\n                    baseAnnotation.length,\r\n                    content,\r\n                    ANNOTATION_TYPES.variant,\r\n                    stateProps.selectedWitness,\r\n                    stateProps.user\r\n                );\r\n            } else {\r\n                activeAnnotation = baseAnnotation;\r\n            }\r\n            // dispatch(changedActiveTextAnnotation(activeAnnotation));\r\n        },\r\n        changeScrollToId: (payload) =>\r\n            dispatch(actions.changeScrollToId(payload)),\r\n        changeSyncIdOnClick: (payload) => {\r\n            dispatch(actions.changeSyncIdOnClick(payload));\r\n        },\r\n        changeSelectedWindow: (payload) => {\r\n            dispatch(actions.changeSelectedWindow(payload));\r\n        },\r\n        changeSelectedRange: (payload) => {\r\n            dispatch(actions.changeSelectedRange(payload));\r\n        },\r\n        changeShowTableContent: (payload) => {\r\n            dispatch(actions.showTableContent2(payload));\r\n        },\r\n        selectedSegmentId: (segmentId) => {\r\n            let start = idFromSegmentId(segmentId);\r\n            let positionKey = start;\r\n            if (isInsertion(segmentId)) {\r\n                positionKey = INSERTION_KEY + start;\r\n            } else if (isDeletion(segmentId)) {\r\n                positionKey = DELETION_KEY + start;\r\n            } else if (isPageBreak(segmentId)) {\r\n                positionKey = PAGE_BREAK_KEY + start;\r\n            } else if (isLineBreak(segmentId)) {\r\n                positionKey = LINE_BREAK_KEY + start;\r\n            }\r\n\r\n            let segmentAnnotations = annotationPositions[positionKey];\r\n            if (DISMISS_CONTROLS_ON_CLICK && stateProps.activeAnnotation) {\r\n                const activeAnnotation = stateProps.activeAnnotation;\r\n                if (activeAnnotation) {\r\n                    const dismissTextAnnotation =\r\n                        actions.changedActiveTextAnnotation(null);\r\n                    dispatch(dismissTextAnnotation);\r\n                }\r\n            }\r\n            //  else {\r\n            //     if (\r\n            //         isInsertion(segmentId) ||\r\n            //         isDeletion(segmentId) ||\r\n            //         isPageBreak(segmentId) ||\r\n            //         isLineBreak(segmentId)\r\n            //     ) {\r\n            //         const length = 0;\r\n            //         didSelectSegmentPosition(positionKey, start, length);\r\n            //     } else {\r\n            //         let segmentPosition = Number(idFromSegmentId(segmentId));\r\n            //         let textSegment = annotatedText.segmentedText.segmentAtPosition(\r\n            //             segmentPosition\r\n            //         );\r\n            //         if (textSegment) {\r\n            //             didSelectSegmentPosition(\r\n            //                 textSegment.start,\r\n            //                 textSegment.start,\r\n            //                 textSegment.length\r\n            //             );\r\n            //         }\r\n            //     }\r\n            // }\r\n        },\r\n    };\r\n};\r\n\r\nconst TextDetailContainer = connect(\r\n    mapStateToProps,\r\n    null,\r\n    mergeProps\r\n)(TextDetail);\r\n\r\nexport default React.memo(TextDetailContainer);\r\n","import React, { useState, useCallback, useRef, useEffect } from \"react\";\r\nimport styles from \"components/TextDetail/TextDetailHeading.css\";\r\nimport SelectVersion from \"./SelectVersion\";\r\nimport TextList from \"./TextListContainer\";\r\nimport OptionsIcon from \"images/options.svg\";\r\nimport Settings from \"./HeaderMenu/Settings\";\r\nimport Search from \"./HeaderMenu/Search\";\r\nimport TableOfContent from \"./HeaderMenu/TableOfContent\";\r\nimport _ from \"lodash\";\r\nimport { Close as CloseIcon } from \"components/UI/muiIcon\";\r\n\r\nimport {\r\n    Stack,\r\n    Box,\r\n    TextField,\r\n    Button,\r\n    Collapse,\r\n    Divider,\r\n    ButtonGroup,\r\n    ListItem,\r\n    List,\r\n    IconButton,\r\n} from \"components/UI/muiComponent\";\r\n\r\nimport SearchList from \"./HeaderMenu/SearchList\";\r\ntype HeaderProps = {\r\n    user: {},\r\n    textFontSize: Number,\r\n    onChangedFontSize: () => void,\r\n    searchResults: [],\r\n    onSelectedSearchResult: () => void,\r\n};\r\n\r\nfunction TextDetailHeading(props: HeaderProps) {\r\n    const [findvalue, setfindvalue] = useState(\"\");\r\n    let [showFind, setShowFind] = useState(false);\r\n    let [visible, setVisible] = useState(false);\r\n\r\n    const inputRef = useRef();\r\n    const headingRef = useRef();\r\n    const handleListItemClick = (id) => {\r\n        props.changeSelectSyncId(id);\r\n    };\r\n    const debouncedSearch = React.useRef(\r\n        _.debounce((s) => {\r\n            props.searchChanged(s);\r\n        }, 1000)\r\n    ).current;\r\n    const handleSearch = useCallback(\r\n        (e) => {\r\n            e.preventDefault();\r\n            debouncedSearch(findvalue);\r\n            setVisible(true);\r\n        },\r\n        [findvalue]\r\n    );\r\n\r\n    const handleWindowSearch = useCallback(() => {\r\n        setShowFind(!showFind);\r\n    }, [showFind]);\r\n\r\n    useEffect(() => {\r\n        if (showFind === true) {\r\n            inputRef.current.focus();\r\n        }\r\n\r\n        if (showFind === false) debouncedSearch(null);\r\n    }, [showFind]);\r\n\r\n    const closeSearchItemBox = () => {\r\n        setVisible(false);\r\n        debouncedSearch(null);\r\n        setfindvalue(\"\");\r\n    };\r\n\r\n    let condition =\r\n        _.isObject(props.searchResults) &&\r\n        props.searchResults.hasOwnProperty(props.selectedText.id);\r\n    let results = condition\r\n        ? props.searchResults[props.selectedText.id].results\r\n        : [];\r\n    return (\r\n        <Stack\r\n            direction=\"column\"\r\n            ref={headingRef}\r\n            spacing={1}\r\n            sx={{\r\n                paddingInline: { md: 1, xs: 0 },\r\n                paddingBlock: { md: 1, xs: 0 },\r\n                borderTop: { md: 0, xs: \"1px solid gray\" },\r\n                bgcolor: \"heading.main\",\r\n                color: \"text.primary\",\r\n            }}\r\n        >\r\n            <Stack direction=\"row\" spacing={1} justifyContent=\"space-between\">\r\n                <Box\r\n                    sx={{\r\n                        display: \"flex\",\r\n                        gap: { md: 2, sx: 0 },\r\n                        flexDirection: { md: \"row\", xs: \"column\" },\r\n                    }}\r\n                >\r\n                    <TextList />\r\n                    <SelectVersion\r\n                        witnesses={props.witnesses}\r\n                        activeWitness={props.selectedWitness}\r\n                        onSelectedWitness={props.onSelectedWitness}\r\n                        user={props.user}\r\n                    />\r\n                </Box>\r\n\r\n                <ButtonGroup\r\n                    size=\"small\"\r\n                    aria-label=\"small button group\"\r\n                    sx={{\r\n                        position: \"relative\",\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                        height: \"fit-content\",\r\n                        width: \"fit-content\",\r\n                        border: (theme) => `1px solid ${theme.palette.divider}`,\r\n                        borderRadius: 1,\r\n                        bgcolor: \"background.paper\",\r\n                        color: \"text.secondary\",\r\n                        \"& svg\": {\r\n                            m: 1,\r\n                        },\r\n                        \"& hr\": {\r\n                            mx: 0.5,\r\n                        },\r\n                    }}\r\n                    className={styles.button_group_menu}\r\n                >\r\n                    <Search handleWindowSearch={handleWindowSearch} />\r\n                    <Settings\r\n                        textFontSize={props.textFontSize}\r\n                        onChangedFontSize={props.onChangedFontSize}\r\n                        onExport={props.onExport}\r\n                    />\r\n                    <TableOfContent\r\n                        changeShowTableContent={props.changeShowTableContent}\r\n                        showTableContent={props.showTableContent}\r\n                    />\r\n                </ButtonGroup>\r\n            </Stack>\r\n            <Collapse in={showFind} mountOnEnter unmountOnExit>\r\n                <form onSubmit={handleSearch}>\r\n                    <Stack direction=\"row\" spacing={2} position=\"relative\">\r\n                        <TextField\r\n                            hiddenLabel\r\n                            id=\"filled-hidden-label-small\"\r\n                            inputProps={{\r\n                                style: {\r\n                                    height: 25,\r\n                                    padding: \"0 14px\",\r\n                                },\r\n                            }}\r\n                            style={{ height: 25, flex: 1 }}\r\n                            fullWidth\r\n                            inputRef={inputRef}\r\n                            value={findvalue}\r\n                            onChange={(e) => setfindvalue(e.target.value)}\r\n                        />\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            onClick={handleSearch}\r\n                            style={{ height: 25 }}\r\n                        >\r\n                            Search\r\n                        </Button>\r\n                        {props.searchResults && visible && (\r\n                            <Box\r\n                                sx={{\r\n                                    position: \"absolute\",\r\n                                    top: 35,\r\n                                    right: 0,\r\n                                    zIndex: 1,\r\n                                    bgcolor: \"heading.main\",\r\n                                    width: 350,\r\n                                    height: 350,\r\n                                    boxShadow: 3,\r\n                                    overflowX: \"hidden\",\r\n                                    boxShadow: 3,\r\n                                }}\r\n                            >\r\n                                {results.length === 0 && (\r\n                                    <p>no such word present</p>\r\n                                )}\r\n                                {condition && results.length > 0 && (\r\n                                    <SearchList\r\n                                        onSelectedSearchResult={\r\n                                            props.onSelectedSearchResult\r\n                                        }\r\n                                        searchValue={props.searchValue}\r\n                                        results={results}\r\n                                        selectedText={props.selectedText}\r\n                                    />\r\n                                )}\r\n                                <IconButton\r\n                                    aria-label=\"closeButton\"\r\n                                    onClick={closeSearchItemBox}\r\n                                    size=\"small\"\r\n                                    sx={{\r\n                                        right: 15,\r\n                                        top: 0,\r\n                                        position: \"absolute\",\r\n                                    }}\r\n                                >\r\n                                    <CloseIcon fontSize=\"inherit\" />\r\n                                </IconButton>\r\n                            </Box>\r\n                        )}\r\n                    </Stack>\r\n                </form>\r\n            </Collapse>\r\n        </Stack>\r\n    );\r\n}\r\n\r\nexport default TextDetailHeading;\r\n","// @flow\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport TextDetailHeading from \"./TextDetailHeading\";\r\nimport * as actions from \"actions\";\r\nimport * as reducers from \"reducers\";\r\nimport type { AppState } from \"reducers\";\r\nimport {\r\n    getTextListVisible,\r\n    getAccountOverlayVisible,\r\n    getShowTableContent2,\r\n} from \"reducers\";\r\n\r\nconst mapStateToProps = (state: AppState): {} => {\r\n    const user = reducers.getUser(state);\r\n    const selectedText = reducers.getSelectedText2(state);\r\n    let witnesses = [];\r\n    let exportingWitness = false;\r\n    let selectedWitness;\r\n    if (selectedText) {\r\n        witnesses = reducers.getTextWitnesses2(state, selectedText.id);\r\n        const selectedWitnessId = reducers.getSelectedTextWitnessId2(\r\n            state,\r\n            selectedText.id\r\n        );\r\n        if (selectedWitnessId) {\r\n            selectedWitness = reducers.getWitness2(state, selectedWitnessId);\r\n            // exportingWitness = reducers.getExportingWitness(\r\n            //     state,\r\n            //     selectedWitnessId\r\n            // );\r\n        } else {\r\n            selectedWitness = reducers.getWorkingWitness2(\r\n                state,\r\n                selectedText.id\r\n            );\r\n        }\r\n    }\r\n    let textFontSize = reducers.getTextFontSize2(state);\r\n    let showTableContent = getShowTableContent2(state);\r\n    let searchValue = reducers.getSearchValue2(state);\r\n    return {\r\n        witnesses,\r\n        selectedText,\r\n        selectedWitness,\r\n        textListIsVisible: getTextListVisible(state),\r\n        accountOverlayVisible: getAccountOverlayVisible(state),\r\n        textFontSize,\r\n        user,\r\n        searchValue,\r\n        showTableContent,\r\n        searchResults: reducers.getSearchResults2(state, searchValue),\r\n    };\r\n};\r\n\r\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\r\n    const navigationButtonClicked = () => {\r\n        dispatchProps.dispatch(\r\n            actions.changedTextListVisible(!stateProps.textListIsVisible)\r\n        );\r\n    };\r\n\r\n    const { dispatch } = dispatchProps;\r\n    const { selectedText } = stateProps;\r\n\r\n    return {\r\n        ...ownProps,\r\n        ...stateProps,\r\n        navigationButtonClicked,\r\n        onSelectedWitness: (witness: Witness) => {\r\n            dispatch(\r\n                actions.selectedTextWitness2(selectedText?.id, witness?.id)\r\n            );\r\n        },\r\n        onChangedFontSize: (fontSize: number) => {\r\n            dispatch(actions.changedTextFontSize2(fontSize));\r\n        },\r\n        changeShowTableContent: (payload) => {\r\n            dispatch(actions.showTableContent2(payload));\r\n        },\r\n        searchChanged: (searchTerm: string) => {\r\n            dispatch(actions.changedSearchValue2(searchTerm));\r\n        },\r\n        changeSelectSyncId: (payload) => {\r\n        }, onSelectedSearchResult: (\r\n            text: api.TextData,\r\n            start: number,\r\n            length: number,\r\n            selectedText: api.TextData | null\r\n        ) => {\r\n            if (!selectedText || selectedText.id !== text.id) {\r\n                dispatch(\r\n                    batchActions([\r\n                        actions.selectedSearchResult2(text.id, start, length),\r\n                        actions.selectedText2(text),\r\n                    ])\r\n                );\r\n            } else {\r\n                dispatch(actions.selectedSearchResult2(text.id, start, length));\r\n            }\r\n        },\r\n    };\r\n};\r\n\r\nconst TextDetailHeadingContainer = connect(\r\n    mapStateToProps,\r\n    null,\r\n    mergeProps\r\n)(TextDetailHeading);\r\n\r\nexport default TextDetailHeadingContainer;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport {\r\n    List,\r\n    AutoSizer,\r\n    CellMeasurer,\r\n    CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport classname from \"classnames\";\r\nimport styles from \"components/TextDetail/TextList.css\";\r\nimport addShay from \"lib/addTibetanShay\";\r\n\r\nimport {\r\n    TextField,\r\n    ClickAwayListener,\r\n    Box,\r\n    Typography,\r\n    Button,\r\n    Grow,\r\n} from \"components/UI/muiComponent\";\r\nimport { useMemo } from \"react\";\r\nfunction TextList(props) {\r\n    const temptext = useRef(props.texts);\r\n    const [textslist, setTextList] = useState(temptext.current);\r\n    const [filterValue, setFilterValue] = useState(null);\r\n    const onSelectedText = props.onSelectedText;\r\n    const selectedText = props.selectedText;\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    let selected = selectedText?.name;\r\n    let selectedText1 = props.selectedText1;\r\n    useEffect(() => {\r\n        let temp = [];\r\n        if (filterValue === \"\") {\r\n            setTextList([...temptext.current]);\r\n        }\r\n        if (filterValue !== null && filterValue !== \"\") {\r\n            temp = temptext.current.filter((val) => {\r\n                return val.name.includes(filterValue);\r\n            });\r\n            setTextList([...temp]);\r\n        }\r\n    }, [filterValue]);\r\n\r\n    const cache = useRef(\r\n        new CellMeasurerCache({\r\n            fixedHeight: true,\r\n            defaultHeight: 40,\r\n        })\r\n    );\r\n\r\n    let classes = [styles.textlist];\r\n\r\n    const handleClick = () => {\r\n        setIsOpen((prev) => !prev);\r\n        if (isOpen === false) classes.push(styles.open);\r\n    };\r\n    const handleChange = (e) => {\r\n        let value = e.target.value;\r\n        setFilterValue(value);\r\n    };\r\n    const rowRenderer = React.useCallback(\r\n        ({ key, index, style, parent }) => {\r\n            let data = textslist[index];\r\n            return (\r\n                <CellMeasurer\r\n                    key={`optionvalues-${key}`}\r\n                    cache={cache.current}\r\n                    parent={parent}\r\n                    columnIndex={0}\r\n                    rowIndex={index}\r\n                >\r\n                    <div\r\n                        style={style}\r\n                        onClick={() => {\r\n                            setIsOpen(false);\r\n                            onSelectedText(data);\r\n                        }}\r\n                    >\r\n                        <Box\r\n                            sx={{\r\n                                overflow: \"hidden\",\r\n                                textOverflow: \"ellipsis\",\r\n                                width: \"13rem\",\r\n                                paddingLeft: 2,\r\n                                fontSize: {\r\n                                    lg: 12,\r\n                                    md: 11,\r\n                                    sm: 10,\r\n                                    xs: 10,\r\n                                },\r\n                                color: \"text.primary\",\r\n                            }}\r\n                            component=\"div\"\r\n                        >\r\n                            <Typography noWrap={true}>\r\n                                {addShay(data.name)}\r\n                            </Typography>\r\n                        </Box>\r\n                    </div>\r\n                </CellMeasurer>\r\n            );\r\n        },\r\n        [textslist]\r\n    );\r\n    return (\r\n        <ClickAwayListener onClickAway={() => setIsOpen(false)}>\r\n            <div style={{ position: \"relative\", marginLeft: 10 }}>\r\n                <Button\r\n                    onClick={handleClick}\r\n                    component=\"div\"\r\n                    variant=\"outlined\"\r\n                    sx={{\r\n                        overflow: \"hidden\",\r\n                        textOverflow: \"ellipsis\",\r\n                        width: \"10rem\",\r\n                        height: \"100%\",\r\n                        color: \"text.primary\",\r\n                    }}\r\n                    disabled={selectedText1 === null}\r\n                >\r\n                    <Typography noWrap={true}>\r\n                        {selected ? selected : \"select Text here\"}\r\n                    </Typography>\r\n                </Button>\r\n                <Grow in={isOpen}>\r\n                    <Box\r\n                        className={classname(classes)}\r\n                        sx={{\r\n                            position: \"absolute\",\r\n                            bgcolor: \"heading.main\",\r\n                            zIndex: 1,\r\n                        }}\r\n                    >\r\n                        <TextField\r\n                            onChange={handleChange}\r\n                            id=\"standard-basic\"\r\n                            label=\"filter\"\r\n                            variant=\"standard\"\r\n                            style={{ width: \"100%\" }}\r\n                        />\r\n                        <AutoSizer>\r\n                            {({ width, height }) => (\r\n                                <List\r\n                                    width={width}\r\n                                    height={height}\r\n                                    rowHeight={40}\r\n                                    deferredMeasurementCache={cache.current}\r\n                                    rowCount={textslist.length}\r\n                                    rowRenderer={rowRenderer}\r\n                                />\r\n                            )}\r\n                        </AutoSizer>\r\n                    </Box>\r\n                </Grow>\r\n            </div>\r\n        </ClickAwayListener>\r\n    );\r\n}\r\n\r\nexport default React.memo(TextList);\r\n","// @flow\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport TextList from \"./TextList\";\r\nimport * as actions from \"actions\";\r\nimport { getSelectedText2, getSelectedText } from \"reducers\";\r\nimport type { AppState } from \"reducers\";\r\nimport * as api from \"api\";\r\nimport * as reducers from \"reducers\";\r\nimport { batchActions } from \"redux-batched-actions\";\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    const searchValue = reducers.getSearchValue(state);\r\n    const searchResults = reducers.getSearchResults(state, searchValue);\r\n    const selectedSearchResult = reducers.getSelectedSearchResult(state);\r\n    // TODO: display search results or spinner depending on when anything\r\n    // returned\r\n\r\n    let searching = false;\r\n    let texts = state.data.texts;\r\n    if (searchValue.length > 0) {\r\n        if (searchResults === null) {\r\n            searching = true;\r\n            texts = [];\r\n        } else {\r\n            texts = texts.filter((text) =>\r\n                searchResults.hasOwnProperty(text.id)\r\n            );\r\n        }\r\n    }\r\n\r\n    return {\r\n        texts: texts,\r\n        selectedText1: getSelectedText(state),\r\n        selectedText: getSelectedText2(state),\r\n        searchTerm: searchValue,\r\n        searchResults,\r\n        selectedSearchResult,\r\n        searching,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSelectedText: (text: api.TextData) => {\r\n            dispatch(actions.selectedText2(text));\r\n        },\r\n    };\r\n};\r\n\r\nconst TextListContainer = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TextList);\r\n\r\nexport default TextListContainer;\r\n","// @flow\r\nimport * as React from \"react\";\r\nimport GraphemeSplitter from \"grapheme-splitter\";\r\nimport reactStringReplace from \"react-string-replace\";\r\n\r\ntype Props = {\r\n    string: string,\r\n    highlightClass: string,\r\n    stringClass?: string,\r\n    searchTerm?: string\r\n};\r\n\r\nexport default class HighlightedString extends React.Component<Props> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const string = this.props.string;\r\n        let nameHtml = string;\r\n        let stringClass = this.props.stringClass || \"\";\r\n        if (this.props.searchTerm) {\r\n            const searchTerm = this.props.searchTerm;\r\n            const splitter = new GraphemeSplitter();\r\n            const graphemes = splitter.splitGraphemes(string);\r\n            const start = string.indexOf(searchTerm);\r\n            const end = start + searchTerm.length;\r\n            let position = 0;\r\n            let foundGraphemes = \"\";\r\n            if (start > -1) {\r\n                for (let i = 0; i < graphemes.length; i++) {\r\n                    let grapheme = graphemes[i];\r\n                    if (position >= start && position < end) {\r\n                        foundGraphemes += grapheme;\r\n                    }\r\n                    position += grapheme.length;\r\n                }\r\n            }\r\n            if (foundGraphemes.length > 0) {\r\n                nameHtml = reactStringReplace(\r\n                    string,\r\n                    foundGraphemes,\r\n                    (match, i) => (\r\n                        <span className={this.props.highlightClass} key={`highlight-${i}`}>\r\n                            {match}\r\n                        </span>\r\n                    )\r\n                );\r\n            }\r\n        }\r\n        return <span className={stringClass}>{nameHtml}</span>;\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LoadMore---container\"};","// @flow\r\nimport React from \"react\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport styles from \"./LoadMore.css\";\r\n\r\ntype Props = {\r\n    loading?: boolean\r\n};\r\n\r\nexport default function LoadMore(props: Props) {\r\n    let content;\r\n    if (props.loading) {\r\n        content = (\r\n            <span>\r\n                <FormattedMessage id=\"leftbar.loading\" />\r\n            </span>\r\n        );\r\n    } else {\r\n        content = (\r\n            <span>\r\n                <FormattedMessage id=\"leftbar.loadMore\" />\r\n            </span>\r\n        );\r\n    }\r\n    return <div className={styles.container}>{content}</div>;\r\n}\r\n","// @flow\r\nimport * as React from \"react\";\r\nimport styles from \"./TextList.css\";\r\n\r\ntype Props = {\r\n    count: number,\r\n    extra: boolean\r\n};\r\n\r\nexport default class ResultCount extends React.Component<Props> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let countDisplay = this.props.count;\r\n        if (this.props.extra) countDisplay += \"+\";\r\n        return <span className={styles.searchTotal}>{countDisplay}</span>;\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"textList\":\"TextList---textList\",\"textListRow\":\"TextList---textListRow\",\"selectedRow\":\"TextList---selectedRow\",\"textNameRow\":\"TextList---textNameRow\",\"textName\":\"TextList---textName\",\"highlight\":\"TextList---highlight\",\"searchResults\":\"TextList---searchResults\",\"searchResult\":\"TextList---searchResult\",\"selectedSearchResult\":\"TextList---selectedSearchResult\",\"searchTotal\":\"TextList---searchTotal\",\"textListLoader\":\"TextList---textListLoader\",\"searching\":\"TextList---searching\",\"loadMore\":\"TextList---loadMore\"};","// @flow\r\nimport * as React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport { AutoSizer } from \"react-virtualized/dist/es/AutoSizer\";\r\nimport {\r\n    CellMeasurer,\r\n    CellMeasurerCache,\r\n} from \"react-virtualized/dist/es/CellMeasurer\";\r\nimport \"react-virtualized/styles.css\"; // only needs to be imported once\r\nimport { List } from \"react-virtualized/dist/es/List\";\r\nimport * as api from \"api\";\r\nimport addTibetanShay from \"lib/addTibetanShay\";\r\nimport styles from \"./TextList.css\";\r\nimport Loader from \"react-loader\";\r\nimport HighlightedString from \"./HighlightedString\";\r\nimport ResultCount from \"./ResultCount\";\r\nimport LoadMore from \"./LoadMore\";\r\nimport { Box } from \"components/UI/muiComponent\";\r\ntype Props = {\r\n    selectedText: api.TextData,\r\n    texts: api.TextData[],\r\n    onSelectedText: (text: api.TextData) => void,\r\n    onSelectedSearchResult: (\r\n        text: api.TextData,\r\n        start: number,\r\n        length: number,\r\n        selectedText: api.TextData\r\n    ) => void,\r\n    onSearchText: (text: api.TextData, searchTerm: string) => void,\r\n    searchTerm: string,\r\n    searchResults: { [number]: api.TextSearchResultData },\r\n    selectedSearchResult: null | {\r\n        textId: number,\r\n        start: number,\r\n        length: number,\r\n    },\r\n    searching: boolean,\r\n};\r\n\r\nconst DEFAULT_ROW_HEIGHT = 60;\r\n\r\nclass TextList extends React.Component<Props> {\r\n    list: List | null;\r\n    cache: CellMeasurerCache;\r\n    rowRenderer: (params: {\r\n        key: string,\r\n        index: number,\r\n        parent: {},\r\n        style: {},\r\n    }) => React.Element<CellMeasurer>;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.cache = new CellMeasurerCache({\r\n            fixedWidth: true,\r\n            defaultHeight: DEFAULT_ROW_HEIGHT,\r\n            minHeight: DEFAULT_ROW_HEIGHT,\r\n        });\r\n        this.rowRenderer = this.rowRenderer.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Props): void {\r\n        this.cache.clearAll();\r\n        if (this.list) this.list.forceUpdateGrid();\r\n    }\r\n\r\n    rowRenderer({\r\n        key,\r\n        index,\r\n        parent,\r\n        style,\r\n    }: {\r\n        key: string,\r\n        index: number,\r\n        parent: {},\r\n        style: {},\r\n    }): React.Element<CellMeasurer> {\r\n        const selectedText = this.props.selectedText;\r\n        const selectedTextId = selectedText ? selectedText.id : -1;\r\n        const selectedSearchResult = this.props.selectedSearchResult;\r\n        const texts = this.props.texts;\r\n\r\n        const onSelectedText = this.props.onSelectedText;\r\n        const onSelectedSearchResult = this.props.onSelectedSearchResult;\r\n        const searchTerm = this.props.searchTerm;\r\n        const searchResults = this.props.searchResults;\r\n\r\n        let className = styles.textListRow;\r\n        const text = texts[index];\r\n        if (text.id === selectedTextId) {\r\n            className = classnames(className, styles.selectedRow);\r\n        }\r\n        let name = addTibetanShay(text.name);\r\n        let nameHtml = <span className={styles.textName}>{name}</span>;\r\n        let textSearchResults = [];\r\n        let resultsCount = null;\r\n        let extraRemaining = false;\r\n        let loadingResults = false;\r\n\r\n        if (searchTerm.length > 0) {\r\n            nameHtml = (\r\n                <HighlightedString\r\n                    string={name}\r\n                    stringClass={styles.textName}\r\n                    highlightClass={styles.highlight}\r\n                    searchTerm={searchTerm}\r\n                />\r\n            );\r\n            if (searchResults.hasOwnProperty(text.id)) {\r\n                textSearchResults = searchResults[text.id].results;\r\n                extraRemaining = searchResults[text.id].extra;\r\n                loadingResults = searchResults[text.id].loading;\r\n                resultsCount = (\r\n                    <ResultCount\r\n                        count={searchResults[text.id].total}\r\n                        extra={extraRemaining}\r\n                    />\r\n                );\r\n            }\r\n        }\r\n\r\n        const cache = this.cache;\r\n\r\n        let textSearchResultRows = [];\r\n        if (textSearchResults.length > 0) {\r\n            textSearchResultRows = textSearchResults.map((result) => {\r\n                const isSelected =\r\n                    selectedSearchResult &&\r\n                    selectedSearchResult.textId === text.id &&\r\n                    selectedSearchResult.start === result[0];\r\n                const className = isSelected\r\n                    ? styles.selectedSearchResult\r\n                    : styles.searchResult;\r\n                if (isSelected) {\r\n                    // TODO: keeps getting rendered when selecting a syllable\r\n                    console.log(\"got selected result: %o\", result);\r\n                }\r\n                return (\r\n                    <Box\r\n                        key={text.id + \"_\" + result[0]}\r\n                        onClick={() => {\r\n                            onSelectedSearchResult(\r\n                                text,\r\n                                result[0],\r\n                                searchTerm.length,\r\n                                selectedText\r\n                            );\r\n                        }}\r\n                        sx={{ bgcolor: \"inherit\", color: \"inherit\" }}\r\n                        className={className}\r\n                    >\r\n                        <HighlightedString\r\n                            string={result[1]}\r\n                            highlightClass={styles.highlight}\r\n                            searchTerm={searchTerm}\r\n                        />\r\n                    </Box>\r\n                );\r\n            });\r\n        }\r\n\r\n        const searchText = () => {\r\n            this.props.onSearchText(text, searchTerm);\r\n        };\r\n\r\n        return (\r\n            <CellMeasurer\r\n                columnIndex={0}\r\n                key={key}\r\n                parent={parent}\r\n                rowIndex={index}\r\n                cache={cache}\r\n            >\r\n                <div key={key} style={style} className={className}>\r\n                    <div\r\n                        className={styles.textNameRow}\r\n                        onClick={() => {\r\n                            onSelectedText(texts[index]);\r\n                        }}\r\n                    >\r\n                        {nameHtml} {resultsCount}\r\n                    </div>\r\n                    {textSearchResults.length > 0 && (\r\n                        <div className={styles.searchResults}>\r\n                            {textSearchResultRows}\r\n                        </div>\r\n                    )}\r\n                    {extraRemaining && (\r\n                        <div className={styles.loadMore} onClick={searchText}>\r\n                            <LoadMore loading={loadingResults} />\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </CellMeasurer>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const texts = this.props.texts;\r\n        let rowCount = texts.length;\r\n\r\n        return (\r\n            <div className={styles.textList}>\r\n                {this.props.texts && this.props.texts.length > 0 ? (\r\n                    <AutoSizer>\r\n                        {({ height, width }) => (\r\n                            <List\r\n                                ref={(list) => (this.list = list)}\r\n                                height={height}\r\n                                rowCount={rowCount}\r\n                                rowHeight={this.cache.rowHeight}\r\n                                rowRenderer={this.rowRenderer}\r\n                                width={width}\r\n                                overscanRowCount={3}\r\n                                deferredMeasurementCache={this.cache}\r\n                            />\r\n                        )}\r\n                    </AutoSizer>\r\n                ) : this.props.searching ? (\r\n                    <div className={styles.textListLoader}>\r\n                        <Loader loaded={!this.props.searching} scale={0.5} />\r\n                        <p className={styles.searching}>Searching…</p>\r\n                    </div>\r\n                ) : (\r\n                    <ul className=\"textList\" />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextList;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tab\":\"TextListTab---tab\",\"showTab\":\"TextListTab---showTab\",\"hideTab\":\"TextListTab---hideTab\"};","// @flow\r\nimport React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport styles from \"components/TextList/TextListTab.css\";\r\n\r\ntype Props = {\r\n    textListIsVisible: boolean,\r\n    tabClicked: (e: SyntheticEvent<>) => void\r\n};\r\n\r\nconst TextListTab = (props: Props) => {\r\n    let tabClassnames = [styles.tab];\r\n    if (props.textListIsVisible) {\r\n        tabClassnames.push(styles.hideTab);\r\n    } else {\r\n        tabClassnames.push(styles.showTab);\r\n    }\r\n    return (\r\n        <div\r\n            className={classnames(...tabClassnames)}\r\n            onClick={props.tabClicked}\r\n        >\r\n            Text List\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TextListTab;\r\n","// @flow\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { batchActions } from \"redux-batched-actions\";\r\n\r\nimport { getTextListVisible } from \"reducers\";\r\nimport { changedTextListVisible, changedActiveAnnotation } from \"actions\";\r\n\r\nimport TextListTab from \"components/TextList/TextListTab\";\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        textListIsVisible: getTextListVisible(state)\r\n    };\r\n};\r\n\r\nconst mapStateToDispatch = dispatch => {\r\n    return {\r\n        tabClicked: () => {\r\n            const textListIsVisible = true;\r\n            dispatch(changedTextListVisible(textListIsVisible));\r\n        }\r\n    };\r\n};\r\n\r\nconst TextListTabContainer = connect(mapStateToProps, mapStateToDispatch)(\r\n    TextListTab\r\n);\r\n\r\nexport default TextListTabContainer;\r\n","export { default } from \"./TextList\";\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textsSearchContainer\":\"TextsSearch---textsSearchContainer\",\"textsSearch\":\"TextsSearch---textsSearch\",\"minify\":\"TextsSearch---minify\"};","// @flow\r\nimport React, { useTransition } from \"react\";\r\nimport styles from \"./TextsSearch.css\";\r\nimport * as constants from \"app_constants\";\r\n\r\nimport { injectIntl } from \"react-intl\";\r\n// import Button from \"components/UI/Button\";\r\nimport { Button, IconButton } from \"components/UI/muiComponent\";\r\nimport { Search as SearchIcon } from \"components/UI/muiIcon\";\r\nimport { Box } from \"components/UI/muiComponent\";\r\n\r\ntype Props = {\r\n    searchValue: string,\r\n    searchChanged: (searchTerm: string) => void,\r\n    selectedSearchOption?: (e: SyntheticEvent<HTMLSelectElement>) => void,\r\n    minimiseButtonClicked: () => void,\r\n    intl: { formatMessage: ({ [id: string]: string }) => string },\r\n    searchTerm: string,\r\n    textListWidth: number,\r\n};\r\n\r\nconst TextsSearch = (props: Props) => {\r\n    let textInput: { current: null | HTMLInputElement } = React.createRef();\r\n    const [ispending, startTransition] = useTransition();\r\n\r\n    const initiateSearch = (e: SyntheticEvent<HTMLElement>) => {\r\n        e.preventDefault();\r\n        if (textInput.current instanceof HTMLInputElement) {\r\n            const searchTerm = textInput.current.value;\r\n            startTransition(() => {\r\n                props.searchChanged(searchTerm);\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box\r\n            sx={{ bgcolor: \"inherit\" }}\r\n            className={styles.textsSearchContainer}\r\n            // style={{ maxWidth: props.textListWidth }}\r\n        >\r\n            <div className={styles.textsSearch}>\r\n                <form onSubmit={initiateSearch}>\r\n                    <input\r\n                        style={{ outline: \"none\", maxWidth: 196 }}\r\n                        type=\"text\"\r\n                        id=\"textSearchInput\"\r\n                        placeholder={props.intl.formatMessage({\r\n                            id: \"leftbar.search\",\r\n                        })}\r\n                        ref={textInput}\r\n                    />\r\n                    <Button\r\n                        onClick={initiateSearch}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        sx={{ minWidth: 2 }}\r\n                    >\r\n                        <SearchIcon />\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default injectIntl(TextsSearch);\r\n","// @flow\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport TextsSearch from \"./TextsSearch\";\r\nimport { changedSearchValue } from \"actions\";\r\nimport type { AppState } from \"reducers\";\r\nimport * as reducers from \"reducers\";\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        searchTerm: reducers.getSearchValue(state),\r\n        searchValue: state.ui.searchValue,\r\n        textListWidth: reducers.getTextListWidth(state),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    // const { dispatch } = dispatchProps;\r\n    // const { selectedText } = stateProps;\r\n    return {\r\n        searchChanged: (searchTerm: string) => {\r\n            dispatch(changedSearchValue(searchTerm));\r\n        },\r\n    };\r\n};\r\n\r\nconst TextsSearchContainer = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TextsSearch);\r\n\r\nexport default TextsSearchContainer;\r\n","export { default } from \"./TextsSearchContainer\";\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"accessory\":\"Accessory---accessory\"};","import React from \"react\";\r\nimport styles from \"./Accessory.css\";\r\nimport colours from \"css/colour.css\";\r\n\r\nexport const accessoryTypes = {\r\n    ADD: \"+\",\r\n    DELETE: \"\\u00d7\"\r\n};\r\nexport type AccessoryType = $Keys<typeof accessoryTypes>;\r\n\r\ntype Props = {\r\n    type: AccessoryType,\r\n    title?: string,\r\n    onClick?: () => void,\r\n    backgroundColor?: string,\r\n    color?: string\r\n};\r\n\r\nconst Accessory = (props: Props) => {\r\n    let style = {};\r\n    style.backgroundColor = props.backgroundColor || \"\";\r\n    style.color = props.color || \"#fff\";\r\n\r\n    return (\r\n        <div\r\n            className={styles.accessory}\r\n            title={props.title}\r\n            onClick={props.onClick}\r\n            style={style}\r\n        >\r\n            {accessoryTypes[props.type]}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Accessory;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatars\":\"AnnotationAvatar---avatars\",\"avatar\":\"AnnotationAvatar---avatar\"};","import React from \"react\";\r\nimport { Avatar, Chip } from \"components/UI/muiComponent\";\r\nimport styles from \"./AnnotationAvatar.css\";\r\nimport { ThumbUpAlt } from \"components/UI/muiIcon\";\r\n\r\nconst imageUrl = {\r\n    \"སྡེ་དགེ\": \"https://www.lotsawahouse.org/Images/Situ_Panchen.jpg\",\r\n    \"པེ་ཅིན།\":\r\n        \"https://cdn.discordapp.com/attachments/959329505661554708/1034029050580172830/unknown.png\",\r\n    \"སྣར་ཐང༌།\": \"https://www.lotsawahouse.org/Images/Situ_Panchen.jpg\",\r\n};\r\n\r\nfunction AnnotationAvatar({ name }) {\r\n    function stringToColor(string: string) {\r\n        let hash = 0;\r\n        let i;\r\n\r\n        /* eslint-disable no-bitwise */\r\n        for (i = 0; i < string.length; i += 1) {\r\n            hash = string.charCodeAt(i) + ((hash << 5) - hash);\r\n        }\r\n\r\n        let color = \"#\";\r\n\r\n        for (i = 0; i < 3; i += 1) {\r\n            const value = (hash >> (i * 8)) & 0xff;\r\n            color += `00${value.toString(16)}`.slice(-2);\r\n        }\r\n        /* eslint-enable no-bitwise */\r\n\r\n        return color;\r\n    }\r\n    if (name.includes(\"མཉམ་འབྲེལ་པར་མ།།\") || name.includes(\"Working\")) {\r\n        name = \"Working Edition\";\r\n    }\r\n    return (\r\n        <Avatar\r\n            alt={\"dege\"}\r\n            src={imageUrl[name]}\r\n            sx={{\r\n                width: 24,\r\n                height: 24,\r\n                bgcolor: stringToColor(name),\r\n                fontSize: 10,\r\n            }}\r\n        >\r\n            {name.split(\" \").length > 1\r\n                ? `${name.split(\" \")[0][0]}${name.split(\" \")[1][0]}`\r\n                : `${name[0]}`}\r\n        </Avatar>\r\n    );\r\n}\r\n\r\nexport const Avatarlist = () => {\r\n    const list = [{ img: 23 }, { img: 34 }, { img: 70 }];\r\n    return (\r\n        <>\r\n            <ThumbUpAlt sx={{ fontSize: 16, color: \"rgba(0,0,0,0.5)\" }} />\r\n            <div className={styles.avatars}>\r\n                {list.map((l, index) => (\r\n                    <span className={styles.avatar} key={\"d-\" + index}>\r\n                        <img\r\n                            src={`https://picsum.photos/${l.img}`}\r\n                            alt=\"index-image\"\r\n                        />\r\n                    </span>\r\n                ))}\r\n            </div>\r\n            <Chip\r\n                label={`+${Math.floor(Math.random() * 100)}`}\r\n                size=\"small\"\r\n                sx={{ fontSize: 11, height: 11 }}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AnnotationAvatar;\r\n","import React from \"react\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport { Tooltip, Tootip } from \"components/UI/muiComponent\";\r\nfunction ApplyTooltip({\r\n    children,\r\n    tooltipName,\r\n    format = null,\r\n    className = \"\",\r\n    shortcut = \"\",\r\n    on = false,\r\n}) {\r\n    return (\r\n        <>\r\n            <div\r\n                data-tip\r\n                data-for={tooltipName}\r\n                className={className}\r\n                style={{ width: \"100%\" }}\r\n            >\r\n                {!on ? (\r\n                    <Tooltip\r\n                        placement=\"top\"\r\n                        followCursor\r\n                        title={\r\n                            format ? (\r\n                                <FormattedMessage id={format} />\r\n                            ) : (\r\n                                <span>\r\n                                    {tooltipName}\r\n                                    {` [${shortcut}]`}\r\n                                </span>\r\n                            )\r\n                        }\r\n                    >\r\n                        {children}\r\n                    </Tooltip>\r\n                ) : (\r\n                    children\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ApplyTooltip;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button---button\",\"buttonNoBezel\":\"Button---buttonNoBezel\",\"active\":\"Button---active\",\"leftAlign\":\"Button---leftAlign\",\"title\":\"Button---title\",\"icon\":\"Button---icon\"};","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport colours from \"css/colour.css\";\r\nimport styles from \"./Button.css\";\r\nimport Accessory from \"./Accessory\";\r\nimport ApplyTooltip from \"./ApplyTooltip\";\r\nexport type Alignment = \"left\" | \"center\" | \"right\";\r\n\r\ntype Props = {\r\n    title: string,\r\n    color?: string,\r\n    backgroundColor?: string,\r\n    icon?: any,\r\n    align?: Alignment,\r\n    isActive?: boolean,\r\n    accessoryType?: AccessoryType,\r\n    onClick?: () => void,\r\n    noBezel?: boolean,\r\n    disabled?: boolean,\r\n    tooltipTitle: String,\r\n    shortcut?: String,\r\n};\r\n\r\nexport default class Button extends React.Component<Props> {\r\n    render() {\r\n        let color = this.props.color || \"#ffffff\";\r\n        let bgColour = this.props.backgroundColor || colours.mainTint;\r\n        let fontSize = this.props.fontSize || \"14px\";\r\n        let classNames = this.props.noBezel\r\n            ? [styles.buttonNoBezel]\r\n            : [styles.button];\r\n        let tooltipTitle = this.props.tooltipTitle || \"\";\r\n        if (this.props.isActive) classNames.push(styles.active);\r\n        const className = classnames(...classNames);\r\n        let shortcut = this.props.shortcut || \"\";\r\n        let style = {\r\n            fontSize,\r\n            color: color,\r\n            backgroundColor: bgColour,\r\n        };\r\n        if (this.props.align) style.textAlign = this.props.align;\r\n\r\n        return (\r\n            <ApplyTooltip\r\n                tooltipName={tooltipTitle}\r\n                shortcut={shortcut}\r\n                on={this.props.disabled}\r\n            >\r\n                <button\r\n                    style={style}\r\n                    className={className}\r\n                    onClick={this.props.onClick}\r\n                    disabled={this.props.disabled}\r\n                >\r\n                    {this.props.icon && (\r\n                        <div className={styles.icon}>{this.props.icon}</div>\r\n                    )}\r\n                    {this.props.title && (\r\n                        <span className={styles.title}>{this.props.title}</span>\r\n                    )}\r\n                    {this.props.accessoryType && (\r\n                        <Accessory type={this.props.accessoryType} />\r\n                    )}\r\n                </button>\r\n            </ApplyTooltip>\r\n        );\r\n    }\r\n}\r\n","   import React from 'react'\r\n   import {FacebookShareButton,\r\n    WhatsappShareButton,\r\n    FacebookIcon,\r\n    WhatsappIcon} from 'react-share'\r\n    import { FormattedMessage } from \"react-intl\";\r\n    import styles from './Sharebutton.css'\r\n\r\n\r\nconst ShareButton=({content})=>{\r\n\r\n// const content=props?.annotationData?.content\r\n\r\n    return (\r\n        <div className={styles.shareContainer} >\r\n            <div className={styles.shareButton}>\r\n                 <FormattedMessage id=\"annotation.share\" />\r\n            </div>\r\n            <FacebookShareButton\r\n            className={styles.facebookButton}\r\n                id=\"sharebutton\"\r\n                url={`https://parkhang.lopenling.org${window.location.pathname}`}\r\n                quote={content}\r\n                hashtag=\"#openPecha\"\r\n            >\r\n                <FacebookIcon size={16} round={true} />\r\n            </FacebookShareButton>\r\n            <WhatsappShareButton\r\n                className={styles.whatsappButton}\r\n                onClick={() =>\r\n                    console.log(\r\n                        `https://parkhang.lopenling.org${window.location.pathname}`\r\n                    )\r\n                }\r\n                title=\"Parkhang\"\r\n                url={`https://parkhang.lopenling.org${window.location.pathname}`}\r\n            >\r\n                <WhatsappIcon size={16} round={true} />\r\n            </WhatsappShareButton>\r\n\r\n           \r\n             </div>\r\n    );\r\n}\r\n\r\nexport default ShareButton","// extracted by mini-css-extract-plugin\nmodule.exports = {\"shareContainer\":\"Sharebutton---shareContainer\",\"shareButton\":\"Sharebutton---shareButton\",\"facebookButton\":\"Sharebutton---facebookButton\",\"whatsappButton\":\"Sharebutton---whatsappButton\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"voteBtn\":\"Vote---voteBtn\",\"number\":\"Vote---number\",\"voteContainer\":\"Vote---voteContainer\"};","import React from \"react\";\r\nimport { Recommend as RecommendIcon } from \"components/UI/muiIcon\";\r\nimport styles from \"./Vote.css\";\r\nimport { Avatarlist } from \"../AnnotationAvatar\";\r\n\r\nfunction index({ data }) {\r\n    const [no, setno] = React.useState(20);\r\n    const handleClick = () => setno((prev) => prev + 1);\r\n    return (\r\n        <div className={styles.voteContainer} onClick={handleClick}>\r\n            <Avatarlist />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default index;\r\n","import {\r\n    Edit,\r\n    Share,\r\n    VerticalSplit,\r\n    SyncAlt,\r\n    PersonAdd,\r\n    Settings,\r\n    Logout,\r\n    Person,\r\n    Menu,\r\n    CheckBoxOutlineBlank,\r\n    CheckBox,\r\n    Language,\r\n    ExpandMore,\r\n    OpenInNew,\r\n    Info,\r\n    PermMedia,\r\n    Book,\r\n    Feedback,\r\n    Close,\r\n    YoutubeSearchedFor,\r\n    Image,\r\n    OndemandVideo,\r\n    Audiotrack,\r\n    Brightness7,\r\n    Brightness4,\r\n    FilterAlt,\r\n    Search,\r\n    Delete,\r\n    ThumbUpAlt,\r\n    Clear,\r\n    Check,\r\n} from \"@mui/icons-material\";\r\n\r\nexport {\r\n    Edit,\r\n    Share,\r\n    VerticalSplit,\r\n    SyncAlt,\r\n    PersonAdd,\r\n    Settings,\r\n    Logout,\r\n    Person,\r\n    Menu,\r\n    CheckBoxOutlineBlank,\r\n    CheckBox,\r\n    Language,\r\n    ExpandMore,\r\n    OpenInNew,\r\n    Info,\r\n    PermMedia,\r\n    Book,\r\n    Feedback,\r\n    Close,\r\n    YoutubeSearchedFor,\r\n    Image,\r\n    OndemandVideo,\r\n    Audiotrack,\r\n    Brightness7,\r\n    Brightness4,\r\n    FilterAlt,\r\n    Search,\r\n    Delete,\r\n    ThumbUpAlt,\r\n    Clear,\r\n    Check,\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fontSize\":\"FontSize---fontSize\"};","import React from \"react\";\r\nimport styles from \"./FontSize.css\";\r\n\r\ntype Props = {\r\n    fontSize: number,\r\n    onChange: (fontSize: number) => void\r\n};\r\n\r\nconst FontSize = (props: Props) => {\r\n    const minimumSize = 14;\r\n    const maximumSize = 48;\r\n    const options = new Array(maximumSize - minimumSize)\r\n        .fill()\r\n        .map((value: any, index: number) => {\r\n            const size = minimumSize + index;\r\n            return (\r\n                <option value={size} key={size}>\r\n                    {size}\r\n                </option>\r\n            );\r\n        });\r\n    const onChange = (e: Event) => {\r\n        const target = event.target;\r\n        const fontSize = Number(target.value);\r\n        props.onChange(fontSize);\r\n    }\r\n    return (\r\n        <div className={styles.fontSize}>\r\n            <label htmlFor=\"fontSize\">Font Size</label>\r\n            <select value={props.fontSize} onChange={onChange}>\r\n                {options}\r\n            </select>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FontSize;\r\n","import React, { useEffect } from \"react\";\r\nimport setting from \"./discourseforumsettings\";\r\nfunction postMessageReceived(e) {\r\n    if (!e) {\r\n        return;\r\n    }\r\n\r\n    if (e.data && e.data.type === \"discourse-resize\" && e.data.embedId) {\r\n        var elem = document.getElementById(e.data.embedId);\r\n        if (elem) {\r\n            elem.height = e.data.height + \"px\";\r\n        }\r\n    }\r\n}\r\nwindow.addEventListener(\"message\", postMessageReceived, false);\r\n\r\nexport function DiscourseForum({ topicId }) {\r\n    // const topicId=1446\r\n    useEffect(() => {\r\n        if (topicId) {\r\n            window.DiscourseEmbed = {\r\n                discourseUrl: \"https://lopenling.org/\",\r\n                topicId: topicId,\r\n            };\r\n            const d = document.createElement(\"script\");\r\n            d.type = \"text/javascript\";\r\n            d.async = true;\r\n            d.src = setting(topicId);\r\n            (\r\n                document.getElementsByTagName(\"head\")[0] ||\r\n                document.getElementsByTagName(\"body\")[0]\r\n            ).appendChild(d);\r\n        }\r\n    }, []);\r\n    if (!topicId) return <div>Topic unavailable</div>;\r\n    return <div id={`discourse-comments-${topicId}`}></div>;\r\n}\r\n\r\nexport function DiscourseTopicList({ category = \"\", perPage = 5 }) {\r\n    React.useEffect(() => {\r\n        var lists = document.querySelectorAll(\"#topics\");\r\n        for (var i = 0; i < lists.length; i++) {\r\n            var list = lists[i];\r\n            var url = list.getAttribute(\"url\");\r\n            if (!url || url.length === 0) {\r\n                console.error(\"Error, `discourse-url` was not found\");\r\n                continue;\r\n            }\r\n            var frameId = \"de-\" + Math.random().toString(36).substr(2, 9);\r\n            var params = [\"discourse_embed_id=\" + frameId];\r\n            list.removeAttribute(\"discourse-url\");\r\n\r\n            for (var j = 0; j < list.attributes.length; j++) {\r\n                var attr = list.attributes[j];\r\n                params.push(attr.name.replace(\"-\", \"_\") + \"=\" + attr.value);\r\n            }\r\n\r\n            var iframe = document.createElement(\"iframe\");\r\n            iframe.src = url + \"/embed/topics?\" + params.join(\"&\");\r\n            iframe.id = frameId;\r\n            iframe.frameBorder = 0;\r\n            iframe.scrolling = \"no\";\r\n            iframe.width = \"100%\";\r\n            list.appendChild(iframe);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div\r\n            id=\"topics\"\r\n            url=\"https://lopenling.org/\"\r\n            style={{ maxHeight: \"70vh\", overflow: \"scroll\" }}\r\n            per-page={perPage}\r\n            category={category}\r\n            template=\"complete\"\r\n            status=\"open\"\r\n            allow-create=\"true\"\r\n        ></div>\r\n    );\r\n}\r\n","export default function (id) {\r\n  var DE = window.DiscourseEmbed || {};\r\n  var comments = document.getElementById(`discourse-comments-${id}`);\r\n  if(comments){\r\n    var iframe = document.createElement(\"iframe\");\r\n\r\n  [\r\n    \"discourseUrl\",\r\n    \"discourseEmbedUrl\",\r\n    \"discourseUserName\",\r\n    \"discourseReferrerPolicy\",\r\n  ].forEach(function (i) {\r\n    if (window[i]) {\r\n      DE[i] = DE[i] || window[i];\r\n    }\r\n  });\r\n\r\n  var queryParams = {};\r\n\r\n  if (DE.discourseEmbedUrl) {\r\n    if (DE.discourseEmbedUrl.startsWith(\"/\")) {\r\n      console.error(\r\n        \"discourseEmbedUrl must be a full URL, not a relative path\"\r\n      );\r\n    }\r\n\r\n    queryParams.embed_url = encodeURIComponent(DE.discourseEmbedUrl);\r\n  }\r\n\r\n  if (DE.discourseUserName) {\r\n    queryParams.discourse_username = DE.discourseUserName;\r\n  }\r\n\r\n  if (DE.topicId) {\r\n    queryParams.topic_id = DE.topicId;\r\n  }\r\n\r\n  var src = DE.discourseUrl + \"embed/comments\";\r\n  var keys = Object.keys(queryParams);\r\n  if (keys.length > 0) {\r\n    src += \"?\";\r\n\r\n    for (var i = 0; i < keys.length; i++) {\r\n      if (i > 0) {\r\n        src += \"&\";\r\n      }\r\n\r\n      var k = keys[i];\r\n      src += k + \"=\" + queryParams[k];\r\n    }\r\n  }\r\n\r\n  iframe.src = src;\r\n  iframe.id = \"discourse-embed-frame\";\r\n  iframe.width = \"100%\";\r\n  iframe.frameBorder = \"0\";\r\n  iframe.scrolling = \"no\";\r\n  iframe.referrerPolicy =\r\n    DE.discourseReferrerPolicy || \"no-referrer-when-downgrade\";\r\n  comments.appendChild(iframe);\r\n\r\n  // Thanks http://amendsoft-javascript.blogspot.ca/2010/04/find-x-and-y-coordinate-of-html-control.html\r\n  function findPosY(obj) {\r\n    var top = 0;\r\n    if (obj.offsetParent) {\r\n      while (1) {\r\n        top += obj.offsetTop;\r\n        if (!obj.offsetParent) break;\r\n        obj = obj.offsetParent;\r\n      }\r\n    } else if (obj.y) {\r\n      top += obj.y;\r\n    }\r\n    return top;\r\n  }\r\n\r\n  function normalizeUrl(url) {\r\n    return url.replace(/^https?(\\:\\/\\/)?/, \"\");\r\n  }\r\n\r\n  function postMessageReceived(e) {\r\n    if (!e) {\r\n      return;\r\n    }\r\n    if (!normalizeUrl(DE.discourseUrl).includes(normalizeUrl(e.origin))) {\r\n      return;\r\n    }\r\n\r\n    if (e.data) {\r\n      if (e.data.type === \"discourse-resize\" && e.data.height) {\r\n        iframe.height = e.data.height + \"px\";\r\n      }\r\n\r\n      if (e.data.type === \"discourse-scroll\" && e.data.top) {\r\n        // find iframe offset\r\n        var destY = findPosY(iframe) + e.data.top;\r\n        window.scrollTo(0, destY);\r\n      }\r\n    }\r\n  }\r\n  window.addEventListener(\"message\", postMessageReceived, false);\r\n}\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"voteBtn\":\"embedingVote---voteBtn\"};","import React from \"react\";\r\nimport { ThumbUp } from \"components/UI/muiIcon\";\r\nimport { Typography, Box, Badge, Chip } from \"components/UI/muiComponent\";\r\nimport styles from \"./embedingVote.css\";\r\nimport { connect } from \"react-redux\";\r\nlet liste = [\r\n    {\r\n        annotationId: \"234241weq\",\r\n        annotationContent: \"sad\",\r\n        voteCount: 20,\r\n    },\r\n    {\r\n        annotationId: \"12312weq\",\r\n        annotationContent: \"happy\",\r\n        voteCount: 40,\r\n    },\r\n];\r\n\r\nfunction embedingVote(props) {\r\n    const [list, setList] = React.useState(liste);\r\n    const handleClick = (id) => {\r\n        //increase Count from axios and refresh\r\n\r\n        let newList = list.map((l) => {\r\n            if (l.annotationId === id)\r\n                return {\r\n                    ...l,\r\n                    voteCount: l.voteCount + 1,\r\n                };\r\n            else return l;\r\n        });\r\n        setList(newList);\r\n    };\r\n    // if(!USER_LOGGED_IN) return <h1>Login please!</h1>\r\n    return (\r\n        <Box\r\n            sx={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                gap: 2,\r\n                marginTop: 2,\r\n            }}\r\n        >\r\n            {list.map((ls, id) => {\r\n                return (\r\n                    <Box\r\n                        sx={{ display: \"flex\", alignItems: \"center\" }}\r\n                        key={ls.annotationId}\r\n                    >\r\n                        <Badge badgeContent={ls.voteCount} color=\"primary\">\r\n                            <Chip\r\n                                label={ls.annotationContent}\r\n                                onClick={() => handleClick(ls.annotationId)}\r\n                            />\r\n                        </Badge>\r\n                    </Box>\r\n                );\r\n            })}\r\n        </Box>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    console.log(state);\r\n    return {\r\n        user: \"hi\",\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(embedingVote);\r\n","import React, { useEffect } from \"react\";\r\n// import { MapInteractionCSS } from \"react-map-interaction\";\r\nimport mediumZoom from \"medium-zoom\";\r\nfunction imageZoom({ children, cl }) {\r\n    useEffect(() => {\r\n        const images = document.querySelector(\".\" + cl);\r\n        mediumZoom(images, {\r\n            margin: 50,\r\n            background: \"rgba(0,0,0,0.4)\",\r\n            scrollOffset: 200,\r\n        });\r\n    }, []);\r\n    return <>{children}</>;\r\n}\r\n\r\nexport default imageZoom;\r\n","import {useState,useEffect} from 'react'\r\n\r\nfunction getSavedValue(key,initialValue){\r\n    const savedValue=JSON.parse(localStorage.getItem(key))\r\n    if (savedValue) return savedValue\r\n    \r\n    // if (initialValue instanceof function) return initialValue()\r\n\r\n    return initialValue\r\n}\r\n\r\nexport default function useLocalStorage(key,initialValue){\r\n    const [value,setValue]=useState(()=>{\r\n        return getSavedValue(key,initialValue)\r\n         })\r\n\r\n\r\n         useEffect(()=>{\r\n        localStorage.setItem(key,JSON.stringify(value))\r\n         },[value])\r\n    return [value,setValue]\r\n\r\n}","// @flow\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport TextList from \"components/TextList\";\r\nimport * as actions from \"actions\";\r\nimport { getSelectedText } from \"reducers\";\r\nimport type { AppState } from \"reducers\";\r\nimport * as api from \"api\";\r\nimport * as reducers from \"reducers\";\r\nimport { batchActions } from \"redux-batched-actions\";\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    const searchValue = reducers.getSearchValue(state);\r\n    const searchResults = reducers.getSearchResults(state, searchValue);\r\n    const selectedSearchResult = reducers.getSelectedSearchResult(state);\r\n    // TODO: display search results or spinner depending on when anything\r\n    // returned\r\n\r\n    let searching = false;\r\n    let texts = state.data.texts;\r\n    if (searchValue.length > 0) {\r\n        if (searchResults === null) {\r\n            searching = true;\r\n            texts = [];\r\n        } else {\r\n            texts = texts.filter((text) =>\r\n                searchResults.hasOwnProperty(text.id)\r\n            );\r\n        }\r\n    }\r\n\r\n    return {\r\n        texts: texts,\r\n        selectedText: getSelectedText(state),\r\n        searchTerm: searchValue,\r\n        searchResults,\r\n        selectedSearchResult,\r\n        searching,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSelectedText: (text: api.TextData) => {\r\n            dispatch(actions.selectedText(text));\r\n        },\r\n        onSelectedSearchResult: (\r\n            text: api.TextData,\r\n            start: number,\r\n            length: number,\r\n            selectedText: api.TextData | null\r\n        ) => {\r\n            if (!selectedText || selectedText.id !== text.id) {\r\n                dispatch(\r\n                    batchActions([\r\n                        actions.selectedSearchResult(text.id, start, length),\r\n                        actions.selectedText(text),\r\n                    ])\r\n                );\r\n            } else {\r\n                dispatch(actions.selectedSearchResult(text.id, start, length));\r\n            }\r\n        },\r\n        onSearchText: (text: api.TextData, searchTerm: string) => {\r\n            dispatch(actions.searchedText(text.id, searchTerm));\r\n        },\r\n    };\r\n};\r\n\r\nconst TextListContainer = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TextList);\r\n\r\nexport default TextListContainer;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\"};","export default __webpack_public_path__ + \"b81eedeb7a90a13b48c4a1185a58ca30.png\";","var _path;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar SvgPencilAltIcon = function SvgPencilAltIcon(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 512 512\"\n  }, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M497.9 142.1l-46.1 46.1c-4.7 4.7-12.3 4.7-17 0l-111-111c-4.7-4.7-4.7-12.3 0-17l46.1-46.1c18.7-18.7 49.1-18.7 67.9 0l60.1 60.1c18.8 18.7 18.8 49.1 0 67.9zM284.2 99.8L21.6 362.4.4 483.9c-2.9 16.4 11.4 30.6 27.8 27.8l121.5-21.3 262.6-262.6c4.7-4.7 4.7-12.3 0-17l-111-111c-4.8-4.7-12.4-4.7-17.1 0zM124.1 339.9c-5.5-5.5-5.5-14.3 0-19.8l154-154c5.5-5.5 14.3-5.5 19.8 0s5.5 14.3 0 19.8l-154 154c-5.5 5.5-14.3 5.5-19.8 0zM88 424h48v36.3l-64.5 11.3-31.1-31.1L51.7 376H88v48z\"\n  })));\n};\n\nexport default SvgPencilAltIcon;","var _path, _path2;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar SvgCheckCircle = function SvgCheckCircle(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 24 24\"\n  }, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n  })));\n};\n\nexport default SvgCheckCircle;","var _path, _path2;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar SvgNote = function SvgNote(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 24 24\"\n  }, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3 18h12v-2H3v2zM3 6v2h18V6H3zm0 7h18v-2H3v2z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"none\",\n    d: \"M0 0h24v24H0V0z\"\n  })));\n};\n\nexport default SvgNote;","var _g;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar SvgOptions = function SvgOptions(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 52.93 52.93\"\n  }, props), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    fill: \"#010002\"\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 26.465,\n    cy: 25.59,\n    r: 4.462\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M52.791 32.256c-.187-1.034-1.345-2.119-2.327-2.492l-2.645-1.004c-.982-.373-1.699-1.237-1.651-1.935.029-.417.046-.838.046-1.263 0-.284-.008-.566-.021-.846-.023-.467.719-1.193 1.677-1.624l2.39-1.074c.958-.432 2.121-1.565 2.194-2.613.064-.929-.047-2.196-.648-3.765a8.336 8.336 0 00-2.779-3.718c-.839-.633-2.423-.595-3.381-.163l-2.08.936c-.958.431-2.274.119-3.025-.616a17.282 17.282 0 00-.54-.509c-.778-.705-1.17-2-.796-2.983l.819-2.162c.373-.982.368-2.594-.322-3.385-.635-.728-1.643-1.579-3.215-2.281-1.764-.788-3.346-.811-4.483-.639-1.039.158-2.121 1.331-2.494 2.312l-.946 2.491c-.373.982-.798 1.775-.949 1.771a6.289 6.289 0 00-.274-.005c-.622 0-1.238.03-1.846.09-1.016.1-2.176-.507-2.607-1.465l-1.124-2.5c-.431-.959-1.538-2.21-2.589-2.227-.916-.016-2.207.209-3.936 1.028-1.874.889-2.971 1.742-3.611 2.437-.712.771-.554 2.416-.122 3.374l1.481 3.296c.431.958.256 2.266-.324 2.979-.579.714-1.786 1.033-2.768.661l-3.598-1.365c-.982-.373-2.65-.476-3.406.256-.658.637-1.412 1.709-2.056 3.51-.696 1.954-.867 3.332-.83 4.276.042 1.05 1.317 2.101 2.3 2.474l4.392 1.667c.982.373 1.782 1.244 1.839 1.941.055.699-.635 1.61-1.593 2.042l-4.382 1.97c-.958.431-2.211 1.539-2.227 2.589-.015.916.21 2.208 1.028 3.935.89 1.874 1.742 2.971 2.437 3.611.773.713 2.417.554 3.375.123l4.698-2.112c.958-.432 2.076-.412 2.525.013s.535 1.541.162 2.524L12.743 46.6c-.373.982-.476 2.65.256 3.404.638.659 1.709 1.414 3.51 2.057 1.954.697 3.333.868 4.277.831 1.05-.042 2.1-1.318 2.473-2.3l1.693-4.46c.373-.982 1.058-1.742 1.531-1.719a17.414 17.414 0 001.255.016c.219-.007.747.762 1.178 1.721l1.963 4.364c.431.958 1.605 1.986 2.653 2.038 1.121.056 2.669-.062 4.43-.734 1.685-.645 2.659-1.604 3.219-2.442.584-.873.388-2.517-.044-3.475l-1.606-3.573c-.431-.958-.169-2.191.527-2.824.693-.633 2-.9 2.981-.526l3.432 1.303c.982.373 2.64.489 3.478-.145.738-.56 1.591-1.49 2.281-3.034.827-1.854.785-3.605.561-4.846zM26.465 39.79c-7.844 0-14.201-6.357-14.201-14.2s6.357-14.2 14.201-14.2c7.842 0 14.2 6.357 14.2 14.2.001 7.843-6.358 14.2-14.2 14.2z\"\n  }))));\n};\n\nexport default SvgOptions;","var _path, _path2, _path3;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar SvgPageBreakIcon = function SvgPageBreakIcon(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 30 40\",\n    fill: \"currentColor\"\n  }, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3 0h24v15H3z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"currentColor\",\n    strokeWidth: 3,\n    d: \"M0 20h8M11 20h8M22 20h8\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3 25h24v15H3z\"\n  })));\n};\n\nexport default SvgPageBreakIcon;","var _path, _path2;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar SvgQuestionAnswer = function SvgQuestionAnswer(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\"\n  }, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M21 6h-2v9H6v2c0 .55.45 1 1 1h11l4 4V7c0-.55-.45-1-1-1zm-4 6V3c0-.55-.45-1-1-1H3c-.55 0-1 .45-1 1v14l4-4h10c.55 0 1-.45 1-1z\"\n  })));\n};\n\nexport default SvgQuestionAnswer;","var _path;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar SvgWrench = function SvgWrench(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 512 512\"\n  }, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M507.73 109.1c-2.24-9.03-13.54-12.09-20.12-5.51l-74.36 74.36-67.88-11.31-11.31-67.88 74.36-74.36c6.62-6.62 3.43-17.9-5.66-20.16-47.38-11.74-99.55.91-136.58 37.93-39.64 39.64-50.55 97.1-34.05 147.2L18.74 402.76c-24.99 24.99-24.99 65.51 0 90.5 24.99 24.99 65.51 24.99 90.5 0l213.21-213.21c50.12 16.71 107.47 5.68 147.37-34.22 37.07-37.07 49.7-89.32 37.91-136.73zM64 472c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z\"\n  })));\n};\n\nexport default SvgWrench;","// @flow\r\nimport SegmentedText from \"./SegmentedText\";\r\nimport AnnotatedText from \"./AnnotatedText\";\r\n\r\nexport type Splitter = (string) => number[];\r\n\r\nexport default class SplitText {\r\n    annotatedText: AnnotatedText;\r\n    splitter: Splitter;\r\n    _texts: SegmentedText[] | null;\r\n    _textsId: string | null;\r\n    _textsFinalPositions: number[];\r\n\r\n    constructor(annotatedText: AnnotatedText, splitter: Splitter) {\r\n        this.annotatedText = annotatedText;\r\n        this.splitter = splitter;\r\n        this._texts = null;\r\n        this._textsId = null;\r\n        this._textsFinalPositions = [];\r\n    }\r\n\r\n    get texts(): SegmentedText[] {\r\n        if (!this.annotatedText) {\r\n            return [];\r\n        }\r\n        if (\r\n            !this._texts ||\r\n            this._textsId !== this.annotatedText.getUniqueId()\r\n        ) {\r\n            this._textsFinalPositions = [];\r\n            const segmentedText = this.annotatedText.segmentedText;\r\n            const textString = segmentedText.getText();\r\n            let splitPositions = this.splitter(textString).filter(\r\n                (l) => l !== 0\r\n            );\r\n            if (splitPositions.length === 0) {\r\n                this._textsFinalPositions.push(textString.length);\r\n                return [segmentedText];\r\n            }\r\n            let lastPosition = splitPositions[splitPositions.length - 1];\r\n            if (lastPosition + 1 < textString.length) {\r\n                splitPositions.push(textString.length - 1);\r\n            }\r\n            const segments = segmentedText.segments;\r\n            let startIndex = 0;\r\n            let texts = [];\r\n            for (let i = 0; i < splitPositions.length; i++) {\r\n                const position = splitPositions[i];\r\n                const endIndex = segmentedText.indexOfSegmentAtPosition(\r\n                    position - 1\r\n                );\r\n                let textSegments;\r\n                if (i == splitPositions.length - 1) {\r\n                    // final position\r\n                    textSegments = segments.slice(startIndex);\r\n                } else {\r\n                    textSegments = segments.slice(startIndex, endIndex + 1);\r\n                }\r\n\r\n                const text = new SegmentedText(textSegments);\r\n                texts.push(text);\r\n                startIndex = endIndex + 1;\r\n                if (endIndex >= 0) {\r\n                    const finalSegment = segments[endIndex];\r\n                    this._textsFinalPositions.push(finalSegment.end);\r\n                }\r\n            }\r\n\r\n            this._texts = texts.filter((l) => l.segments.length > 0);\r\n            this._textsId = this.annotatedText.getUniqueId();\r\n        }\r\n        return this._texts || [];\r\n    }\r\n\r\n    getTextsFinalPositions(): number[] {\r\n        this.texts;\r\n        return this._textsFinalPositions;\r\n    }\r\n\r\n    /**\r\n     * Return the index of the text portion that contains the given position.\r\n     *\r\n     * @param position\r\n     * @returns number\r\n     */\r\n    getTextIndexOfPosition(position: number): number {\r\n        const textsFinalPositions = this.getTextsFinalPositions();\r\n        let lastPosition = 0;\r\n        let textIndex = null;\r\n        for (let i = 0; i < textsFinalPositions.length; i++) {\r\n            let endPosition = textsFinalPositions[i];\r\n            if (position >= lastPosition && position <= endPosition) {\r\n                textIndex = i;\r\n                break;\r\n            }\r\n            lastPosition = endPosition;\r\n        }\r\n        if (textIndex === null) {\r\n            // Likely an insertion at the end of a text\r\n            console.warn(\"no index for position %d\", position);\r\n            textIndex = textsFinalPositions.length - 1;\r\n        }\r\n        return textIndex;\r\n    }\r\n}\r\n","const tibetanVowels = [\"ི\", \"ུ\", \"ེ\", \"ོ\"];\r\nconst shaySwallowers = [\"ཀ\", \"ག\"];\r\nexport const NON_BREAKING_TSHEG = \"༌\";\r\n\r\nfunction isTibetanCharacter(char) {\r\n    return char.codePointAt(0) >= 3840 && char.codePointAt(0) <= 4095;\r\n}\r\n\r\n/**\r\n * Returns the given string with a Tibetan shay character\r\n * added (or omitted) correctly.\r\n * @param {string} str\r\n * @returns {string}\r\n */\r\nexport default function addTibetanShay(str, alternateEnd = null) {\r\n    const lastChar = str.slice(-1);\r\n    let newStr = \"\";\r\n\r\n    if (!isTibetanCharacter(lastChar)) {\r\n        newStr = str;\r\n        if (alternateEnd) {\r\n            newStr += alternateEnd;\r\n        }\r\n    } else if (lastChar === \"ང\") {\r\n        newStr += str + NON_BREAKING_TSHEG + \"།\";\r\n    } else if (shaySwallowers.indexOf(lastChar) !== -1) {\r\n        newStr += str;\r\n    } else if (tibetanVowels.indexOf(lastChar) !== -1) {\r\n        if (shaySwallowers.indexOf(str.charAt(str.length - 2)) !== -1) {\r\n            newStr += str;\r\n        } else {\r\n            newStr += str + \"།\";\r\n        }\r\n    } else {\r\n        newStr += str + \"།\";\r\n    }\r\n\r\n    return newStr;\r\n}\r\n","export default function shallowEqual(objA, objB) {\r\n    if (objA === objB) {\r\n        return true;\r\n    }\r\n\r\n    let aKeys = Object.keys(objA);\r\n    let bKeys = Object.keys(objB);\r\n    let len = aKeys.length;\r\n\r\n    if (bKeys.length !== len) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0; i < len; i++) {\r\n        let key = aKeys[i];\r\n\r\n        if (objA[key] !== objB[key]) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n","// @flow\r\nimport type { Splitter } from \"lib/SplitText\";\r\n\r\n/**\r\n * Returns a function that accepts a string but simply\r\n * returns the initial array of positions passed to it.\r\n *\r\n * @param positions - The positions where a string should be split\r\n */\r\nexport default function positionSplitter(positions: number[]): Splitter {\r\n    const newPositions = [...positions];\r\n    if (newPositions[0] === 0) {\r\n        newPositions.shift();\r\n    }\r\n    return string => newPositions;\r\n}\r\n","// @flow\r\n\r\nimport type { AppState } from \"reducers\";\r\nimport * as actions from \"actions\";\r\nimport * as reducers from \"reducers\";\r\nimport * as TextStore from \"state_helpers/TextStore\";\r\nimport AnnotatedText, {\r\n    WORKING_VERSION_ANNOTATION_ID\r\n} from \"lib/AnnotatedText\";\r\nimport Source, { WORKING_VERSION_SOURCE_NAME } from \"lib/Source\";\r\nimport Annotation, { ANNOTATION_TYPES } from \"lib/Annotation\";\r\nimport TextSegment from \"lib/TextSegment\";\r\nimport { batchActions } from \"redux-batched-actions\";\r\n\r\nconst closeAnnotationControls = (\r\n    state: AppState,\r\n    dispatch: (action: actions.Action) => void\r\n) => {\r\n    const activeAnnotation = reducers.getActiveTextAnnotation(state);\r\n    if (activeAnnotation) {\r\n        const dismissTextAnnotation = actions.changedActiveTextAnnotation(null);\r\n        dispatch(dismissTextAnnotation);\r\n    }\r\n};\r\n\r\nconst addPageBreak = (\r\n    state: AppState,\r\n    dispatch: (action: actions.Action) => void\r\n) => {\r\n    addBreak(state, dispatch, ANNOTATION_TYPES.pageBreak);\r\n};\r\n\r\nconst addLineBreak = (\r\n    state: AppState,\r\n    dispatch: (action: actions.Action) => void\r\n) => {\r\n    addBreak(state, dispatch, ANNOTATION_TYPES.lineBreak);\r\n};\r\n\r\nconst addBreak = (\r\n    state: AppState,\r\n    dispatch: (action: actions.Action) => void,\r\n    breakType: string,\r\n    selectBreak: boolean = false\r\n) => {\r\n    const selectedWitness = reducers.getSelectedTextWitness(state);\r\n    const activeAnnotation = reducers.getActiveTextAnnotation(state);\r\n    if (\r\n        !activeAnnotation ||\r\n        activeAnnotation.isType(ANNOTATION_TYPES.pageBreak) ||\r\n        activeAnnotation.isType(ANNOTATION_TYPES.lineBreak)\r\n    ) {\r\n        return;\r\n    }\r\n    let annotatedText = null;\r\n    if (selectedWitness) {\r\n        annotatedText = TextStore.getWitnessText(state, selectedWitness.id);\r\n    }\r\n\r\n    const user = reducers.getUser(state);\r\n    if (activeAnnotation && selectedWitness && annotatedText && user) {\r\n        const breakAnnotation = new Annotation(\r\n            null,\r\n            activeAnnotation.witness,\r\n            activeAnnotation.end + 1,\r\n            0,\r\n            null,\r\n            breakType,\r\n            selectedWitness,\r\n            user\r\n        );\r\n\r\n        if (!breakExists(annotatedText, breakAnnotation)) {\r\n            let selectedWitnessData = reducers.dataFromWitness(selectedWitness);\r\n            let actionsBatch = [];\r\n            actionsBatch.push(actions.createdAnnotation(breakAnnotation));\r\n            actionsBatch.push(\r\n                actions.appliedAnnotation(\r\n                    breakAnnotation.uniqueId,\r\n                    selectedWitnessData\r\n                )\r\n            );\r\n            if (selectBreak) {\r\n                actionsBatch.push(\r\n                    actions.changedActiveTextAnnotation(breakAnnotation)\r\n                );\r\n            } else {\r\n                actionsBatch.push(actions.changedActiveTextAnnotation(null));\r\n            }\r\n            dispatch(batchActions(actionsBatch));\r\n        }\r\n    }\r\n};\r\n\r\nconst breakExists = (\r\n    annotatedText: AnnotatedText,\r\n    breakAnnotation: Annotation\r\n): boolean => {\r\n    return (\r\n        annotationTypeExists(\r\n            annotatedText,\r\n            ANNOTATION_TYPES.pageBreak,\r\n            breakAnnotation.start\r\n        ) ||\r\n        annotationTypeExists(\r\n            annotatedText,\r\n            ANNOTATION_TYPES.lineBreak,\r\n            breakAnnotation.start\r\n        )\r\n    );\r\n};\r\n\r\nconst annotationTypeExists = (\r\n    annotatedText: AnnotatedText,\r\n    type: string,\r\n    position: number\r\n): boolean => {\r\n    const annotations = annotatedText.getAnnotationsOfType(type);\r\n    for (let id in annotations) {\r\n        if (annotations.hasOwnProperty(id)) {\r\n            const annotation = annotations[id];\r\n            if (position === annotation.start) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nconst selectNextSegment = (\r\n    state: AppState,\r\n    dispatch: (action: actions.Action) => void\r\n) => {\r\n    const selectedWitness = reducers.getSelectedTextWitness(state);\r\n    const activeAnnotation = reducers.getActiveTextAnnotation(state);\r\n    let annotatedText = null;\r\n    if (selectedWitness) {\r\n        annotatedText = TextStore.getWitnessText(state, selectedWitness.id);\r\n    }\r\n    if (!selectedWitness || !activeAnnotation || !annotatedText) return;\r\n\r\n    let segments, start, length, nextPos;\r\n    if (activeAnnotation.isDeletion) {\r\n        const nextOriginalPos = activeAnnotation.end + 1;\r\n        const nextSegment = annotatedText.segmentAtOriginalPosition(\r\n            nextOriginalPos\r\n        );\r\n        if (nextSegment && nextSegment instanceof TextSegment) {\r\n            nextPos = nextSegment.start;\r\n        } else if (nextSegment && typeof nextSegment == \"number\") {\r\n            // TODO: finish this - deletion after another deletion\r\n        }\r\n    } else {\r\n        segments = annotatedText.segmentsForAnnotation(activeAnnotation);\r\n        start =\r\n            typeof segments[0] == \"number\" ? segments[0] : segments[0].start;\r\n        length = activeAnnotation.content.length;\r\n        nextPos = start + length;\r\n    }\r\n    // TODO: needs to add support for non-active insertion.\r\n    // These are visible on the working edition.\r\n\r\n    if (nextPos === undefined) {\r\n        console.warn(\"Can't get next segment after %o\", activeAnnotation);\r\n        return;\r\n    }\r\n\r\n    let existingAnnotations = annotatedText.annotationsForPosition(nextPos);\r\n    if (activeAnnotation.isDeletion) {\r\n        // The current deletion will be in exisitingAnnotations as it\r\n        // shares a position with the next segment.\r\n        existingAnnotations = existingAnnotations.filter(annotation => {\r\n            activeAnnotation.uniqueId !== annotation.uniqueId;\r\n        });\r\n    }\r\n    let newActiveAnnotation = null;\r\n    if (existingAnnotations.length > 0) {\r\n        newActiveAnnotation = existingAnnotations[0];\r\n    } else {\r\n        let segment = annotatedText.segmentedText.segmentAtPosition(nextPos);\r\n        if (segment) {\r\n            let baseAnnotation = annotatedText.getBaseAnnotation(\r\n                nextPos,\r\n                segment.length\r\n            );\r\n            let workingWitness = reducers.getWorkingWitness(\r\n                state,\r\n                selectedWitness.text.id\r\n            );\r\n            let user = reducers.getUser(state);\r\n            if (baseAnnotation && workingWitness && user && segment) {\r\n                newActiveAnnotation = new Annotation(\r\n                    WORKING_VERSION_ANNOTATION_ID,\r\n                    workingWitness,\r\n                    baseAnnotation.start,\r\n                    baseAnnotation.length,\r\n                    segment.text,\r\n                    ANNOTATION_TYPES.variant,\r\n                    selectedWitness,\r\n                    user\r\n                );\r\n            }\r\n        }\r\n    }\r\n    if (newActiveAnnotation) {\r\n        dispatch(actions.changedActiveTextAnnotation(newActiveAnnotation));\r\n    }\r\n};\r\n\r\nconst selectPreviousSegment = (\r\n    state: AppState,\r\n    dispatch: (action: actions.Action) => void\r\n) => {\r\n    const selectedWitness = reducers.getSelectedTextWitness(state);\r\n    const activeAnnotation = reducers.getActiveTextAnnotation(state);\r\n    let annotatedText = null;\r\n    if (selectedWitness) {\r\n        annotatedText = TextStore.getWitnessText(state, selectedWitness.id);\r\n    }\r\n    if (\r\n        !selectedWitness ||\r\n        !activeAnnotation ||\r\n        !annotatedText ||\r\n        activeAnnotation.start === 0\r\n    )\r\n        return;\r\n\r\n    let segments, start, prevPos;\r\n    const prevOriginalPos = activeAnnotation.start - 1;\r\n    const prevSegment = annotatedText.segmentAtOriginalPosition(\r\n        prevOriginalPos\r\n    );\r\n    if (prevSegment && prevSegment instanceof TextSegment) {\r\n        prevPos = prevSegment.start;\r\n    } else if (prevSegment && typeof prevSegment == \"number\") {\r\n        let prevAnnotation = annotatedText.annotationsForPosition(prevSegment);\r\n        let segments = annotatedText.segmentsForAnnotation(activeAnnotation);\r\n        if (segments.length > 0) {\r\n            prevPos =\r\n                typeof segments[0] == \"number\"\r\n                    ? segments[0]\r\n                    : segments[0].start;\r\n        }\r\n    }\r\n\r\n    // TODO: needs to add support for non-active insertion.\r\n    // These are visible on the working edition.\r\n\r\n    if (prevPos === undefined) {\r\n        console.warn(\"Can't get previous segment before %o\", activeAnnotation);\r\n        return;\r\n    }\r\n\r\n    let existingAnnotations = annotatedText.annotationsForPosition(prevPos);\r\n    let newActiveAnnotation = null;\r\n    if (existingAnnotations.length > 0) {\r\n        newActiveAnnotation = existingAnnotations[0];\r\n        if (\r\n            newActiveAnnotation.isDeletion &&\r\n            prevSegment &&\r\n            prevSegment instanceof TextSegment\r\n        ) {\r\n            newActiveAnnotation = null;\r\n        }\r\n    }\r\n    if (\r\n        !newActiveAnnotation &&\r\n        prevSegment &&\r\n        prevSegment instanceof TextSegment\r\n    ) {\r\n        let baseAnnotation = annotatedText.getBaseAnnotation(\r\n            prevPos,\r\n            prevSegment.length\r\n        );\r\n        let workingWitness = reducers.getWorkingWitness(\r\n            state,\r\n            selectedWitness.text.id\r\n        );\r\n        let user = reducers.getUser(state);\r\n        if (baseAnnotation && workingWitness && user && prevSegment) {\r\n            newActiveAnnotation = new Annotation(\r\n                WORKING_VERSION_ANNOTATION_ID,\r\n                workingWitness,\r\n                baseAnnotation.start,\r\n                baseAnnotation.length,\r\n                prevSegment.text,\r\n                ANNOTATION_TYPES.variant,\r\n                selectedWitness,\r\n                user\r\n            );\r\n        }\r\n    }\r\n    if (newActiveAnnotation) {\r\n        dispatch(actions.changedActiveTextAnnotation(newActiveAnnotation));\r\n    }\r\n};\r\n\r\nconst extendSelectionRight = (\r\n    state: AppState,\r\n    dispatch: (action: actions.Action) => void\r\n) => {\r\n    const selectedWitness = reducers.getSelectedTextWitness(state);\r\n    const activeAnnotation = reducers.getActiveTextAnnotation(state);\r\n    let annotatedText = null;\r\n    if (selectedWitness) {\r\n        annotatedText = TextStore.getWitnessText(state, selectedWitness.id);\r\n    }\r\n    if (!selectedWitness || !activeAnnotation || !annotatedText) return;\r\n    // Don't support deletions yet\r\n    if (activeAnnotation.isDeletion) {\r\n        return;\r\n    }\r\n\r\n    let segments = annotatedText.segmentsForAnnotation(activeAnnotation);\r\n    let start =\r\n        typeof segments[0] == \"number\" ? segments[0] : segments[0].start;\r\n    let length = activeAnnotation.content.length;\r\n    let nextPos = start + length;\r\n    if (nextPos === undefined) {\r\n        console.warn(\"Can't get next segment after %o\", activeAnnotation);\r\n        return;\r\n    }\r\n    let existingAnnotations = annotatedText.annotationsForPosition(nextPos);\r\n\r\n    let nextAnnotation = null;\r\n    if (existingAnnotations.length > 0) {\r\n        nextAnnotation = existingAnnotations[0];\r\n    } else {\r\n        let segment = annotatedText.segmentedText.segmentAtPosition(nextPos);\r\n        if (segment) {\r\n            let baseAnnotation = annotatedText.getBaseAnnotation(\r\n                nextPos,\r\n                segment.length\r\n            );\r\n            let workingWitness = reducers.getWorkingWitness(\r\n                state,\r\n                selectedWitness.text.id\r\n            );\r\n            let user = reducers.getUser(state);\r\n            if (baseAnnotation && workingWitness && user && segment) {\r\n                nextAnnotation = new Annotation(\r\n                    WORKING_VERSION_ANNOTATION_ID,\r\n                    workingWitness,\r\n                    baseAnnotation.start,\r\n                    baseAnnotation.length,\r\n                    segment.text,\r\n                    ANNOTATION_TYPES.variant,\r\n                    selectedWitness,\r\n                    user\r\n                );\r\n            }\r\n        }\r\n    }\r\n    if (nextAnnotation) {\r\n        let newAnnotation = new Annotation(\r\n            WORKING_VERSION_ANNOTATION_ID,\r\n            nextAnnotation.witness,\r\n            activeAnnotation.start,\r\n            activeAnnotation.length + nextAnnotation.length,\r\n            activeAnnotation.content + nextAnnotation.content,\r\n            activeAnnotation.type,\r\n            activeAnnotation.creatorWitness,\r\n            activeAnnotation.creatorUser\r\n        );\r\n        dispatch(actions.changedActiveTextAnnotation(newAnnotation));\r\n    }\r\n};\r\n\r\nconst reduceSelectionLeft = (\r\n    state: AppState,\r\n    dispatch: (action: actions.Action) => void\r\n) => {\r\n    const selectedWitness = reducers.getSelectedTextWitness(state);\r\n    const activeAnnotation = reducers.getActiveTextAnnotation(state);\r\n    let annotatedText = null;\r\n    if (selectedWitness) {\r\n        annotatedText = TextStore.getWitnessText(state, selectedWitness.id);\r\n    }\r\n    if (!selectedWitness || !activeAnnotation || activeAnnotation.isSaved || !annotatedText) return;\r\n    // Don't support deletions yet\r\n    if (activeAnnotation.isDeletion) {\r\n        return;\r\n    }\r\n\r\n    let segments = annotatedText.segmentsForAnnotation(activeAnnotation);\r\n    // Last segment, can't reduce further\r\n    if (segments.length === 1) return;\r\n\r\n    segments.pop();\r\n    let content = segments.reduce((acc, current) => {\r\n        if (current instanceof TextSegment) {\r\n            acc += current.text;\r\n        }\r\n        return acc;\r\n    }, '');\r\n    let newAnnotation = new Annotation(\r\n        WORKING_VERSION_ANNOTATION_ID,\r\n        activeAnnotation.witness,\r\n        activeAnnotation.start,\r\n        content.length,\r\n        content,\r\n        activeAnnotation.type,\r\n        activeAnnotation.creatorWitness,\r\n        activeAnnotation.creatorUser\r\n    );\r\n    dispatch(actions.changedActiveTextAnnotation(newAnnotation));\r\n};\r\n\r\nconst shortcuts = {\r\n    Escape: closeAnnotationControls,\r\n    [\"shift-Enter\"]: addPageBreak,\r\n    [\"Enter\"]: addLineBreak,\r\n    [\"ArrowLeft\"]: selectPreviousSegment,\r\n    [\"ArrowRight\"]: selectNextSegment,\r\n    [\"shift-ArrowRight\"]: extendSelectionRight,\r\n    [\"shift-ArrowLeft\"]: reduceSelectionLeft\r\n};\r\n\r\nconst getShortcutKey = (e: SyntheticKeyboardEvent<*>) => {\r\n    let key = e.key;\r\n    if (e.shiftKey) {\r\n        key = \"shift-\" + key;\r\n    }\r\n    return key;\r\n};\r\n\r\nexport const handleKeyDown = (\r\n    e: SyntheticKeyboardEvent<*>,\r\n    state: AppState,\r\n    dispatch: (action: actions.Action) => void\r\n) => {\r\n    const key = getShortcutKey(e);\r\n    if (shortcuts.hasOwnProperty(key)) {\r\n        shortcuts[key](state, dispatch);\r\n    }\r\n};\r\n\r\nexport default shortcuts;\r\n","// @flow\r\nimport * as reducers from \"reducers\";\r\nimport type { AppState } from \"reducers\";\r\nimport AnnotatedText from \"lib/AnnotatedText\";\r\nimport Witness from \"lib/Witness\";\r\nimport Annotation, { ANNOTATION_TYPES } from \"lib/Annotation\";\r\nimport type { AnnotationUniqueId } from \"lib/Annotation\";\r\nimport type { AnnotationData, TextData } from \"api\";\r\nimport segmentTibetanText from \"lib/segmentTibetanText\";\r\nimport SegmentedText from \"lib/SegmentedText\";\r\nimport _ from \"lodash\";\r\n\r\nlet store: { [witnessId: number]: AnnotatedText } = {};\r\n\r\nexport const getWitnessText = (\r\n    state: AppState,\r\n    witnessId: number\r\n): AnnotatedText | null => {\r\n    let text: AnnotatedText | null = null;\r\n\r\n    if (witnessId) {\r\n        text = generateAnnotatedText(state, witnessId);\r\n        if (text) {\r\n            store[witnessId] = text;\r\n        }\r\n    }\r\n\r\n    return text;\r\n};\r\n\r\nexport const addTextAnnotation = (\r\n    state: AppState,\r\n    witnessId: number,\r\n    annotation: Annotation\r\n) => {\r\n    const text = getWitnessText(state, witnessId);\r\n    if (text) {\r\n        text.addAnnotation(annotation);\r\n    }\r\n    // If witnessId is present, assume that getWitnessAnnotations\r\n    // has already been called.\r\n    if (annotationStore.hasOwnProperty(witnessId)) {\r\n        if (\r\n            !annotationStore[witnessId].appliedAnnotations.hasOwnProperty(\r\n                annotation.uniqueId\r\n            )\r\n        ) {\r\n            annotationStore[witnessId].appliedAnnotations[annotation.uniqueId] =\r\n                annotation;\r\n        }\r\n        if (\r\n            !annotationStore[witnessId].allAnnotations.hasOwnProperty(\r\n                annotation.uniqueId\r\n            )\r\n        ) {\r\n            annotationStore[witnessId].allAnnotations[annotation.uniqueId] =\r\n                annotation;\r\n        }\r\n    }\r\n};\r\n\r\nexport const removeTextAnnotation = (\r\n    state: AppState,\r\n    witnessId: number,\r\n    annotationId: AnnotationUniqueId\r\n) => {\r\n    const text = getWitnessText(state, witnessId);\r\n    if (text) {\r\n        text.removeAnnotation(annotationId);\r\n    }\r\n    if (annotationStore.hasOwnProperty(witnessId)) {\r\n        if (\r\n            annotationStore[witnessId].appliedAnnotations.hasOwnProperty(\r\n                annotationId\r\n            )\r\n        ) {\r\n            delete annotationStore[witnessId].appliedAnnotations[annotationId];\r\n        }\r\n    }\r\n};\r\n\r\nexport const deleteTextAnnotation = (\r\n    state: AppState,\r\n    witnessId: number,\r\n    annotationId: AnnotationUniqueId\r\n) => {\r\n    const text = getWitnessText(state, witnessId);\r\n    if (text) {\r\n        text.removeAnnotation(annotationId);\r\n    }\r\n    if (annotationStore.hasOwnProperty(witnessId)) {\r\n        if (\r\n            annotationStore[witnessId].allAnnotations.hasOwnProperty(\r\n                annotationId\r\n            )\r\n        ) {\r\n            delete annotationStore[witnessId].allAnnotations[annotationId];\r\n        }\r\n        if (\r\n            annotationStore[witnessId].appliedAnnotations.hasOwnProperty(\r\n                annotationId\r\n            )\r\n        ) {\r\n            delete annotationStore[witnessId].appliedAnnotations[annotationId];\r\n        }\r\n    }\r\n};\r\n\r\nlet annotationStore: {\r\n    [witnessId: number]: {\r\n        appliedAnnotations: { [AnnotationUniqueId]: Annotation },\r\n        allAnnotations: { [AnnotationUniqueId]: Annotation },\r\n    },\r\n} = {};\r\n\r\nexport const getWitnessAnnotations = (\r\n    state: AppState,\r\n    witness: Witness,\r\n    workingWitness: Witness\r\n): [\r\n    { [AnnotationUniqueId]: Annotation },\r\n    { [AnnotationUniqueId]: Annotation }\r\n] => {\r\n    if (annotationStore.hasOwnProperty(witness.id)) {\r\n        return [\r\n            annotationStore[witness.id].appliedAnnotations,\r\n            annotationStore[witness.id].allAnnotations,\r\n        ];\r\n    }\r\n\r\n    const text = witness.text;\r\n\r\n    let workingAnnotationList = reducers.getAnnotationsForWitnessId(\r\n        state,\r\n        workingWitness.id\r\n    );\r\n\r\n    let appliedAnnotations = getActiveAnnotations(\r\n        state,\r\n        witness.id,\r\n        workingWitness.id\r\n    );\r\n\r\n    let removedDefaultAnnotations = null;\r\n    // Default annotations removed by the user.\r\n    // Usually these are available when viewing\r\n    // a non-working edition.\r\n    let nonActiveAnnotations = {};\r\n\r\n    if (witness.id !== workingWitness.id) {\r\n        // If we are not viewing the working version,\r\n        // get all the annotations created by the selected witness\r\n        // BUT NOT BY A USER to apply to the base text.\r\n        // User-created annotations need to be in appliedAnnotations.\r\n\r\n        removedDefaultAnnotations =\r\n            reducers.getRemovedDefaultAnnotationsForWitnessId(\r\n                state,\r\n                witness.id\r\n            );\r\n\r\n        let selectedWitnessAnnotations = {};\r\n\r\n        for (let key in workingAnnotationList) {\r\n            if (workingAnnotationList.hasOwnProperty(key)) {\r\n                let annotationData = workingAnnotationList[key];\r\n                if (\r\n                    annotationData.creator_witness === witness.id &&\r\n                    !removedDefaultAnnotations.hasOwnProperty(\r\n                        annotationData.unique_id\r\n                    )\r\n                ) {\r\n                    selectedWitnessAnnotations[annotationData.unique_id] =\r\n                        annotationData;\r\n                } else if (annotationData.creator_witness === witness.id) {\r\n                    nonActiveAnnotations[annotationData.unique_id] =\r\n                        annotationData;\r\n                }\r\n            }\r\n        }\r\n\r\n        let selectedWitnessAnnotationsList = annotationsMapFromData(\r\n            state,\r\n            selectedWitnessAnnotations\r\n        );\r\n\r\n        appliedAnnotations = {\r\n            ...selectedWitnessAnnotationsList,\r\n            ...appliedAnnotations,\r\n        };\r\n\r\n        workingAnnotationList = selectedWitnessAnnotations;\r\n    }\r\n\r\n    let annotations = annotationsMapFromData(state, workingAnnotationList);\r\n    nonActiveAnnotations = annotationsMapFromData(state, nonActiveAnnotations);\r\n    if (Object.keys(nonActiveAnnotations).length > 0) {\r\n        annotations = {\r\n            ...annotations,\r\n            ...nonActiveAnnotations,\r\n        };\r\n    }\r\n\r\n    annotations = {\r\n        ...appliedAnnotations,\r\n        ...annotations,\r\n    };\r\n\r\n    annotations = _.pickBy(\r\n        annotations,\r\n        (annotation: Annotation, key: AnnotationUniqueId) => {\r\n            return !(\r\n                witness &&\r\n                annotation.type === ANNOTATION_TYPES.lineBreak &&\r\n                annotation.creatorWitness.id !== witness.id\r\n            );\r\n        }\r\n    );\r\n\r\n    // Only cache if annotations have been loaded\r\n    if (\r\n        reducers.hasLoadedWitnessAnnotations2(state, witness.id) &&\r\n        reducers.hasLoadedWitnessAppliedAnnotations(state, witness.id)\r\n    ) {\r\n        annotationStore[witness.id] = {\r\n            appliedAnnotations: appliedAnnotations,\r\n            allAnnotations: annotations,\r\n        };\r\n    }\r\n\r\n    return [appliedAnnotations, annotations];\r\n};\r\n\r\nconst generateAnnotatedText = (\r\n    state: AppState,\r\n    witnessId: number\r\n): AnnotatedText | null => {\r\n    const witness = reducers.getWitness2(state, witnessId);\r\n    if (!witness) {\r\n        console.warn(\"no witness\");\r\n        return null;\r\n    }\r\n    const text = witness.text;\r\n    const workingWitness = reducers.getWorkingWitness2(state, text.id);\r\n    const baseWitness = reducers.getBaseWitness2(state, text.id);\r\n\r\n    if (!workingWitness || !baseWitness) {\r\n        return null;\r\n    }\r\n\r\n    let [appliedAnnotations, availableAnnotations] = getWitnessAnnotations(\r\n        state,\r\n        witness,\r\n        workingWitness\r\n    );\r\n    let segmentedWorkingWitness = getSegmentedWitness(workingWitness);\r\n    let annotatedText = new AnnotatedText(\r\n        segmentedWorkingWitness,\r\n        (Object.values(appliedAnnotations): any),\r\n        (text) => segmentTibetanText(text).segments,\r\n        workingWitness,\r\n        witness\r\n    );\r\n\r\n    return annotatedText;\r\n};\r\n\r\nconst getActiveAnnotations = (\r\n    state: AppState,\r\n    witnessId,\r\n    baseWitnessId\r\n): { [AnnotationUniqueId]: Annotation } => {\r\n    const loadedAppliedAnnotations =\r\n        reducers.hasLoadedWitnessAppliedAnnotations(state, witnessId);\r\n    if (!loadedAppliedAnnotations) {\r\n        return {};\r\n    }\r\n    const activeAnnotationList = reducers.getActiveAnnotationsForWitnessId(\r\n        state,\r\n        witnessId\r\n    );\r\n    if (!activeAnnotationList) {\r\n        return {};\r\n    }\r\n\r\n    let activeAnnotationDataList = {};\r\n    for (let activeAnnotationId in activeAnnotationList) {\r\n        if (activeAnnotationList.hasOwnProperty(activeAnnotationId)) {\r\n            let activeAnnotationData = reducers.getAnnotationData(\r\n                state,\r\n                baseWitnessId,\r\n                activeAnnotationId\r\n            );\r\n            if (activeAnnotationData) {\r\n                activeAnnotationDataList[activeAnnotationData.unique_id] =\r\n                    activeAnnotationData;\r\n            }\r\n        }\r\n    }\r\n\r\n    return annotationsMapFromData(state, activeAnnotationDataList);\r\n};\r\n\r\nconst annotationsMapFromData = (\r\n    state: AppState,\r\n    annotationList: { [AnnotationUniqueId]: AnnotationData }\r\n): { [AnnotationUniqueId]: Annotation } => {\r\n    let annotations = {};\r\n    for (let key in annotationList) {\r\n        if (annotationList.hasOwnProperty(key)) {\r\n            let annotationData = annotationList[key];\r\n            let annotation = reducers.annotationFromData(state, annotationData);\r\n            if (annotation) {\r\n                annotations[key] = annotation;\r\n            }\r\n        }\r\n    }\r\n    return annotations;\r\n};\r\n\r\n// TODO: clear cache when changing texts\r\nlet _segmentedWitnesses: { [number]: SegmentedText } = {};\r\nfunction getSegmentedWitness(witness: Witness): SegmentedText {\r\n    if (!_segmentedWitnesses[witness.id]) {\r\n        _segmentedWitnesses[witness.id] = segmentTibetanText(\r\n            witness.content || \"\"\r\n        );\r\n    }\r\n\r\n    return _segmentedWitnesses[witness.id];\r\n}\r\n","var map = {\n\t\".\": \"./node_modules/react-universal-component/dist/requireById/index.js\",\n\t\"./\": \"./node_modules/react-universal-component/dist/requireById/index.js\",\n\t\"./index\": \"./node_modules/react-universal-component/dist/requireById/index.js\",\n\t\"./index.js\": \"./node_modules/react-universal-component/dist/requireById/index.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/react-universal-component/dist/requireById sync recursive ^.*$\";"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAAA;AACA;AAIA;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;;;;;;;;;;;ACdA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAJA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAKA;AAGA;AACA;AAAA;AAGA;AAHA;AAIA;AAJA;AAfA;AACA;AAoBA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AANA;AASA;AAEA;AADA;AAIA;AACA;AACA;AAAA;AAAA;AARA;AAWA;AACA;AACA;AAHA;AAMA;AAEA;AADA;AAIA;AACA;AACA;AAAA;AAAA;AARA;AAYA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AAJA;AAMA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;AALA;AADA;AAUA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AA5GA;AACA;AAuHA;;;;;;;;;;;;AC7IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AADA;AAGA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AADA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAvCA;AACA;AAsDA;AACA;AACA;AACA;AAFA;AAIA;AACA;AALA;AAOA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAdA;AAgBA;AACA;AAjBA;AAmBA;AACA;AACA;AArBA;AADA;AACA;AAyBA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAZA;AAeA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAZA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AACA;AAWA;AACA;AAEA;AACA;AADA;AAHA;AACA;AAQA;AAMA;;;;;;;;;;;;AC/FA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAAA;AAFA;AAGA;AACA;;;AAMA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAjBA;AACA;AACA;AAAA;AAAA;AACA;;;;AATA;AACA;AAyBA;;;;;;;;;;;AC5BA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AAUA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AADA;AAIA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AANA;AASA;AAAA;AACA;AAAA;AAgBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AANA;AAOA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AATA;AAkBA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAJA;AADA;AAnBA;AALA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAYA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AALA;AAWA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAaA;;;;;;;;;;;AC9DA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AAEA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAFA;AACA;AAIA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AADA;AAMA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AA3BA;AA8BA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAPA;AASA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAIA;AAAA;AAEA;AAEA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AAJA;AADA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAPA;AAWA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AARA;AAWA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AACA;AACA;AADA;AAFA;AAOA;AACA;AACA;AAFA;AAKA;AACA;AAPA;AAWA;AACA;AACA;AACA;AACA;AACA;AANA;AAhCA;AA2DA;AACA;AACA;;;;;;;;;;;;AC1MA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAJA;AACA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AALA;AAOA;AAPA;AADA;AACA;AAWA;AAKA;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AADA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AACA;AACA;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AAAA;AAAA;AADA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;AAFA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AATA;AAaA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAOA;AAAA;AAAA;AAGA;AAAA;AAAA;AAMA;AACA;AACA;;;;;;;;;;;;AC3EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AADA;AAHA;AACA;AAOA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AADA;AAJA;AACA;AAQA;AAKA;;;;;;;;;;;AC3BA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AAQA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AAFA;AAHA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AASA;AACA;AACA;AACA;AAHA;AADA;AAQA;AACA;AAAA;AAEA;AAKA;AAGA;AACA;AACA;AAAA;AAXA;AAYA;AAZA;AAHA;AAuBA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAIA;AACA;AAFA;AAUA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAJA;AACA;AAUA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAFA;AAJA;AACA;AAUA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrJA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AAIA;AAEA;AACA;AAAA;AAAA;AACA;AADA;AADA;AACA;AAEA;AACA;AACA;AACA;AADA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AApBA;AACA;AAqBA;AACA;AACA;AACA;AACA;AADA;AACA;AAIA;AACA;AACA;AAVA;AACA;AAWA;AACA;AADA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAXA;AAaA;AACA;AAAA;AAAA;AAAA;AAdA;AAeA;AAAA;AAAA;AAAA;AAfA;AAgBA;AAAA;AAhBA;AAiBA;AAAA;AAjBA;AAkBA;AAlBA;AAqBA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAVA;AACA;AAsBA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAMA;AACA;AADA;AAQA;AACA;AAfA;AACA;AAgBA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAzBA;AACA;AAmCA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;ACnKA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AANA;AACA;AAQA;AACA;AADA;AACA;AAEA;AACA;AAAA;AAAA;AADA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AASA;AAVA;AAYA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AALA;AAWA;AACA;AAAA;AAAA;AAAA;AAFA;AAQA;AACA;AACA;AAFA;AAIA;AALA;AAQA;AACA;AACA;AADA;AAGA;AACA;AACA;AAPA;AAUA;AAAA;AAAA;AAAA;AACA;AAAA;AAFA;AAGA;AAHA;AAQA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAHA;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAHA;AAUA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAEA;AACA;AADA;AAHA;AACA;AAMA;AACA;AAOA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AANA;AAaA;AAAA;AAIA;;;;;;;;;;;AC/KA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AACA;AAMA;AACA;AADA;AACA;AAGA;;;;;;;;;;;;ACxDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAMA;AACA;AACA;;;;;;;;;;;ACbA;AACA;;;;;;;;;;;ACDA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAOA;AACA;AACA;AADA;AACA;AAGA;AAEA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAHA;AADA;AAQA;AACA;AAAA;AAAA;AAFA;AASA;AAAA;AAGA;AACA;AAAA;AAAA;AAFA;AAOA;AAAA;AAGA;AACA;AAAA;AAAA;AAFA;AAOA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AACA;AAUA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAKA;AACA;AAXA;AAHA;AACA;AAiBA;;;;;;;;;;;;ACnGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AACA;AAOA;;;;;;;;;;;AChBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AA8CA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;;;;;AAKA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AALA;AAMA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;AAAA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAPA;AASA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AANA;AAQA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AACA;AAUA;AAEA;AACA;AAAA;AAfA;AAiBA;AACA;AACA;AACA;AAAA;AAOA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAQA;AACA;AAAA;AAOA;AAxCA;AA0CA;AACA;AACA;;;AAEA;AAWA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;;;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAKA;AAdA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAUA;AACA;AAXA;AAeA;AACA;AACA;AAjBA;AAoBA;AAtBA;AAwBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAXA;AAaA;AACA;AACA;AAGA;AAlBA;AAoBA;AApBA;AACA;AAsBA;AACA;AAhEA;AACA;AAiEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAHA;AAFA;AAYA;AApFA;AAsFA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAMA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AALA;AAOA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AARA;AAYA;AAnDA;AACA;AACA;AAqDA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAPA;AAeA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAHA;AAWA;AACA;AACA;AACA;AACA;AAAA;AAKA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AANA;AAiBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAHA;AAcA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAeA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAHA;AAMA;AANA;AAUA;AAGA;AAGA;AAEA;AADA;AAIA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AAlBA;AAwBA;AACA;AAAA;AAAA;AAFA;AAMA;;;;AAtmBA;AACA;AAwmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtrBA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AASA;AAMA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AADA;AAGA;AAXA;AAaA;AACA;AAEA;AACA;AADA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AADA;AAGA;AACA;AAAA;AAIA;AAJA;AAMA;AACA;AA3CA;AACA;AACA;AAAA;AAFA;AACA;AACA;AA4CA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AAAA;AACA;AAVA;AAYA;AACA;AAAA;AA/EA;AACA;AAiFA;AAMA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AApBA;AAsBA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAKA;AA5FA;AACA;AA8FA;AAQA;AACA;AAMA;AACA;AADA;AAGA;AACA;AAnBA;AACA;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AASA;AAMA;AACA;AADA;AAGA;AACA;AAKA;AAOA;AACA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AAIA;AAKA;AACA;AAhFA;AACA;AACA;AAkFA;AACA;AACA;AACA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AACA;AAbA;AAeA;AACA;AACA;AACA;AADA;AAIA;AAQA;AACA;AADA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AAGA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAtKA;AACA;AA0LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAUA;AAIA;AAEA;AACA;AACA;AAKA;AACA;AADA;AAKA;AACA;AACA;AACA;AAlCA;AAJA;AACA;AAyCA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAYA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAKA;AACA;AAGA;AACA;AAAA;AAnDA;AACA;AAqDA;AAGA;AACA;AACA;AAAA;AACA;AAEA;AACA;AATA;AAWA;AACA;AACA;AAAA;AACA;AADA;AAGA;AAGA;AAFA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AACA;AAMA;AAhBA;AAkBA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAMA;AAxBA;AA0BA;AAIA;AAJA;AAaA;AAMA;AACA;AACA;AAIA;AAMA;AACA;AACA;AACA;AACA;AAIA;AACA;AAnHA;AAqHA;AACA;AAMA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AA5IA;AAgJA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AA5JA;AA8JA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AAIA;AATA;AAWA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3LA;AA6LA;AACA;AACA;AAWA;AA1MA;AA8MA;AACA;AAWA;AA1NA;AA8NA;AACA;AACA;AACA;AACA;AAWA;AA7OA;AAiPA;AAKA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AAMA;AACA;AArQA;AAtHA;AACA;AA8XA;AAMA;;;;;;;;;;;AC7zBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AACA;AAAA;;;AACA;AACA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AATA;AAWA;AACA;AACA;AACA;AACA;AAfA;AAkBA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAHA;AAUA;AACA;AACA;AACA;AACA;AACA;AAfA;AAkBA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAHA;AAUA;AACA;AACA;AACA;AACA;AACA;AAfA;AAmBA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AACA;AAbA;AAwBA;;;;AAhIA;AACA;AAkIA;;;;;;;;;;;ACtJA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AAQA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AACA;AAEA;AADA;AAIA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;;;;AArBA;AACA;AAuBA;;;;;;;;;;;ACrCA;AACA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAFA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAKA;AAAA;AAKA;AAAA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AAFA;AADA;AASA;AAAA;AACA;AAAA;AA9EA;AACA;AAsFA;;;;;;;;;;;;AC5GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAKA;AAAA;AAGA;AACA;AAFA;AAIA;AAAA;AA5CA;AACA;AAmDA;;;;;;;;;;;;ACjEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AATA;AAcA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAHA;AAtBA;AA6BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAHA;AAaA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AAEA;;;;;;;;;;;ACtEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AADA;AAFA;AAMA;AAAA;AACA;AAAA;AAEA;AAAA;AAIA;;;;AAjBA;AACA;;;;;;;;;;;;ACdA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAQA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAJA;AASA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;AAvCA;AACA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAAA;AAFA;AAUA;AAVA;AAaA;AACA;AACA;AAHA;AAtBA;AACA;AA+BA;AAEA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAFA;AAgBA;AACA;AACA;;;;;;;;;;;AC1EA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AADA;AACA;AAEA;AACA;AAAA;AAAA;AADA;AACA;AAEA;AACA;AACA;AAEA;AACA;AADA;AAGA;AAPA;AACA;AASA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AAFA;AAOA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAGA;AAAA;AADA;AAEA;AAFA;AAKA;AACA;AAAA;AAAA;AAFA;AAVA;;;;;;;;;;;;AChFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;;;;;;;;;;;AChBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAKA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AAKA;;;;AArCA;AACA;;;;;;;;;;;;ACbA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAWA;;;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AADA;AAHA;AAMA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAEA;AACA;AACA;AADA;AADA;AAKA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAFA;AAKA;AACA;AANA;AAQA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AAGA;AACA;AAFA;AAIA;AAAA;AAKA;;;;AAzDA;AACA;;;;;;;;;;;;AClBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AAiBA;;;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AADA;AAHA;AAMA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAKA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAEA;AACA;AACA;AADA;AADA;AAKA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAFA;AAKA;AACA;AANA;AAQA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AAGA;AACA;AAFA;AAIA;AAAA;AAKA;;;;AAhEA;AACA;;;;;;;;;;;;ACvBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAKA;AAEA;AACA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AADA;AAFA;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAMA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAHA;AAKA;AAAA;AAGA;AAAA;AAEA;AAAA;AAGA;AAAA;AAGA;;;;AA9DA;AACA;;;;;;;;;;;;ACnBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAcA;;;;AAlBA;AACA;;;;;;;;;;;;ACTA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAbA;AAeA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AALA;AAWA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAfA;AA7CA;AACA;AAwEA;;;;;;;;;;;ACxFA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAiDA;;;AAiBA;AACA;AACA;AA0BA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AA+BA;AACA;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAXA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAGA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AAAA;AACA;AACA;;;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAJA;AAMA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AACA;AADA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAdA;AACA;AACA;AAgBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AANA;AAQA;AACA;AACA;AACA;AA3BA;AA6BA;AACA;AACA;AAAA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAXA;AAeA;AACA;AAAA;AACA;AACA;AACA;AACA;AARA;AAYA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AANA;AAcA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAEA;AAEA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAQA;AACA;AApBA;AAwBA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AAHA;AAQA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAHA;AAJA;AAUA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AApBA;AAsBA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AAAA;AACA;AAfA;AAiBA;AADA;AAUA;AARA;AAUA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AADA;AAFA;AAMA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;AAEA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AA+BA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAJA;AAQA;AACA;AAAA;AAhEA;AACA;AACA;AAiEA;AACA;AACA;AArEA;AACA;AACA;AAuEA;AACA;AACA;AA3EA;AACA;AACA;AA6EA;AAMA;AACA;AAAA;AACA;AACA;AADA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AA/FA;AAmGA;AACA;AACA;AAAA;AAMA;AACA;AAAA;AACA;AADA;AAKA;AAEA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAMA;AACA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAIA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAFA;AAGA;AAHA;AAKA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAHA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAhBA;AAFA;AA4BA;;;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA3BA;AACA;AACA;AA6BA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAIA;AACA;AARA;AAUA;AACA;AADA;AAMA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEA;AAUA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAHA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAGA;AACA;AAFA;AAIA;AAAA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AAEA;AAMA;AACA;AA7BA;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAiBA;;;;AA5jCA;AACA;;;;;;;;;;;;;AC/FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAFA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AALA;AACA;AAYA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AAKA;AAVA;AAYA;AACA;AACA;AACA;AAfA;AARA;AACA;AA0BA;;;;;;;;;;;ACnFA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AARA;AAUA;AACA;AAFA;AATA;AAeA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAUA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AADA;AAHA;AARA;AAAA;AACA;AAiBA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAYA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAAA;AAQA;AACA;AAAA;AAAA;AAFA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AAOA;AAAA;AAEA;AACA;AAFA;AADA;AATA;AAFA;AAyBA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AADA;AADA;AACA;AAMA;;;;;;;;;;;AC3IA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAgCA;AACA;AACA;AACA;AACA;AAEA;;;;;AAMA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAVA;AAWA;AACA;;;AAAA;AACA;AACA;AAEA;AAFA;AADA;AAMA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAIA;AAKA;AAMA;;;AAEA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AAEA;AACA;AAnBA;AAqBA;AACA;AACA;AACA;AAHA;AAQA;AAJA;AASA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAnJA;AAuJA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAIA;AAIA;AACA;AACA;AAAA;AAIA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AADA;AAGA;AACA;AAbA;AAeA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AASA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAUA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;;;AACA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAMA;AAJA;AAMA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAHA;AAMA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAVA;AAcA;;;;AAlfA;AACA;AAofA;;;;;;;;;;;AClkBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AAmDA;AACA;AACA;;;;;AAIA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAJA;AAKA;AACA;;;AACA;AACA;AAEA;;;AACA;AACA;AAIA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AAAA;AALA;AAOA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3CA;AA8CA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AAKA;AACA;AAXA;AAeA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AADA;AAQA;AADA;AAUA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AAJA;AADA;AAeA;;;;AA7JA;AACA;AA+JA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9OA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAOA;AACA;AAKA;AA+BA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAKA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AA5BA;AA8BA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AATA;AAYA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAjEA;AACA;AAWA;AAAA;AACA;AADA;AAsDA;AACA;AACA;AACA;AACA;AACA;AACA;AA3EA;AACA;AA6EA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AACA;AADA;AACA;AAoBA;AAAA;AACA;AAKA;AACA;AA5BA;AAmCA;AACA;AACA;AADA;AACA;AACA;AACA;AAIA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AA5JA;AACA;AAmMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AAAA;AAGA;AAHA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AARA;AAaA;AACA;AACA;AACA;AACA;AA7CA;AACA;AA+CA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AAAA;AACA;AADA;AAGA;AADA;AAGA;AACA;AACA;AACA;AAVA;AACA;AAYA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AANA;AAAA;AACA;AADA;AAMA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AACA;AAqBA;AAEA;AAFA;AACA;AAIA;AAGA;AAHA;AACA;AAKA;AACA;AAKA;AACA;AAIA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AADA;AAGA;AAEA;AAFA;AAIA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AAZA;AAuBA;AACA;AACA;AAAA;AAjFA;AAmFA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAVA;AAYA;AAMA;AACA;AAPA;AASA;AACA;AACA;AAGA;AACA;AAKA;AACA;AACA;AAnIA;AAqIA;AAAA;AArIA;AAuIA;AAAA;AAvIA;AAyIA;AACA;AA1IA;AA4IA;AACA;AA7IA;AA+IA;AACA;AAhJA;AAkJA;AACA;AAnJA;AAqJA;AACA;AAEA;AACA;AAzJA;AAjFA;AACA;AA6OA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAZA;AAgBA;AACA;AACA;AACA;AADA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AA7BA;AACA;AA+BA;AACA;AAIA;AACA;AAQA;AAdA;AACA;AAgBA;AAMA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AACA;AADA;AACA;AAIA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAvCA;AACA;AACA;AAyCA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AArDA;AACA;AA2DA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAZA;AACA;AAcA;AAMA;;;;;;;;;;;AC9sBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AAOA;AACA;AAEA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AAwBA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AAEA;AADA;AAIA;AAEA;AACA;AACA;AAJA;AAQA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAJA;AAOA;AACA;AACA;AACA;AAHA;AAMA;AACA;AADA;AAMA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;AAJA;AAWA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAHA;AADA;AASA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAPA;AAQA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAdA;AAkBA;AApBA;AAsBA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAFA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAbA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AADA;AAkBA;AAGA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAUA;AAAA;AASA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/OA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAFA;AAOA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AADA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AA9CA;AACA;AA2DA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAKA;AACA;AAEA;AAGA;AACA;AACA;AALA;AASA;AACA;AAVA;AAYA;AACA;AAbA;AAeA;AACA;AAGA;AAnBA;AAqBA;AArBA;AA2BA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAjCA;AAoCA;AApCA;AAuCA;AAvCA;AAgDA;AACA;AADA;AAQA;AACA;AAzDA;AAVA;AACA;AAuEA;AAMA;;;;;;;;;;;AClJA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AAOA;AAMA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAVA;AACA;AAYA;AACA;AAAA;AAAA;AACA;AAFA;AACA;AAGA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAXA;AAaA;AAdA;AAgBA;AAAA;AAlCA;AA4CA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAWA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAFA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAQA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAiBA;AACA;AACA;;;;;;;;;;;;ACjKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AALA;AACA;AAUA;AACA;AACA;AACA;AACA;AAHA;AADA;AACA;AAOA;AAKA;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AACA;AACA;AACA;AAQA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAJA;AASA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;AAvCA;AACA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAGA;AACA;AAAA;AAAA;AAFA;AAUA;AACA;AACA;AAHA;AArBA;AACA;AAgCA;AACA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAFA;AAgBA;AACA;AACA;;;;;;;;;;;ACzEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AAEA;AACA;AASA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AADA;AACA;AAEA;AACA;AAAA;AAAA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AANA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AAFA;AAMA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAGA;AAAA;AADA;AAEA;AAFA;AAKA;AACA;AAAA;AAAA;AAFA;AAVA;;;;;;;;;;;;AC5EA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AChBA;AAEA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAbA;AAeA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AALA;AAUA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAfA;AAhDA;AACA;AA2EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1FA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AA+BA;;;AAiBA;AACA;AACA;AAaA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAwBA;AACA;;;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAbA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AAAA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAEA;AAGA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAQA;AACA;AApBA;AAwBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAHA;AAJA;AAUA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AApBA;AAsBA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AAAA;AACA;AAfA;AAiBA;AADA;AAUA;AARA;AAUA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAEA;AAEA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAEA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AADA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;;;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAFA;AAMA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AADA;AAJA;AAQA;AACA;AAAA;AAzBA;AACA;AACA;AA4BA;AAMA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAhDA;AAmDA;AACA;AACA;AADA;AAMA;AACA;AAAA;AACA;AADA;AAKA;AACA;AAAA;AACA;AAEA;AApEA;AAwEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAMA;AACA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;;;AACA;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AACA;AADA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAdA;AACA;AACA;AAgBA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AANA;AAQA;AACA;AACA;AACA;AA3BA;AA6BA;AACA;AACA;AAAA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAXA;AAeA;AACA;AAAA;AACA;AACA;AACA;AACA;AARA;AAYA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AANA;AAcA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAFA;AAGA;AACA;AACA;AADA;AAJA;AAQA;AAAA;AACA;AAAA;AAEA;AAAA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAfA;AAFA;AA2BA;;;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA3BA;AACA;AACA;AA6BA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAIA;AACA;AARA;AAUA;AACA;AADA;AAMA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEA;AAUA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AAEA;AAFA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAPA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAuBA;;;;AAx4BA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AARA;AAUA;AACA;AAFA;AATA;AAeA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAUA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AADA;AAHA;AARA;AAAA;AACA;AAiBA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAUA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAAA;AAQA;AACA;AAAA;AAAA;AAFA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AAFA;AAFA;AAmBA;AACA;AACA;;;;;;;;;;;;AC/GA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AADA;AADA;AA0gBA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnhBA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AADA;AAGA;AACA;AACA;AARA;AASA;AACA;;;AACA;AACA;AACA;AAEA;AAFA;AADA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AALA;AAOA;AAvBA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AADA;AAGA;AACA;AAbA;AAeA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAVA;AAYA;AACA;AACA;AApGA;AAuGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAUA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AADA;AAMA;AAJA;AAMA;AACA;AACA;AACA;AAAA;AACA;;;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAHA;AAOA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAHA;AAIA;AACA;AACA;AAFA;AAJA;AAWA;;;;AA/SA;AACA;AAgTA;;;;;;;;;;;;AC5XA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAHA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AA2BA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAYA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;AADA;AASA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AAJA;AADA;AAcA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1IA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAKA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AA5BA;AA8BA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AATA;AAYA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAjEA;AACA;AAWA;AAAA;AACA;AADA;AAsDA;AACA;AACA;AACA;AACA;AACA;AACA;AA3EA;AACA;AA6EA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AA3CA;AACA;AAgEA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AADA;AACA;AAEA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AAAA;AACA;AADA;AAGA;AADA;AAGA;AACA;AACA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AAAA;AAGA;AAHA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AARA;AAaA;AACA;AA1CA;AACA;AADA;AACA;AA+CA;AAGA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AANA;AAAA;AACA;AADA;AAMA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AACA;AAqBA;AAEA;AAFA;AACA;AAIA;AAGA;AAHA;AACA;AAKA;AACA;AAKA;AACA;AAIA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AADA;AAGA;AAEA;AAFA;AAIA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AAZA;AAuBA;AA5EA;AACA;AARA;AAuFA;AAAA;AAvFA;AAyFA;AACA;AA1FA;AA4FA;AACA;AA7FA;AA+FA;AACA;AAhGA;AAkGA;AACA;AAnGA;AAqGA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AADA;AAGA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AApBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAlJA;AA/EA;AACA;AAoOA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAaA;AACA;AAQA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AAEA;AADA;AAIA;AAEA;AACA;AACA;AAJA;AASA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AALA;AAJA;AAYA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAHA;AADA;AASA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAPA;AAQA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAdA;AAkBA;AArBA;AAuBA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAFA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAbA;AAgBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AADA;AAmBA;AAGA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAUA;AAAA;AASA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5NA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AALA;AAOA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AA5BA;AACA;AAyCA;AACA;AACA;AADA;AACA;AAKA;AACA;AAEA;AAGA;AACA;AACA;AALA;AASA;AACA;AAVA;AAYA;AACA;AAbA;AAeA;AACA;AAhBA;AAkBA;AACA;AAMA;AACA;AADA;AAQA;AACA;AACA;AAnCA;AAVA;AACA;AAgDA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9GA;AACA;AAMA;AACA;AACA;AAEA;AAQA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAVA;AAaA;AAEA;AACA;AAFA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAFA;AACA;AAGA;AACA;AACA;AAFA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAXA;AAaA;AAdA;AAgBA;AAAA;AAlCA;AA4CA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAXA;AAaA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAFA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAQA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAiBA;AACA;AACA;;;;;;;;;;;;AC9JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AApBA;AACA;AA8BA;AACA;AACA;AACA;AACA;AAHA;AADA;AACA;AAOA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AAQA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAJA;AASA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;AAvCA;AACA;;;;;;;;;;;;ACbA;AACA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAHA;AAOA;AAEA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AAMA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;AATA;AACA;;;;;;;;;;;;ACVA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAsBA;AACA;AACA;;;;;AAUA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAQA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AAUA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAUA;AAAA;AAAA;AAAA;AACA;AAXA;AAcA;AACA;AACA;AAHA;AA1BA;AAkCA;AACA;AACA;AACA;AADA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AASA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAMA;;;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAGA;AAAA;AAAA;AAEA;AAAA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAFA;AAeA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAIA;;;;AA3LA;AACA;AA6LA;;;;;;;;;;;ACvOA;AACA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AAFA;AARA;AACA;AAgBA;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AACA;AAQA;AAIA;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AAPA;AACA;AASA;AAEA;AAAA;AAAA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AAPA;AAUA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AA/BA;AACA;AA4CA;;;;;;;;;;;;ACjEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AASA;AAKA;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAaA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AANA;AACA;AAgBA;;;;;;;;;;;ACnCA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAJA;AACA;AAMA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAeA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AAFA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAfA;AAwBA;;;;;;;;;;;;AC7EA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAQA;AACA;AACA;AAEA;AAAA;AALA;AAsBA;AACA;AACA;;;;;;;;;;;AC5CA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAGA;AAAA;AAGA;AAAA;AAKA;;;;AA3CA;AACA;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAGA;AACA;AAAA;AAFA;AAOA;AACA;AARA;AAUA;AAAA;AAAA;AA5BA;AACA;AAmCA;;;;;;;;;;;AC7CA;AACA;;;;;;;;;;;ACDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AALA;AACA;AASA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AArBA;AACA;AA2BA;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAIA;AAdA;AAgBA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AA4BA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;;;;;;;;;;;;AC/EA;AAAA;AACA;AACA;AACA;AAAA;AA0DA;AA1DA;AA4DA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AAtEA;AACA;AADA;AA0EA;AA1EA;AACA;AADA;AA8EA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/FA;AACA;AAAA;AAEA;AAMA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAyCA;AACA;AACA;AAAA;;;;;;;;;;;ACtGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AACA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAGA;AAFA;AAFA;AAQA;AAXA;AACA;AACA;AAYA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;AAEA;AAAA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAPA;AAiBA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AACA;AAMA;;;;;;;;;;;;ACrEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AADA;AAGA;AAEA;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AApBA;AACA;AA6BA;AACA;AACA;AACA;AAFA;AAIA;AAMA;AACA;AADA;AAQA;AACA;AAnBA;AAqBA;AACA;AACA;AAvBA;AADA;AACA;AA2BA;AAKA;;;;;;;;;;;AC1EA;AACA;;;;;;;;;;;;ACDA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AAGA;AAOA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;ACvGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAJA;AAMA;AADA;AAGA;AADA;AAGA;AACA;AADA;AAGA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACtCA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AARA;AACA;AAUA;AAIA;AAJA;AACA;AAMA;AAIA;AAJA;AACA;AAMA;AAKA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AADA;AAKA;AACA;AACA;AAAA;AACA;AACA;AApDA;AACA;AAsDA;AAIA;AAJA;AACA;AAiBA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAdA;AACA;AAgBA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AADA;AAIA;AATA;AAWA;AACA;AAEA;AACA;AAzBA;AA4BA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAIA;AAIA;AACA;AAAA;AACA;AAUA;AACA;AACA;AACA;AAAA;AACA;AACA;AA7EA;AACA;AA+EA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAQA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAIA;AA9BA;AAkCA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAKA;AAIA;AAIA;AACA;AAAA;AACA;AAUA;AACA;AACA;AAAA;AACA;AACA;AArFA;AACA;AAuFA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAIA;AAIA;AACA;AAAA;AACA;AAUA;AACA;AACA;AACA;AAAA;AACA;AAUA;AACA;AApEA;AACA;AAsEA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAJA;AAMA;AAUA;AArCA;AACA;AAuCA;AACA;AADA;AACA;AASA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AALA;AACA;AAOA;AAKA;AACA;AAAA;AACA;AACA;AARA;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpbA;AAEA;AACA;AACA;AAGA;AACA;AAGA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAbA;AAgBA;AAKA;AACA;AAAA;AACA;AAHA;AAMA;AACA;AACA;AADA;AACA;AAKA;AAEA;AACA;AAAA;AAKA;AAEA;AACA;AA5BA;AA+BA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AAjBA;AAoBA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAxBA;AA2BA;AAOA;AAQA;AACA;AAIA;AACA;AACA;AAEA;AAKA;AAMA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAMA;AANA;AASA;AAEA;AACA;AACA;AACA;AACA;AAKA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AAKA;AAGA;AAHA;AACA;AAWA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAnHA;AACA;AAqHA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAGA;AAHA;AAQA;AA/BA;AACA;AAiCA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAjCA;AACA;AAmCA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAdA;AACA;AACA;AAgBA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;;;;;;;AC1UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}