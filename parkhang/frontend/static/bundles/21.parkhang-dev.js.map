{"version":3,"file":"21.parkhang-dev.js","sources":["webpack://parkhang/./app/components/TextList/HighlightedString.js","webpack://parkhang/./app/components/TextList/LoadMore.css","webpack://parkhang/./app/components/TextList/LoadMore.js","webpack://parkhang/./app/components/TextList/ResultCount.js","webpack://parkhang/./app/components/TextList/TextList.css","webpack://parkhang/./app/components/TextList/TextList.js"],"sourcesContent":["// @flow\r\nimport * as React from \"react\";\r\nimport GraphemeSplitter from \"grapheme-splitter\";\r\nimport reactStringReplace from \"react-string-replace\";\r\n\r\ntype Props = {\r\n    string: string,\r\n    highlightClass: string,\r\n    stringClass?: string,\r\n    searchTerm?: string\r\n};\r\n\r\nexport default class HighlightedString extends React.Component<Props> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const string = this.props.string;\r\n        let nameHtml = string;\r\n        let stringClass = this.props.stringClass || \"\";\r\n        if (this.props.searchTerm) {\r\n            const searchTerm = this.props.searchTerm;\r\n            const splitter = new GraphemeSplitter();\r\n            const graphemes = splitter.splitGraphemes(string);\r\n            const start = string.indexOf(searchTerm);\r\n            const end = start + searchTerm.length;\r\n            let position = 0;\r\n            let foundGraphemes = \"\";\r\n            if (start > -1) {\r\n                for (let i = 0; i < graphemes.length; i++) {\r\n                    let grapheme = graphemes[i];\r\n                    if (position >= start && position < end) {\r\n                        foundGraphemes += grapheme;\r\n                    }\r\n                    position += grapheme.length;\r\n                }\r\n            }\r\n            if (foundGraphemes.length > 0) {\r\n                nameHtml = reactStringReplace(\r\n                    string,\r\n                    foundGraphemes,\r\n                    (match, i) => (\r\n                        <span className={this.props.highlightClass} key={`highlight-${i}`}>\r\n                            {match}\r\n                        </span>\r\n                    )\r\n                );\r\n            }\r\n        }\r\n        return <span className={stringClass}>{nameHtml}</span>;\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LoadMore---container\"};","// @flow\r\nimport React from \"react\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport styles from \"./LoadMore.css\";\r\n\r\ntype Props = {\r\n    loading?: boolean\r\n};\r\n\r\nexport default function LoadMore(props: Props) {\r\n    let content;\r\n    if (props.loading) {\r\n        content = (\r\n            <span>\r\n                <FormattedMessage id=\"leftbar.loading\" />\r\n            </span>\r\n        );\r\n    } else {\r\n        content = (\r\n            <span>\r\n                <FormattedMessage id=\"leftbar.loadMore\" />\r\n            </span>\r\n        );\r\n    }\r\n    return <div className={styles.container}>{content}</div>;\r\n}\r\n","// @flow\r\nimport * as React from \"react\";\r\nimport styles from \"./TextList.css\";\r\n\r\ntype Props = {\r\n    count: number,\r\n    extra: boolean\r\n};\r\n\r\nexport default class ResultCount extends React.Component<Props> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let countDisplay = this.props.count;\r\n        if (this.props.extra) countDisplay += \"+\";\r\n        return <span className={styles.searchTotal}>{countDisplay}</span>;\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"textList\":\"TextList---textList\",\"textListRow\":\"TextList---textListRow\",\"selectedRow\":\"TextList---selectedRow\",\"textNameRow\":\"TextList---textNameRow\",\"textName\":\"TextList---textName\",\"highlight\":\"TextList---highlight\",\"searchResults\":\"TextList---searchResults\",\"searchResult\":\"TextList---searchResult\",\"selectedSearchResult\":\"TextList---selectedSearchResult\",\"searchTotal\":\"TextList---searchTotal\",\"textListLoader\":\"TextList---textListLoader\",\"searching\":\"TextList---searching\",\"loadMore\":\"TextList---loadMore\"};","// @flow\r\nimport React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport { AutoSizer } from \"react-virtualized/dist/es/AutoSizer\";\r\nimport {\r\n    CellMeasurer,\r\n    CellMeasurerCache,\r\n} from \"react-virtualized/dist/es/CellMeasurer\";\r\nimport \"react-virtualized/styles.css\"; // only needs to be imported once\r\nimport { List } from \"react-virtualized/dist/es/List\";\r\nimport * as api from \"api\";\r\nimport addTibetanShay from \"lib/addTibetanShay\";\r\nimport styles from \"./TextList.css\";\r\nimport Loader from \"react-loader\";\r\nimport HighlightedString from \"./HighlightedString\";\r\nimport ResultCount from \"./ResultCount\";\r\nimport LoadMore from \"./LoadMore\";\r\n\r\ntype Props = {\r\n    selectedText: api.TextData,\r\n    texts: api.TextData[],\r\n    onSelectedText: (text: api.TextData) => void,\r\n    onSelectedSearchResult: (\r\n        text: api.TextData,\r\n        start: number,\r\n        length: number,\r\n        selectedText: api.TextData\r\n    ) => void,\r\n    onSearchText: (text: api.TextData, searchTerm: string) => void,\r\n    searchTerm: string,\r\n    searchResults: { [number]: api.TextSearchResultData },\r\n    selectedSearchResult: null | {\r\n        textId: number,\r\n        start: number,\r\n        length: number,\r\n    },\r\n    searching: boolean,\r\n};\r\n\r\nconst DEFAULT_ROW_HEIGHT = 60;\r\n\r\nclass TextList extends React.Component<Props> {\r\n    list: List | null;\r\n    cache: CellMeasurerCache;\r\n    rowRenderer: (params: {\r\n        key: string,\r\n        index: number,\r\n        parent: {},\r\n        style: {},\r\n    }) => React.Element<CellMeasurer>;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.cache = new CellMeasurerCache({\r\n            fixedWidth: true,\r\n            defaultHeight: DEFAULT_ROW_HEIGHT,\r\n            minHeight: DEFAULT_ROW_HEIGHT,\r\n        });\r\n        this.rowRenderer = this.rowRenderer.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Props): void {\r\n        this.cache.clearAll();\r\n        if (this.list) this.list.forceUpdateGrid();\r\n    }\r\n    componentDidMount() {}\r\n\r\n    rowRenderer({\r\n        key,\r\n        index,\r\n        parent,\r\n        style,\r\n    }: {\r\n        key: string,\r\n        index: number,\r\n        parent: {},\r\n        style: {},\r\n    }): React.Element<CellMeasurer> {\r\n        const selectedText = this.props.selectedText;\r\n        const selectedTextId = selectedText ? selectedText.id : -1;\r\n        const selectedSearchResult = this.props.selectedSearchResult;\r\n        const texts = this.props.texts;\r\n        const onSelectedText = this.props.onSelectedText;\r\n        const onSelectedSearchResult = this.props.onSelectedSearchResult;\r\n        const searchTerm = this.props.searchTerm;\r\n        const searchResults = this.props.searchResults;\r\n        let className = styles.textListRow;\r\n\r\n        const text = texts[index];\r\n        if (text.id === selectedTextId) {\r\n            className = classnames(className, styles.selectedRow);\r\n        }\r\n        let name = addTibetanShay(text.name);\r\n        let nameHtml = <span className={styles.textName}>{name}</span>;\r\n        let textSearchResults = [];\r\n        let resultsCount = null;\r\n        let extraRemaining = false;\r\n        let loadingResults = false;\r\n\r\n        if (searchTerm.length > 0) {\r\n            nameHtml = (\r\n                <HighlightedString\r\n                    string={name}\r\n                    stringClass={styles.textName}\r\n                    highlightClass={styles.highlight}\r\n                    searchTerm={searchTerm}\r\n                />\r\n            );\r\n            if (searchResults.hasOwnProperty(text.id)) {\r\n                textSearchResults = searchResults[text.id].results;\r\n                extraRemaining = searchResults[text.id].extra;\r\n                loadingResults = searchResults[text.id].loading;\r\n                resultsCount = (\r\n                    <ResultCount\r\n                        count={searchResults[text.id].total}\r\n                        extra={extraRemaining}\r\n                    />\r\n                );\r\n            }\r\n        }\r\n\r\n        const cache = this.cache;\r\n\r\n        let textSearchResultRows = [];\r\n        if (textSearchResults.length > 0) {\r\n            textSearchResultRows = textSearchResults.map((result) => {\r\n                const isSelected =\r\n                    selectedSearchResult &&\r\n                    selectedSearchResult.textId === text.id &&\r\n                    selectedSearchResult.start === result[0];\r\n                const className = isSelected\r\n                    ? styles.selectedSearchResult\r\n                    : styles.searchResult;\r\n                if (isSelected) {\r\n                    // TODO: keeps getting rendered when selecting a syllable\r\n                    // console.log(\"got selected result: %o\", result);\r\n                }\r\n                return (\r\n                    <div\r\n                        key={text.id + \"_\" + result[0]}\r\n                        onClick={() => {\r\n                            onSelectedSearchResult(\r\n                                text,\r\n                                result[0],\r\n                                searchTerm.length,\r\n                                selectedText\r\n                            );\r\n                        }}\r\n                        className={className}\r\n                    >\r\n                        <HighlightedString\r\n                            string={result[1]}\r\n                            highlightClass={styles.highlight}\r\n                            searchTerm={searchTerm}\r\n                        />\r\n                    </div>\r\n                );\r\n            });\r\n        }\r\n\r\n        const searchText = () => {\r\n            this.props.onSearchText(text, searchTerm);\r\n        };\r\n        if (searchResults !== null)\r\n            return (\r\n                <CellMeasurer\r\n                    columnIndex={0}\r\n                    key={key}\r\n                    parent={parent}\r\n                    rowIndex={index}\r\n                    cache={cache}\r\n                >\r\n                    <div\r\n                        key={`listkeys-${key}`}\r\n                        style={style}\r\n                        className={className}\r\n                    >\r\n                        {searchTerm && (\r\n                            <div\r\n                                className={styles.textNameRow}\r\n                                onClick={() => {\r\n                                    onSelectedText(texts[index]);\r\n                                }}\r\n                            >\r\n                                {nameHtml} {resultsCount}\r\n                            </div>\r\n                        )}\r\n                        {textSearchResults.length > 0 && (\r\n                            <div className={styles.searchResults}>\r\n                                {textSearchResultRows}\r\n                            </div>\r\n                        )}\r\n                        {extraRemaining && (\r\n                            <div\r\n                                className={styles.loadMore}\r\n                                onClick={searchText}\r\n                            >\r\n                                <LoadMore loading={loadingResults} />\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </CellMeasurer>\r\n            );\r\n        else return null;\r\n    }\r\n    findRowHeight({ searchTerm }) {\r\n        return searchTerm ? null : 40;\r\n    }\r\n    render() {\r\n        const texts = this.props.texts;\r\n        let rowCount = texts.length;\r\n        return (\r\n            <div className={styles.textList}>\r\n                {this.props.texts && this.props.texts.length > 0 ? (\r\n                    <AutoSizer>\r\n                        {({ height, width }) => (\r\n                            <List\r\n                                ref={(list) => (this.list = list)}\r\n                                height={height}\r\n                                rowCount={rowCount}\r\n                                rowHeight={\r\n                                    this.findRowHeight(this.props) ||\r\n                                    this.cache.rowHeight\r\n                                }\r\n                                rowRenderer={this.rowRenderer}\r\n                                width={width}\r\n                                overscanRowCount={1}\r\n                                deferredMeasurementCache={this.cache}\r\n                            ></List>\r\n                        )}\r\n                    </AutoSizer>\r\n                ) : this.props.searching ? (\r\n                    <div className={styles.textListLoader}>\r\n                        <Loader loaded={!this.props.searching} scale={0.5} />\r\n                        <p className={styles.searching}>Searching…</p>\r\n                    </div>\r\n                ) : (\r\n                    <ul className=\"textList\" />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextList;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAQA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AADA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;AAvCA;AACA;;;;;;;;;;;;ACbA;AACA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAGA;AACA;AAEA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AAMA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;AATA;AACA;;;;;;;;;;;;ACVA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAuBA;AACA;AACA;;;;;AAUA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAQA;AACA;;;AACA;AACA;AACA;AACA;;;AACA;;;AAEA;AAUA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAMA;AACA;AAVA;AAaA;AACA;AACA;AAHA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AAHA;AAOA;AACA;AACA;AACA;AAJA;AAUA;AAAA;AAMA;AACA;AAFA;AAIA;AAAA;AAOA;;;AACA;AAAA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAXA;AADA;AAiBA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAIA;;;;AAxMA;AACA;AA0MA;;;;A","sourceRoot":""}