{"version":3,"file":"17.parkhang-dev.js","sources":["webpack://parkhang/./app/components/TextDetail/AddButton.css","webpack://parkhang/./app/components/TextDetail/AddButton.js","webpack://parkhang/./app/components/TextDetail/AnnotationControls.js","webpack://parkhang/./app/components/TextDetail/AnnotationControlsHeading.css","webpack://parkhang/./app/components/TextDetail/AnnotationControlsHeading.js","webpack://parkhang/./app/components/TextDetail/AnnotationDetailEdit.js","webpack://parkhang/./app/components/TextDetail/Note.css","webpack://parkhang/./app/components/TextDetail/Note.js","webpack://parkhang/./app/components/TextDetail/NoteEditor.css","webpack://parkhang/./app/components/TextDetail/NoteEditor.js","webpack://parkhang/./app/components/TextDetail/QuestionEditor.css","webpack://parkhang/./app/components/TextDetail/QuestionEditor.js","webpack://parkhang/./app/components/TextDetail/QuestionView.css","webpack://parkhang/./app/components/TextDetail/QuestionView.js","webpack://parkhang/./app/components/TextDetail/QuestionsLoading.css","webpack://parkhang/./app/components/TextDetail/QuestionsLoading.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"button\":\"AddButton---button\"};","import React from \"react\";\r\nimport styles from \"./AddButton.css\";\r\n\r\ntype Props = {\r\n    title?: string,\r\n    onClick?: () => void\r\n};\r\n\r\nconst AddButton = (props: Props) => {\r\n    return (\r\n        <div className={styles.button} title={props.title} onClick={props.onClick}>\r\n            +\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddButton;\r\n","// @flow\r\nimport * as React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport AnnotationDetail from \"./AnnotationDetail\";\r\nimport AnnotationDetailEdit from \"./AnnotationDetailEdit\";\r\nimport styles from \"./AnnotationControls.css\";\r\nimport colours from \"css/colour.css\";\r\nimport User from \"lib/User\";\r\nimport Witness from \"lib/Witness\";\r\nimport Annotation, { ANNOTATION_TYPES } from \"lib/Annotation\";\r\nimport AnnotationControlsHeading from \"./AnnotationControlsHeading\";\r\nimport NoteEditor from \"./NoteEditor\";\r\nimport QuestionView from \"./QuestionView\";\r\nimport QuestionEditor from \"./QuestionEditor\";\r\nimport QuestionsLoading from \"./QuestionsLoading\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport Note from \"./Note\";\r\nimport Button from \"components/UI/Button\";\r\nimport PageBreakIcon from \"images/page_break_icon.svg\";\r\nimport { List } from \"react-virtualized/dist/es/List\";\r\nimport AnnotationControlsHeader from \"./AnnotationControlsHeader\";\r\nimport Question from \"lib/Question\";\r\n\r\nimport type { AnnotationUniqueId } from \"lib/Annotation\";\r\nexport const CONTROLS_MARGIN_LEFT = 10;\r\nconst FAKE_LOGIN = false;\r\nexport type QuestionData = {\r\n    loading: boolean,\r\n    questions: Question[],\r\n};\r\n\r\nexport type Props = {\r\n    inline: boolean,\r\n    user: User,\r\n    annotationsData: null,\r\n    activeAnnotation: null,\r\n    baseAnnotation: null,\r\n    availableAnnotations: Annotation[] | null,\r\n    temporaryAnnotation: null,\r\n    inline: null,\r\n    firstSelectedSegment: null,\r\n    splitTextRect: ClientRect | null,\r\n    selectedWitness: Witness,\r\n    selectedElementId: string | null,\r\n    selectedElementIds: string[] | null,\r\n    pechaImageClass: string,\r\n    notes: Annotation[],\r\n    temporaryNotes: Annotation[],\r\n    questions: Annotation[],\r\n    questionsData: { [annotationId: AnnotationUniqueId]: QuestionData },\r\n    temporaryQuestions: Annotation[],\r\n    questionQuote: React.Element<typeof React.Component> | null,\r\n    addNote: () => void,\r\n    editNote: (annotation: Annotation) => void,\r\n    saveAnnotation: (annotation: Annotation, content: string) => void,\r\n    cancelEditAnnotation: (annotation: Annotation) => void,\r\n    deleteAnnotation: (annotation: Annotation) => void,\r\n    addPageBreak: () => void,\r\n    addLineBreak: () => void,\r\n    addQuestion: () => void,\r\n    saveQuestion: (\r\n        question: Annotation,\r\n        title: string,\r\n        content: string\r\n    ) => void,\r\n    list: List | null,\r\n    closeAnnotation: () => void,\r\n};\r\n\r\ntype AnchorPoint = \"top\" | \"left\" | \"bottom\" | \"right\";\r\n\r\nconst anchorPoints = {\r\n    top: 1,\r\n    left: 2,\r\n    bottom: 3,\r\n    right: 4,\r\n};\r\n\r\nclass AnnotationControls extends React.Component<Props> {\r\n    controls: HTMLDivElement | null;\r\n    arrow: HTMLDivElement | null;\r\n    arrowDs: HTMLDivElement | null;\r\n    annotation: null;\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.controls = null;\r\n        this.arrow = null;\r\n        this.arrowDs = null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updatePosition();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // Need to delay calling this because the browser\r\n        // may not have finished rendering when first called.\r\n\r\n        setTimeout(this.updatePosition.bind(this), 0);\r\n    }\r\n\r\n    updatePosition() {\r\n        const measurements = this.getMeasurements();\r\n        if (\r\n            !this.props.inline ||\r\n            !this.controls ||\r\n            !this.arrow ||\r\n            !measurements\r\n        ) {\r\n            return;\r\n        }\r\n        const controls = this.controls;\r\n        const height = controls.offsetHeight;\r\n        const width = controls.offsetWidth;\r\n        const arrow = this.arrow;\r\n        const bottomGap = measurements.bottomGap;\r\n        const offScreen = bottomGap < 0 || bottomGap > height;\r\n\r\n        let top = measurements.top;\r\n        const viewPortWidth = measurements.viewPortWidth || 0;\r\n\r\n        let selectedLeft = measurements.left;\r\n        let selectedRight = selectedLeft + measurements.width;\r\n\r\n        arrow.style.display = \"none\";\r\n        if (this.props.selectedElementIds) {\r\n            let lines = 1;\r\n            let prevSegmentLeft = 0;\r\n            let lastLineLeft = 0;\r\n            let lastLineRight = 0;\r\n            let lastLineBottom = 0;\r\n            for (let i = 0; i < this.props.selectedElementIds.length; i++) {\r\n                const segmentId = this.props.selectedElementIds[i];\r\n                const segment = document.getElementById(segmentId);\r\n                if (segment) {\r\n                    const segmentLeft = segment.offsetLeft;\r\n                    const segmentRight = segmentLeft + segment.offsetWidth;\r\n                    if (segmentLeft < prevSegmentLeft) {\r\n                        lines++;\r\n                        lastLineLeft = segmentLeft;\r\n                        lastLineRight = segmentRight;\r\n                        lastLineBottom =\r\n                            segment.offsetTop + segment.offsetHeight;\r\n                        selectedLeft = segmentLeft;\r\n                        selectedRight = segmentRight;\r\n                    } else if (segmentRight > lastLineRight) {\r\n                        lastLineRight = segmentRight;\r\n                        // selectedRight = segmentRight;\r\n                    }\r\n                    if (segmentLeft < selectedLeft) selectedLeft = segmentLeft;\r\n                    if (segmentRight > selectedRight)\r\n                        selectedRight = segmentRight;\r\n                    prevSegmentLeft = segmentLeft;\r\n                }\r\n            }\r\n        }\r\n        let selectedWidth = selectedRight - selectedLeft;\r\n\r\n        let anchorPoint = anchorPoints.bottom;\r\n        let moveToSide = false;\r\n        let moveRight = 0;\r\n        if (!offScreen && bottomGap < height) {\r\n            moveToSide = true;\r\n        }\r\n\r\n        if (moveToSide) {\r\n            arrow.className = styles.arrowLeft;\r\n            if (selectedLeft - width - arrow.offsetWidth < 0) {\r\n                anchorPoint = anchorPoints.right;\r\n            } else {\r\n                anchorPoint = anchorPoints.left;\r\n            }\r\n        } else {\r\n            let controlOverhang = width / 2 - selectedWidth / 2;\r\n            if (selectedLeft - controlOverhang < 0) {\r\n                moveRight = Math.abs(selectedLeft - controlOverhang);\r\n            }\r\n            if (selectedRight + controlOverhang > viewPortWidth) {\r\n                moveRight = viewPortWidth - (selectedRight + controlOverhang);\r\n            }\r\n        }\r\n\r\n        if (anchorPoint === anchorPoints.bottom) {\r\n            let arrowHeight = 0;\r\n            let arrowLeft = 0;\r\n            if (this.arrow) {\r\n                this.arrow.className = styles.arrowTop;\r\n                arrowLeft = width / 2 - this.arrow.offsetWidth / 2 - moveRight;\r\n                if (arrowLeft < 0) arrowLeft = 0;\r\n                this.arrow.style.left = arrowLeft + \"px\";\r\n                arrowHeight = this.arrow.offsetHeight;\r\n                this.arrow.style.top = 0 - arrowHeight + \"px\";\r\n            }\r\n            controls.style.top = top + measurements.height + arrowHeight + \"px\";\r\n            controls.style.left =\r\n                selectedLeft + selectedWidth / 2 - width / 2 + moveRight + \"px\";\r\n        } else if (moveToSide) {\r\n            arrow.className = styles.arrowRight;\r\n            let arrowHeight = arrow.offsetHeight;\r\n            let controlsTop =\r\n                measurements.top + measurements.height / 2 - arrowHeight / 2;\r\n            if (\r\n                measurements.top +\r\n                    measurements.height +\r\n                    bottomGap -\r\n                    controlsTop <\r\n                height\r\n            ) {\r\n                controlsTop =\r\n                    measurements.top + measurements.height + bottomGap - height;\r\n            }\r\n            if (anchorPoint === anchorPoints.left) {\r\n                // left side of selection\r\n                arrow.style.left = width - 2 + \"px\";\r\n                controls.style.left =\r\n                    selectedLeft - width - arrow.offsetWidth + \"px\";\r\n            } else {\r\n                // right-side of selection\r\n\r\n                arrow.className = styles.arrowLeft;\r\n                arrow.style.left = -arrow.offsetWidth + \"px\";\r\n                controls.style.left =\r\n                    selectedLeft + selectedWidth + arrow.offsetWidth + \"px\";\r\n\r\n                // controls.style.right = 0 + \"px\";\r\n            }\r\n            arrow.style.top =\r\n                measurements.top -\r\n                controlsTop +\r\n                measurements.height / 2 -\r\n                arrowHeight / 2 +\r\n                \"px\";\r\n\r\n            controls.style.top = controlsTop + \"px\";\r\n        } else {\r\n            controls.style.top = top + \"px\";\r\n        }\r\n    }\r\n\r\n    getMeasurements(): {\r\n        top: number,\r\n        textTop: number,\r\n        rowTop: number,\r\n        left: number,\r\n        width: number,\r\n        height: number,\r\n        topGap: number,\r\n        bottomGap: number,\r\n        viewPortWidth: number | null,\r\n    } | null {\r\n        if (!this.props.selectedElementIds) {\r\n            return null;\r\n        }\r\n\r\n        const lastSelectedElementId =\r\n            this.props.selectedElementIds[\r\n                this.props.selectedElementIds.length - 1\r\n            ];\r\n        const lastElement = document.getElementById(lastSelectedElementId);\r\n        const firstSelectedElementId = this.props.selectedElementIds[0];\r\n        const firstElement = document.getElementById(firstSelectedElementId);\r\n\r\n        const splitTextRect = this.props.splitTextRect;\r\n        let extraTop = 0;\r\n        let scrollTop = 0;\r\n\r\n        if (this.props.list) {\r\n            scrollTop = this.props.list.Grid.state.scrollTop;\r\n        }\r\n        if (this.props.pechaImageClass) {\r\n            const pechaImage = document.getElementsByClassName(\r\n                this.props.pechaImageClass\r\n            )[0];\r\n            extraTop = pechaImage.offsetHeight;\r\n        }\r\n        if (!lastElement) {\r\n            console.warn(\r\n                \"no valid element found in getMeasurements, elementId: %s\",\r\n                this.props.selectedElementId\r\n            );\r\n            return {\r\n                top: 0,\r\n                textTop: 0,\r\n                rowTop: 0,\r\n                left: 0,\r\n                width: 1,\r\n                height: 1,\r\n                topGap: 0,\r\n                bottomGap: 0,\r\n                viewPortWidth: 1,\r\n            };\r\n        }\r\n        const top = lastElement.offsetTop + extraTop;\r\n        const textTop = lastElement.offsetTop;\r\n        const left = lastElement.offsetLeft;\r\n        const width = lastElement.offsetWidth;\r\n        const height = lastElement.offsetHeight;\r\n        let rowTop = top;\r\n\r\n        let viewPortWidth = null;\r\n        let topGap = 0;\r\n        let bottomGap = 0;\r\n        if (lastElement && splitTextRect) {\r\n            const elRect = lastElement.getBoundingClientRect();\r\n\r\n            bottomGap =\r\n                splitTextRect.height + splitTextRect.top - elRect.bottom;\r\n            viewPortWidth = splitTextRect.width;\r\n        }\r\n        if (firstElement && splitTextRect) {\r\n            const elRect = firstElement.getBoundingClientRect();\r\n            topGap = splitTextRect.height - elRect.top;\r\n        }\r\n\r\n        return {\r\n            top: top,\r\n            textTop: textTop,\r\n            rowTop: rowTop,\r\n            left: left,\r\n            width: width,\r\n            height: height,\r\n            topGap: topGap,\r\n            bottomGap: bottomGap,\r\n            viewPortWidth: viewPortWidth,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const props = this.props;\r\n        let annotations = [];\r\n        let temporaryAnnotations = [];\r\n        let anonymousUserMessage = null;\r\n        let nothingSelected = null;\r\n        const isLoggedIn = props.user.isLoggedIn || FAKE_LOGIN;\r\n\r\n        let breakSelected = false;\r\n        if (\r\n            props.activeAnnotation &&\r\n            (props.activeAnnotation.isType(ANNOTATION_TYPES.pageBreak) ||\r\n                props.activeAnnotation.isType(ANNOTATION_TYPES.lineBreak))\r\n        ) {\r\n            breakSelected = true;\r\n        }\r\n        // the selected word/sentence is props.anotationsData\r\n\r\n        if (props.annotationsData) {\r\n            props.annotationsData.map((annotationData) => {\r\n                let isEditing = false;\r\n                let isActive = false;\r\n                if (annotationData.isTemporary) {\r\n                    isEditing = true;\r\n                    isActive = true;\r\n                } else if (\r\n                    !props.temporaryAnnotation &&\r\n                    annotationData.annotation.uniqueId ==\r\n                        props.activeAnnotation.uniqueId\r\n                ) {\r\n                    isActive = true;\r\n                }\r\n\r\n                if (isEditing) {\r\n                    let annotationDetail = (\r\n                        <AnnotationDetailEdit\r\n                            annotationData={annotationData}\r\n                            key={annotationData.annotation.uniqueId}\r\n                            isActive={isActive}\r\n                            saveAnnotationHandler={(content) => {\r\n                                props.saveAnnotation(\r\n                                    annotationData.annotation,\r\n                                    content\r\n                                );\r\n                            }}\r\n                            cancelAnnotationHandler={() => {\r\n                                props.cancelEditAnnotation(\r\n                                    annotationData.annotation\r\n                                );\r\n                            }}\r\n                            isLoggedIn={isLoggedIn}\r\n                            selectAnnotationHandler={() => {}}\r\n                            editAnnotationHandler={() => {}}\r\n                        />\r\n                    );\r\n                    temporaryAnnotations.push(annotationDetail);\r\n                } else {\r\n                    let annotationDetail = (\r\n                        <AnnotationDetail\r\n                            isWorkingSection={false}\r\n                            fontSize={props.fontSize}\r\n                            annotationData={annotationData}\r\n                            key={annotationData.annotation.uniqueId}\r\n                            isActive={isActive}\r\n                            selectAnnotationHandler={() => {\r\n                                if (isLoggedIn && !isEditing) {\r\n                                    props.didSelectAnnotation(\r\n                                        annotationData.annotation\r\n                                    );\r\n                                }\r\n                            }}\r\n                            editAnnotationHandler={() => {\r\n                                if (isLoggedIn && !isEditing) {\r\n                                    this.annotation = annotationData.annotation;\r\n\r\n                                    props.editAnnotation(\r\n                                        annotationData.annotation\r\n                                    );\r\n                                }\r\n                            }}\r\n                            isLoggedIn={isLoggedIn}\r\n                        />\r\n                    );\r\n                    annotations.push(annotationDetail);\r\n                }\r\n            }, this);\r\n            if (!props.user.isLoggedIn === !FAKE_LOGIN) {\r\n                // NOTE: FormattedMessage cannot take a child when using\r\n                // the values option, so need to wrap it in a div\r\n                anonymousUserMessage = (\r\n                    <div\r\n                        className={styles.anonymousMessage}\r\n                        style={{\r\n                            position: \"relative\",\r\n                            width: \"fit-content\",\r\n                            border: \"1px solid gray\",\r\n                            paddingInline: 10,\r\n                        }}\r\n                    >\r\n                        <FormattedMessage\r\n                            id=\"annotations.loginMessage\"\r\n                            values={{\r\n                                loginLink: (\r\n                                    <>\r\n                                        <FormattedMessage id=\"annotations.loginLink\" />\r\n                                    </>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n        } else {\r\n            nothingSelected = (\r\n                <div className={styles.nothingSelected}>Nothing Selected</div>\r\n            );\r\n        }\r\n\r\n        let pageBreaksButton = null;\r\n        let allowPageBreak = !this.props.selectedWitness.isWorking;\r\n        let lineBreaksButton = null;\r\n        let allowLineBreak = !this.props.selectedWitness.isWorking;\r\n        if (isLoggedIn && !this.props.selectedWitness.isWorking) {\r\n            let pageBreaks = [];\r\n            let lineBreaks = [];\r\n            if (this.props.availableAnnotations) {\r\n                pageBreaks = this.props.availableAnnotations.filter(\r\n                    (annotation: Annotation) =>\r\n                        annotation.type === ANNOTATION_TYPES.pageBreak &&\r\n                        annotation.creatorWitness.id ===\r\n                            this.props.selectedWitness.id\r\n                );\r\n                lineBreaks = this.props.availableAnnotations.filter(\r\n                    (annotation: Annotation) =>\r\n                        annotation.type === ANNOTATION_TYPES.lineBreak &&\r\n                        annotation.creatorWitness.id ===\r\n                            this.props.selectedWitness.id\r\n                );\r\n            }\r\n\r\n            if (pageBreaks.length > 0) {\r\n                pageBreaksButton = (\r\n                    <div className={styles.breakButtons}>\r\n                        <Button\r\n                            title=\"Page Break\"\r\n                            accessoryType=\"DELETE\"\r\n                            icon={<PageBreakIcon width={20} height={20} />}\r\n                            onClick={() => {\r\n                                this.props.deleteAnnotation(pageBreaks[0]);\r\n                            }}\r\n                            isActive={true}\r\n                            backgroundColor={colours.activeButton}\r\n                        />\r\n                    </div>\r\n                );\r\n                allowPageBreak = false;\r\n            }\r\n\r\n            if (lineBreaks.length > 0) {\r\n                lineBreaksButton = (\r\n                    <div className={styles.breakButtons}>\r\n                        <Button\r\n                            title=\"Line Break\"\r\n                            accessoryType=\"DELETE\"\r\n                            icon=\"&#182;\"\r\n                            onClick={() => {\r\n                                this.props.deleteAnnotation(lineBreaks[0]);\r\n                            }}\r\n                            isActive={true}\r\n                            backgroundColor={colours.activeButton}\r\n                        />\r\n                    </div>\r\n                );\r\n                allowLineBreak = false;\r\n            }\r\n\r\n            // Can't have line break and page break in same place.\r\n            if (!allowPageBreak) allowLineBreak = false;\r\n            if (!allowLineBreak) allowPageBreak = false;\r\n        }\r\n\r\n        let tempNotes = null;\r\n        let tempNoteIds = {};\r\n        if (props.temporaryNotes && props.temporaryNotes.length > 0) {\r\n            tempNotes = props.temporaryNotes.map((note: Annotation) => {\r\n                let key = \"NOTE_\" + note.uniqueId;\r\n                // The note is being edited\r\n                if (note.basedOn) {\r\n                    tempNoteIds[note.basedOn.uniqueId] = note.uniqueId;\r\n                }\r\n                return (\r\n                    <NoteEditor\r\n                        note={note}\r\n                        key={key}\r\n                        saveNote={props.saveAnnotation}\r\n                        cancel={() => props.cancelEditAnnotation(note)}\r\n                    />\r\n                );\r\n            });\r\n        }\r\n\r\n        let notes = null;\r\n        if (props.notes && props.notes.length > 0) {\r\n            // Filter out notes that are being edited\r\n            const validNotes = props.notes.filter(\r\n                (note: Annotation) => !tempNoteIds.hasOwnProperty(note.uniqueId)\r\n            );\r\n            notes = validNotes.map((note: Annotation) => {\r\n                let key = \"NOTE_\" + note.uniqueId;\r\n                return (\r\n                    <Note\r\n                        note={note}\r\n                        key={key}\r\n                        delete={this.props.deleteAnnotation}\r\n                        edit={this.props.editNote}\r\n                    />\r\n                );\r\n            });\r\n        }\r\n\r\n        let tempQuestions = null;\r\n        let tempQuestionIds = {};\r\n        if (\r\n            props.temporaryQuestions &&\r\n            props.temporaryQuestions.length > 0 &&\r\n            props.questionQuote\r\n        ) {\r\n            tempQuestions = props.temporaryQuestions.map(\r\n                (question: Annotation) => {\r\n                    tempQuestionIds[question.uniqueId] = question.uniqueId;\r\n                    let key = \"QUESTION_\" + question.uniqueId;\r\n\r\n                    return (\r\n                        <QuestionEditor\r\n                            question={question}\r\n                            questionQuote={props.questionQuote}\r\n                            defaultTitle={props.selectedWitness.text.name}\r\n                            key={key}\r\n                            saveQuestion={props.saveQuestion}\r\n                            cancel={() => props.cancelEditAnnotation(question)}\r\n                        />\r\n                    );\r\n                }\r\n            );\r\n        }\r\n\r\n        let questionLoadingIndicators = null;\r\n        let questionViews: Array<QuestionView> = [];\r\n        let questionsAreLoading = false;\r\n        if (props.questions && props.questions.length > 0) {\r\n            let questions: Question[] = [];\r\n            for (let i = 0; i < props.questions.length; i++) {\r\n                const question = props.questions[i];\r\n                let isValid = !tempQuestionIds.hasOwnProperty(\r\n                    question.uniqueId\r\n                );\r\n                if (isValid) {\r\n                    if (props.questionsData.hasOwnProperty(question.uniqueId)) {\r\n                        if (props.questionsData[question.uniqueId].loading) {\r\n                            questionsAreLoading = true;\r\n                        }\r\n                        questions = questions.concat(\r\n                            props.questionsData[question.uniqueId].questions\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            questionViews = questions.map((question: Question) => {\r\n                let key = \"QUESTION_\" + question.annotationUniqueId;\r\n                return (\r\n                    <QuestionView\r\n                        question={question}\r\n                        key={\"question_\" + question.annotationUniqueId}\r\n                    />\r\n                );\r\n            });\r\n        }\r\n        let questionHeading = null;\r\n        if (questionViews.length > 0) {\r\n            questionHeading = (\r\n                <h3 className={styles.sectionHeading}>Questions</h3>\r\n            );\r\n        }\r\n\r\n        let questionsLoading = null;\r\n        if (questionsAreLoading) {\r\n            questionsLoading = <QuestionsLoading />;\r\n        }\r\n\r\n        let allowQuestion =\r\n            props.questions.length === 0 &&\r\n            props.temporaryQuestions.length === 0;\r\n\r\n        let classes = [styles.annotationControls];\r\n        if (props.inline) {\r\n            classes.push(styles.inline);\r\n        }\r\n\r\n        let showHeader = true;\r\n        if (anonymousUserMessage || breakSelected) showHeader = false;\r\n\r\n        return (\r\n            <div\r\n                className={classnames(...classes)}\r\n                ref={(controls: HTMLDivElement | null) =>\r\n                    (this.controls = controls)\r\n                }\r\n            >\r\n                {showHeader && (\r\n                    <AnnotationControlsHeader\r\n                        addPageBreak={\r\n                            allowPageBreak ? props.addPageBreak : null\r\n                        }\r\n                        addLineBreak={\r\n                            allowLineBreak ? props.addLineBreak : null\r\n                        }\r\n                        addNote={\r\n                            isLoggedIn && !tempNotes\r\n                                ? () => props.addNote()\r\n                                : null\r\n                        }\r\n                        addQuestion={allowQuestion ? props.addQuestion : null}\r\n                        closeAnnotation={props.closeAnnotation}\r\n                        editAnnotationHandler={() => {\r\n                            let editBtn = document.getElementById(\"editBtn\");\r\n                            editBtn?.click();\r\n                        }}\r\n                        userLoggedIn={isLoggedIn}\r\n                    />\r\n                )}\r\n\r\n                <div className={styles.annotationContent}>\r\n                    {anonymousUserMessage}\r\n                    {nothingSelected}\r\n                    {!breakSelected && temporaryAnnotations}\r\n                    {!breakSelected && annotations}\r\n                    {pageBreaksButton}\r\n                    {lineBreaksButton}\r\n                    {tempNotes}\r\n                    {notes}\r\n                    {questionHeading}\r\n                    {tempQuestions}\r\n                    {questionsLoading}\r\n                    {questionViews}\r\n                </div>\r\n                <div\r\n                    className={styles.arrow}\r\n                    ref={(div) => (this.arrow = div)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default React.memo(AnnotationControls);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"AnnotationControlsHeading---heading\",\"title\":\"AnnotationControlsHeading---title\",\"button\":\"AnnotationControlsHeading---button\"};","import React from \"react\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport styles from \"./AnnotationControlsHeading.css\";\r\nimport AddButton from \"./AddButton\";\r\n\r\ntype Props = {\r\n    titleId: string,\r\n    buttonOnClick?: () => void,\r\n    buttonTitleId?: string,\r\n    intl: { formatMessage: ({ [id: string]: string }) => string }\r\n};\r\n\r\nclass AnnotationControlsHeading extends React.Component<Props> {\r\n    render() {\r\n        let button = null;\r\n        if (this.props.buttonOnClick) {\r\n            const title = this.props.buttonTitleId\r\n                ? this.props.intl.formatMessage({\r\n                      id: this.props.buttonTitleId\r\n                  })\r\n                : \"\";\r\n            button = (\r\n                <AddButton title={title} onClick={this.props.buttonOnClick} />\r\n            );\r\n        }\r\n        return (\r\n            <h3 className={styles.heading}>\r\n                <span className={styles.title}>\r\n                    <FormattedMessage id={this.props.titleId} />\r\n                </span>\r\n                {button && <div className={styles.button}>{button}</div>}\r\n            </h3>\r\n        );\r\n    }\r\n}\r\n\r\nexport default injectIntl(AnnotationControlsHeading);\r\n","// @flow\r\nimport React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport styles from \"./AnnotationDetail.css\";\r\nimport type { Props as AnnotationDetailProps } from \"./AnnotationDetail\";\r\n\r\nexport type Props = AnnotationDetailProps & {\r\n    saveAnnotationHandler: (text: string) => void,\r\n    cancelAnnotationHandler: () => void,\r\n};\r\n\r\nconst AnnotationDetailEdit = (props: Props) => {\r\n    let content = props.annotationData.content;\r\n    let classes = [styles.annotationDetail];\r\n    let textarea = null;\r\n\r\n    if (props.isActive) {\r\n        classes.push(styles.active);\r\n    }\r\n    let auto_grow = (element) => {\r\n        textarea.style.height = \"5px\";\r\n        textarea.style.height = textarea.scrollHeight + \"px\";\r\n    };\r\n    let className = classnames(...classes);\r\n    return (\r\n        <div className={className}>\r\n            <h3>{props.annotationData.name}</h3>\r\n\r\n            <div className={styles.editing}>\r\n                <textarea\r\n                    defaultValue={content}\r\n                    autoFocus={true}\r\n                    onInput={auto_grow}\r\n                    ref={(ta) => (textarea = ta)}\r\n                />\r\n                <div className={styles.actionButtons}>\r\n                    <div\r\n                        className={styles.save}\r\n                        onClick={() => {\r\n                            if (textarea) {\r\n                                props.saveAnnotationHandler(textarea.value);\r\n                            }\r\n                        }}\r\n                    >\r\n                        <FormattedMessage id=\"annotation.save\" />\r\n                    </div>\r\n                    <div\r\n                        className={styles.cancel}\r\n                        onClick={props.cancelAnnotationHandler}\r\n                    >\r\n                        <FormattedMessage id=\"annotation.cancel\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnnotationDetailEdit;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"note\":\"Note---note\",\"header\":\"Note---header\",\"info\":\"Note---info\",\"content\":\"Note---content\",\"delete\":\"Note---delete\"};","import React from \"react\";\r\nimport styles from \"./Note.css\";\r\nimport Annotation from \"lib/Annotation\";\r\nimport FormattedDate from \"react-intl\";\r\nimport { Box, IconButton } from \"@mui/material\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\ntype Props = {\r\n    note: Annotation,\r\n    delete?: (note: Annotation) => void,\r\n    edit?: (note: Annotation) => void,\r\n};\r\n\r\nexport default class Note extends React.Component<Props> {\r\n    delete() {\r\n        if (this.props.delete) {\r\n            this.props.delete(this.props.note);\r\n        }\r\n    }\r\n\r\n    edit() {\r\n        if (this.props.edit) {\r\n            this.props.edit(this.props.note);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Box className={styles.note} sx={{ boxShadow: 2 }}>\r\n                <p>Note:</p>\r\n                <div className={styles.header}>\r\n                    <h4 className={styles.info}>\r\n                        {this.props.note.creatorUser.name}\r\n                    </h4>\r\n                    {this.props.delete && (\r\n                        <div\r\n                            className={styles.delete}\r\n                            onClick={this.delete.bind(this)}\r\n                        >\r\n                            <IconButton aria-label=\"delete\" size=\"small\">\r\n                                <DeleteIcon fontSize=\"inherit\" />\r\n                            </IconButton>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <div className={styles.content} onClick={this.edit.bind(this)}>\r\n                    {this.props.note.content}\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"editorContainer\":\"NoteEditor---editorContainer\",\"textEditor\":\"NoteEditor---textEditor\"};","//@flow\r\nimport React from \"react\";\r\nimport Annotation from \"lib/Annotation\";\r\nimport styles from \"./NoteEditor.css\";\r\nimport buttonStyles from \"./Button.css\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\ntype Props = {\r\n    note: Annotation,\r\n    saveNote: (note: Annotation, content: string) => void,\r\n    cancel: () => void\r\n};\r\n\r\ntype State = {\r\n    content: string\r\n};\r\n\r\nexport default class NoteEditor extends React.Component<Props, State> {\r\n    textarea: HTMLTextAreaElement | null;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            content: props.note.content\r\n        };\r\n    }\r\n\r\n    save() {\r\n        const content = this.textarea ? this.textarea.value : \"\";\r\n        this.props.saveNote(this.props.note, content);\r\n    }\r\n\r\n    cancel() {\r\n        this.props.cancel();\r\n    }\r\n\r\n    handleChange(e: Event) {\r\n        const content =\r\n            e.target instanceof HTMLTextAreaElement ? e.target.value : \"\";\r\n        this.setState((prevState, props) => {\r\n            return {\r\n                content: content\r\n            };\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.editorContainer}>\r\n                <textarea\r\n                    className={styles.textEditor}\r\n                    ref={(textarea: HTMLTextAreaElement | null) =>\r\n                        (this.textarea = textarea)\r\n                    }\r\n                    value={this.state.content}\r\n                    onChange={this.handleChange.bind(this)}\r\n                />\r\n                <div className={buttonStyles.buttonContainer}>\r\n                    <div\r\n                        className={buttonStyles.save}\r\n                        onClick={this.save.bind(this)}\r\n                    >\r\n                        <FormattedMessage id=\"annotation.save\" />\r\n                    </div>\r\n                    <div\r\n                        className={buttonStyles.cancel}\r\n                        onClick={this.cancel.bind(this)}\r\n                    >\r\n                        <FormattedMessage id=\"annotation.cancel\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"editorContainer\":\"QuestionEditor---editorContainer\",\"textEditor\":\"QuestionEditor---textEditor\"};","import React from \"react\";\r\nimport styles from \"./QuestionEditor.css\";\r\nimport buttonStyles from \"./Button.css\";\r\nimport Annotation from \"lib/Annotation\";\r\nimport { FormattedMessage } from \"react-intl\";\r\n\r\ntype Props = {\r\n    question: Annotation,\r\n    questionQuote: React.Element<typeof React.Component>,\r\n    defaultTitle: string,\r\n    saveQuestion: (\r\n        question: Annotation,\r\n        title: string,\r\n        content: string\r\n    ) => void,\r\n    cancel: () => void\r\n};\r\n\r\ntype State = {\r\n    content: string\r\n};\r\n\r\nexport default class QuestionEditor extends React.Component<Props> {\r\n    textarea: HTMLTextAreaElement | null;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            content: props.question.content\r\n        };\r\n    }\r\n\r\n    save() {\r\n        const content = this.textarea ? this.textarea.value : \"\";\r\n\r\n        this.props.saveQuestion(\r\n            this.props.question,\r\n            this.props.defaultTitle,\r\n            content\r\n        );\r\n    }\r\n\r\n    cancel() {\r\n        this.props.cancel();\r\n    }\r\n\r\n    handleChange(e: Event) {\r\n        const content =\r\n            e.target instanceof HTMLTextAreaElement ? e.target.value : \"\";\r\n        this.setState((prevState, props) => {\r\n            return {\r\n                content: content\r\n            };\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.editorContainer}>\r\n                <div>{this.props.questionQuote}</div>\r\n                <textarea\r\n                    className={styles.textEditor}\r\n                    ref={(textarea: HTMLTextAreaElement | null) =>\r\n                        (this.textarea = textarea)\r\n                    }\r\n                    value={this.state.content}\r\n                    onChange={this.handleChange.bind(this)}\r\n                />\r\n                <div className={buttonStyles.buttonContainer}>\r\n                    <div\r\n                        className={buttonStyles.save}\r\n                        onClick={this.save.bind(this)}\r\n                    >\r\n                        <FormattedMessage id=\"annotation.save\" />\r\n                    </div>\r\n                    <div\r\n                        className={buttonStyles.cancel}\r\n                        onClick={this.cancel.bind(this)}\r\n                    >\r\n                        <FormattedMessage id=\"annotation.cancel\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"question\":\"QuestionView---question\",\"threadLink\":\"QuestionView---threadLink\"};","import React from \"react\";\r\nimport styles from \"./QuestionView.css\";\r\nimport controlStyles from \"./AnnotationControls.css\";\r\nimport buttonStyles from \"./Button.css\";\r\nimport Annotation from \"lib/Annotation\";\r\nimport Question from \"lib/Question\";\r\nimport AnswerView from \"./AnswerView\";\r\nimport { FormattedMessage, FormattedDate } from \"react-intl\";\r\nimport classnames from \"classnames\";\r\nimport { QUESTION_URL } from \"app_constants\";\r\nimport { Box } from \"@mui/material\";\r\n\r\ntype Props = {\r\n    question: Question,\r\n};\r\n\r\nexport default class QuestionView extends React.Component<Props> {\r\n    render() {\r\n        const topicUrl = QUESTION_URL + this.props.question.topicId;\r\n        let answerViews = [];\r\n        let answers = this.props.question.answers;\r\n        console.log(answers);\r\n        for (let i = 0; i < answers.length; i++) {\r\n            const answer = answers[i];\r\n            answerViews.push(\r\n                <AnswerView answer={answer} key={\"answer_\" + answer.created} />\r\n            );\r\n        }\r\n        const name =\r\n            this.props.question.name.length > 0\r\n                ? this.props.question.name\r\n                : this.props.question.username;\r\n\r\n        return (\r\n            <Box\r\n                className={classnames(styles.question, controlStyles.padding)}\r\n                sx={{ boxShadow: 2 }}\r\n            >\r\n                <span\r\n                    className={classnames(\r\n                        styles.threadLink,\r\n                        controlStyles.text\r\n                    )}\r\n                >\r\n                    <a href={topicUrl} target=\"_blank\">\r\n                        <FormattedMessage id=\"question.viewThread\" />\r\n                    </a>\r\n                </span>\r\n                <p\r\n                    className={controlStyles.text}\r\n                    dangerouslySetInnerHTML={{\r\n                        __html: this.props.question.content,\r\n                    }}\r\n                />\r\n                <p className={controlStyles.subTitle}>\r\n                    {name},{\" \"}\r\n                    <FormattedDate value={this.props.question.created} />\r\n                </p>\r\n                {answerViews}\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"QuestionsLoading---loading\"};","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport styles from \"./QuestionsLoading.css\";\r\nimport controlStyles from \"./AnnotationControls.css\";\r\nimport buttonStyles from \"./Button.css\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport Loader from \"react-loader\";\r\n\r\nexport default class QuestionsLoading extends React.Component<Props> {\r\n    render() {\r\n        return (\r\n            <div className={classnames(styles.loading, controlStyles.text)}>\r\n                <Loader\r\n                    loaded={false}\r\n                    scale={0.25}\r\n                    position=\"relative\"\r\n                    top=\"50%\"\r\n                    left=\"50%\"\r\n                    lines={9}\r\n                    width={8}\r\n                    length={8}\r\n                    radius={14}\r\n                />\r\n                Loading questions...\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;AAAA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AA8CA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;;;;;AAKA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AALA;AAMA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;AAAA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAAA;AAOA;AACA;AACA;AACA;AACA;;;AAEA;AAWA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AAjBA;AAoBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAtBA;AACA;AAwBA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAUA;AACA;AACA;AAEA;AAAA;AAHA;AAFA;AAYA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAKA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAFA;AAQA;AAGA;AAGA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAsBA;AAAA;AAeA;AACA;AAAA;AAAA;AAFA;AAMA;;;;AA1lBA;AACA;AA4lBA;;;;;;;;;;;AC3qBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AAQA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AACA;AAEA;AADA;AAIA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;;;;AArBA;AACA;AAuBA;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAGA;AACA;AAFA;AAIA;AAAA;AAMA;AACA;AACA;;;;;;;;;;;AC3DA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAKA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AAKA;;;;AArCA;AACA;;;;;;;;;;;;ACbA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAWA;;;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AADA;AAHA;AAMA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AANA;AAQA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AAGA;AACA;AAFA;AAIA;AAAA;AAKA;;;;AAzDA;AACA;;;;;;;;;;;;AClBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AAiBA;;;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AADA;AAHA;AAMA;AACA;;;AACA;AACA;AAEA;AAKA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAGA;AACA;AANA;AAQA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AAGA;AACA;AAFA;AAIA;AAAA;AAKA;;;;AA/DA;AACA;;;;;;;;;;;;ACvBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAKA;AAEA;AACA;AAAA;AAAA;AAFA;AAKA;AADA;AAMA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AADA;AAFA;AAMA;AAAA;AAEA;AAAA;AAKA;;;;AA7CA;AACA;;;;;;;;;;;;ACjBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAcA;;;;AAlBA;AACA;;;;;A","sourceRoot":""}