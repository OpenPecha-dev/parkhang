{"version":3,"file":"107.parkhang-dev.js","sources":["webpack://parkhang/./app/components/Editors/Editor.js","webpack://parkhang/./app/components/Editors/EditorContainer.css","webpack://parkhang/./app/components/TextList/TextListTab.css","webpack://parkhang/./app/components/TextList/TextListTab.js","webpack://parkhang/./app/components/TextList/TextListTabContainer.js","webpack://parkhang/./app/components/TextList/index.js","webpack://parkhang/./app/components/TextsSearch/TextsSearch.css","webpack://parkhang/./app/components/TextsSearch/TextsSearch.js","webpack://parkhang/./app/components/TextsSearch/TextsSearchContainer.js","webpack://parkhang/./app/containers/TextListContainer.js","webpack://parkhang/./app/images/lopenling_logo.png","webpack://parkhang/./app/images/search.svg"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport TextsSearchContainer from \"components/TextsSearch/TextsSearchContainer\";\r\nimport TextListContainer from \"containers/TextListContainer\";\r\nimport TextListTabContainer from \"components/TextList/TextListTabContainer\";\r\nimport * as constants from \"app_constants\";\r\nimport lopenlingLogo from \"images/lopenling_logo.png\";\r\nimport headerStyles from \"components/Header/Header.css\";\r\nimport Resources from \"components/Resources\";\r\nimport SplitPane, { Pane } from \"react-split-pane\";\r\nimport styles from \"./EditorContainer.css\";\r\nimport classnames from \"classnames\";\r\nimport utilStyles from \"css/util.css\";\r\nimport TextSheet from \"./TextSheet\";\r\nimport {\r\n    SpeedDial,\r\n    SpeedDialAction,\r\n    SpeedDialIcon,\r\n    Snackbar,\r\n    Alert,\r\n    Collapse,\r\n} from \"@mui/material\";\r\n\r\nimport { Edit, Share, VerticalSplit, SyncAlt } from \"@mui/icons-material\";\r\nimport { Box } from \"@mui/system\";\r\nconst Editor = (props) => {\r\n    let textListClassnames = [styles.listContainer];\r\n    let bodyHeight;\r\n    let minSize = constants.MIN_TEXT_LIST_WIDTH;\r\n    let maxSize = constants.MAX_TEXT_LIST_WIDTH;\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    let defaultSize = constants.DEFAULT_TEXT_LIST_WIDTH;\r\n    let size = props.textListWidth;\r\n    if (props.textListIsVisible) {\r\n        textListClassnames.push(styles.showListContainer);\r\n    } else {\r\n        size = 0;\r\n        textListClassnames.push(styles.hideListContainer);\r\n    }\r\n\r\n    bodyHeight = \"calc(100vh - \" + headerStyles.headerHeight + \")\";\r\n\r\n    const image_location = lopenlingLogo;\r\n    const handleClose = (event, reason) => {\r\n        if (reason === \"clickaway\") {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n    const handleShare = () => {\r\n        let textid = props.selectedText;\r\n        let textid2 = props.selectedText2;\r\n        let witnessid = props.selectedWitness;\r\n        let witnessid2 = props.selectedWitness2;\r\n        let url = \"\";\r\n        if (textid2 && witnessid2) {\r\n            url =\r\n                window.location.origin +\r\n                `/texts/${textid.id}/witnesses/${witnessid?.id}/texts2/${textid2.id}/witnesses2/${witnessid2.id}`;\r\n        } else {\r\n            url =\r\n                window.location.origin +\r\n                `/texts/${textid.id}/witnesses/${witnessid?.id}`;\r\n        }\r\n        navigator.clipboard\r\n            .writeText(url)\r\n            .then()\r\n            .catch((e) => console.log(e.message))\r\n            .finally(() => setOpen(true));\r\n    };\r\n    const actions = [\r\n        {\r\n            icon: (\r\n                <Edit htmlColor={props.isAnnotating ? \"#ff7961\" : undefined} />\r\n            ),\r\n            name: \"Annotate\",\r\n            condition: props.isAnnotating,\r\n            function: () => props.changeIsAnnotating(!props.isAnnotating),\r\n        },\r\n        {\r\n            icon: (\r\n                <SyncAlt\r\n                    htmlColor={props.isPanelLinked ? \"#ff7961\" : undefined}\r\n                />\r\n            ),\r\n            name: \"Link Panel\",\r\n            condition: props.isPanelLinked,\r\n            function: () => props.onChangePanelLink(!props.isPanelLinked),\r\n        },\r\n        {\r\n            icon: <Share />,\r\n            name: \"Share\",\r\n            function: handleShare,\r\n        },\r\n        {\r\n            icon: (\r\n                <VerticalSplit\r\n                    htmlColor={props.isSecondWindowOpen ? \"#ff7961\" : undefined}\r\n                />\r\n            ),\r\n            name: \"Split Window\",\r\n            condition: props.isSecondWindowOpen,\r\n            function: () =>\r\n                props.onChangeWindowOpen(!props.isSecondWindowOpen, 140),\r\n        },\r\n    ];\r\n    useEffect(() => {\r\n        let timer = setTimeout(() => {\r\n            window.dispatchEvent(new Event(\"resize\"));\r\n        }, 1000);\r\n        return () => clearTimeout(timer);\r\n    }, [props.textListIsVisible]);\r\n    return (\r\n        <div className={classnames(styles.interface, utilStyles.flex)}>\r\n            <SplitPane\r\n                size=\"fit-content\"\r\n                onDragFinished={(width: number) => {\r\n                    if (width > 0) window.dispatchEvent(new Event(\"resize\"));\r\n                }}\r\n                resizerStyle={{ display: \"none\" }}\r\n            >\r\n                <Collapse\r\n                    sx={{ height: \"100%\" }}\r\n                    orientation=\"horizontal\"\r\n                    in={props.textListIsVisible}\r\n                    mountOnEnter\r\n                    unmountOnExit\r\n                >\r\n                    <Resources />\r\n                </Collapse>\r\n                <Box sx={{ height: \"100vh\", width: \"100%\" }}>\r\n                    <TextSheet bodyHeight={bodyHeight} />\r\n                </Box>\r\n            </SplitPane>\r\n            <SpeedDial\r\n                ariaLabel=\"SpeedDial basic\"\r\n                sx={{ position: \"absolute\", bottom: 16, right: 16 }}\r\n                icon={<SpeedDialIcon />}\r\n            >\r\n                {actions.map((action) => (\r\n                    <SpeedDialAction\r\n                        key={action.name}\r\n                        icon={action.icon}\r\n                        tooltipTitle={action.name}\r\n                        onClick={action.function}\r\n                        open={action.condition}\r\n                    />\r\n                ))}\r\n            </SpeedDial>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert\r\n                    onClose={handleClose}\r\n                    severity=\"success\"\r\n                    sx={{ width: \"100%\" }}\r\n                >\r\n                    The Url Copied to Clipboard !\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Editor;\r\n\r\n// return (\r\n//     <div className={classnames(styles.interface, utilStyles.flex)}>\r\n//         <SplitPane\r\n//             split=\"vertical\"\r\n//             minSize={minSize}\r\n//             maxSize={maxSize}\r\n//             defaultSize={defaultSize}\r\n//             size={size}\r\n//             paneStyle={{\r\n//                 display: \"flex\",\r\n//             }}\r\n//             style={{\r\n//                 height: bodyHeight,\r\n//             }}\r\n//             onDragFinished={(width: number) => {\r\n//                 if (width > 0) {\r\n//                     props.onChangedTextWidth(width);\r\n//                     if (!props.textListIsVisible) {\r\n//                         props.onChangedTextListVisible(true);\r\n//                     }\r\n//                 }\r\n//                 window.dispatchEvent(new Event(\"resize\"));\r\n//             }}\r\n//         >\r\n//             <div className={classnames(...textListClassnames)}>\r\n//                 <Resources />\r\n//             </div>\r\n\r\n//             <TextSheet bodyHeight={bodyHeight} />\r\n//         </SplitPane>\r\n//     </div>\r\n// );\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"EditorContainer---container\",\"interface\":\"EditorContainer---interface\",\"listContainer\":\"EditorContainer---listContainer\",\"showListContainer\":\"EditorContainer---showListContainer\",\"hideListContainer\":\"EditorContainer---hideListContainer\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tab\":\"TextListTab---tab\",\"showTab\":\"TextListTab---showTab\",\"hideTab\":\"TextListTab---hideTab\"};","// @flow\r\nimport React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport styles from \"components/TextList/TextListTab.css\";\r\n\r\ntype Props = {\r\n    textListIsVisible: boolean,\r\n    tabClicked: (e: SyntheticEvent<>) => void\r\n};\r\n\r\nconst TextListTab = (props: Props) => {\r\n    let tabClassnames = [styles.tab];\r\n    if (props.textListIsVisible) {\r\n        tabClassnames.push(styles.hideTab);\r\n    } else {\r\n        tabClassnames.push(styles.showTab);\r\n    }\r\n    return (\r\n        <div\r\n            className={classnames(...tabClassnames)}\r\n            onClick={props.tabClicked}\r\n        >\r\n            Text List\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TextListTab;\r\n","// @flow\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { batchActions } from \"redux-batched-actions\";\r\n\r\nimport { getTextListVisible } from \"reducers\";\r\nimport { changedTextListVisible, changedActiveAnnotation } from \"actions\";\r\n\r\nimport TextListTab from \"components/TextList/TextListTab\";\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        textListIsVisible: getTextListVisible(state)\r\n    };\r\n};\r\n\r\nconst mapStateToDispatch = dispatch => {\r\n    return {\r\n        tabClicked: () => {\r\n            const textListIsVisible = true;\r\n            dispatch(changedTextListVisible(textListIsVisible));\r\n        }\r\n    };\r\n};\r\n\r\nconst TextListTabContainer = connect(mapStateToProps, mapStateToDispatch)(\r\n    TextListTab\r\n);\r\n\r\nexport default TextListTabContainer;\r\n","export { default } from \"./TextList\";\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textsSearchContainer\":\"TextsSearch---textsSearchContainer\",\"textsSearch\":\"TextsSearch---textsSearch\",\"minify\":\"TextsSearch---minify\"};","// @flow\r\nimport React, { useTransition } from \"react\";\r\nimport styles from \"./TextsSearch.css\";\r\nimport * as constants from \"app_constants\";\r\n\r\nimport { injectIntl } from \"react-intl\";\r\nimport Button from \"components/UI/Button\";\r\nimport SearchIcon from \"images/search.svg\";\r\n\r\ntype Props = {\r\n    searchValue: string,\r\n    searchChanged: (searchTerm: string) => void,\r\n    selectedSearchOption?: (e: SyntheticEvent<HTMLSelectElement>) => void,\r\n    minimiseButtonClicked: () => void,\r\n    intl: { formatMessage: ({ [id: string]: string }) => string },\r\n    searchTerm: string,\r\n    textListWidth: number,\r\n};\r\n\r\nconst TextsSearch = (props: Props) => {\r\n    let textInput: { current: null | HTMLInputElement } = React.createRef();\r\n    const [ispending, startTransition] = useTransition();\r\n\r\n    const initiateSearch = (e: SyntheticEvent<HTMLElement>) => {\r\n        e.preventDefault();\r\n        if (textInput.current instanceof HTMLInputElement) {\r\n            const searchTerm = textInput.current.value;\r\n            startTransition(() => {\r\n                props.searchChanged(searchTerm);\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        startTransition(() => {\r\n            if (e.target.value === \"\") {\r\n                props.searchChanged(null);\r\n                return;\r\n            }\r\n            props.searchChanged(e.target.value);\r\n        });\r\n    };\r\n    console.log(props.textListWidth);\r\n    return (\r\n        <div\r\n            className={styles.textsSearchContainer}\r\n            style={{ maxWidth: props.textListWidth }}\r\n        >\r\n            <div className={styles.textsSearch}>\r\n                <form onSubmit={initiateSearch}>\r\n                    <input\r\n                        onChange={handleChange}\r\n                        style={{ outline: \"none\", width: 150 }}\r\n                        type=\"text\"\r\n                        id=\"textSearchInput\"\r\n                        placeholder={props.intl.formatMessage({\r\n                            id: \"leftbar.search\",\r\n                        })}\r\n                        ref={textInput}\r\n                    />\r\n                    <Button\r\n                        backgroundColor=\"#35BF5C\"\r\n                        onClick={initiateSearch}\r\n                        // title={props.intl.formatMessage({\r\n                        //     id: \"leftbar.search\",\r\n                        // })}\r\n                        noBezel={true}\r\n                        icon={<SearchIcon />}\r\n                    />\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default injectIntl(TextsSearch);\r\n","// @flow\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport TextsSearch from \"./TextsSearch\";\r\nimport { changedSearchValue } from \"actions\";\r\nimport type { AppState } from \"reducers\";\r\nimport * as reducers from \"reducers\";\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        searchTerm: reducers.getSearchValue(state),\r\n        searchValue: state.ui.searchValue,\r\n        textListWidth: reducers.getTextListWidth(state),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    // const { dispatch } = dispatchProps;\r\n    // const { selectedText } = stateProps;\r\n    return {\r\n        searchChanged: (searchTerm: string) => {\r\n            dispatch(changedSearchValue(searchTerm));\r\n        },\r\n    };\r\n};\r\n\r\nconst TextsSearchContainer = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TextsSearch);\r\n\r\nexport default TextsSearchContainer;\r\n","// @flow\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport TextList from \"components/TextList\";\r\nimport * as actions from \"actions\";\r\nimport { getSelectedText } from \"reducers\";\r\nimport type { AppState } from \"reducers\";\r\nimport * as api from \"api\";\r\nimport * as reducers from \"reducers\";\r\nimport { batchActions } from \"redux-batched-actions\";\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    const searchValue = reducers.getSearchValue(state);\r\n    const searchResults = reducers.getSearchResults(state, searchValue);\r\n    const selectedSearchResult = reducers.getSelectedSearchResult(state);\r\n    // TODO: display search results or spinner depending on when anything\r\n    // returned\r\n\r\n    let searching = false;\r\n    let texts = state.data.texts;\r\n    if (searchValue.length > 0) {\r\n        if (searchResults === null) {\r\n            searching = true;\r\n            texts = [];\r\n        } else {\r\n            texts = texts.filter((text) =>\r\n                searchResults.hasOwnProperty(text.id)\r\n            );\r\n        }\r\n    }\r\n\r\n    return {\r\n        texts: texts,\r\n        selectedText: getSelectedText(state),\r\n        searchTerm: searchValue,\r\n        searchResults,\r\n        selectedSearchResult,\r\n        searching,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSelectedText: (text: api.TextData) => {\r\n            dispatch(actions.selectedText(text));\r\n        },\r\n        onSelectedSearchResult: (\r\n            text: api.TextData,\r\n            start: number,\r\n            length: number,\r\n            selectedText: api.TextData | null\r\n        ) => {\r\n            if (!selectedText || selectedText.id !== text.id) {\r\n                dispatch(\r\n                    batchActions([\r\n                        actions.selectedSearchResult(text.id, start, length),\r\n                        actions.selectedText(text),\r\n                    ])\r\n                );\r\n            } else {\r\n                dispatch(actions.selectedSearchResult(text.id, start, length));\r\n            }\r\n        },\r\n        onSearchText: (text: api.TextData, searchTerm: string) => {\r\n            dispatch(actions.searchedText(text.id, searchTerm));\r\n        },\r\n    };\r\n};\r\n\r\nconst TextListContainer = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TextList);\r\n\r\nexport default TextListContainer;\r\n","export default __webpack_public_path__ + \"8967124136190c7842d863e4a862a528.png\";","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref =\n/*#__PURE__*/\n\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M9 2C5.146 2 2 5.146 2 9s3.146 7 7 7a6.959 6.959 0 004.574-1.719l.426.426V16l6 6 2-2-6-6h-1.293l-.426-.426A6.959 6.959 0 0016 9c0-3.854-3.146-7-7-7zm0 2c2.773 0 5 2.227 5 5s-2.227 5-5 5-5-2.227-5-5 2.227-5 5-5z\"\n});\n\nvar SvgSearch = function SvgSearch(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24\n  }, props), _ref);\n};\n\nexport default SvgSearch;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAGA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AANA;AASA;AAEA;AADA;AAIA;AACA;AACA;AAAA;AAAA;AARA;AAWA;AACA;AACA;AAHA;AAMA;AAEA;AADA;AAIA;AACA;AACA;AAAA;AAAA;AARA;AAYA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AACA;AALA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;AALA;AADA;AAUA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAUA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;ACpMA;AACA;;;;;;;;;;;ACDA;AACA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAFA;AAOA;AACA;AACA;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAIA;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAWA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;AAWA;AACA;AAEA;AACA;AALA;AAMA;AACA;AAPA;AAaA;AACA;AACA;;;;;;;;;;;;AC1EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAKA;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAyBA;AACA;AACA;AAKA;;;;;;;;;;;;AC1EA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}