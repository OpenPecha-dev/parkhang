{"version":3,"file":"31.parkhang-dev.js","sources":["webpack://parkhang/./app/components/TextDetail/TableOfContent/TableOfContent.css","webpack://parkhang/./app/components/TextDetail/TableOfContent/TableOfContent.js","webpack://parkhang/./app/components/TextDetail/TextDetail.css","webpack://parkhang/./app/components/TextDetail/TextDetail.js","webpack://parkhang/./app/components/TextDetail/TextDetailHeadingContainer.js","webpack://parkhang/./app/lib/text_splitters/positionSplitter.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TableContent\":\"TableOfContent---TableContent\"};","import React from \"react\";\r\nimport { Box, ClickAwayListener, Typography } from \"@mui/material\";\r\nimport Loader from \"react-loader\";\r\nimport styles from \"./TableOfContent.css\";\r\nimport { styled, alpha } from \"@mui/material/styles\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport InputBase from \"@mui/material/InputBase\";\r\nimport Toolbar from \"@mui/material/Toolbar\";\r\nconst Search = styled(\"div\")(({ theme }) => ({\r\n    position: \"relative\",\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n    \"&:hover\": {\r\n        backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n        marginLeft: theme.spacing(1),\r\n        width: \"auto\",\r\n    },\r\n}));\r\n\r\nconst SearchIconWrapper = styled(\"div\")(({ theme }) => ({\r\n    padding: theme.spacing(0, 2),\r\n    height: \"100%\",\r\n    position: \"absolute\",\r\n    pointerEvents: \"none\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n}));\r\n\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n    color: \"inherit\",\r\n    \"& .MuiInputBase-input\": {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n        transition: theme.transitions.create(\"width\"),\r\n        width: \"100%\",\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: \"0\",\r\n            cursor: \"pointer\",\r\n            \"&:focus\": {\r\n                width: \"20ch\",\r\n            },\r\n        },\r\n    },\r\n}));\r\n\r\nfunction TableOfContent() {\r\n    let data = [\r\n        { Id: 1, Title: \"chapter 1\", segment_id: 0 },\r\n        { Id: 2, Title: \"chapter 2\", segment_id: 400 },\r\n    ];\r\n    let loaded = data.length > 0 ? true : false;\r\n\r\n    return (\r\n        <Box\r\n            className={styles.TableContent}\r\n            sx={{\r\n                bgcolor: \"heading.main\",\r\n                color: \"text.primary\",\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                paddingInline: 2,\r\n            }}\r\n        >\r\n            <Toolbar\r\n                sx={{\r\n                    justifyContent: \"space-between\",\r\n                    paddingLeft: \"0 !important\",\r\n                    margin: 0,\r\n                }}\r\n            >\r\n                <Typography textTransform={\"uppercase\"} component=\"h6\">\r\n                    Table Of Content\r\n                </Typography>\r\n                <Search>\r\n                    <SearchIconWrapper>\r\n                        <SearchIcon />\r\n                    </SearchIconWrapper>\r\n                    <StyledInputBase\r\n                        placeholder=\"Search…\"\r\n                        inputProps={{ \"aria-label\": \"search\" }}\r\n                    />\r\n                </Search>\r\n            </Toolbar>\r\n            {/* <Loader loaded={loaded} /> */}\r\n            <Box>\r\n                {data.map((list, index) => {\r\n                    return (\r\n                        <Box\r\n                            key={\"TableContent-\" + index}\r\n                            sx={{\r\n                                cursor: \"pointer\",\r\n                                width: \"fit-content\",\r\n                                \"&:hover\": {\r\n                                    fontWeight: \"bold\",\r\n                                },\r\n                            }}\r\n                        >\r\n                            {list.Title}\r\n                        </Box>\r\n                    );\r\n                })}\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default React.memo(TableOfContent);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"textDetail\":\"TextDetail---textDetail\",\"textContainer\":\"TextDetail---textContainer\",\"tableContent\":\"TextDetail---tableContent\"};","// @flow\r\nimport React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport imageStyle from \"components/MediaComponent/Image.css\";\r\n\r\nimport Loader from \"react-loader\";\r\nimport AnnotationControlsContainer from \"./AnnotationControlsContainer\";\r\nimport SplitText from \"lib/SplitText\";\r\nimport Annotation from \"lib/Annotation\";\r\nimport Witness from \"lib/Witness\";\r\nimport AnnotatedText from \"lib/AnnotatedText\";\r\nimport lengthSplitter from \"lib/text_splitters/lengthSplitter\";\r\nimport positionSplitter from \"lib/text_splitters/positionSplitter\";\r\nimport headerStyles from \"components/Header/Header.css\";\r\nimport styles from \"./TextDetail.css\";\r\nimport utilStyles from \"css/util.css\";\r\nimport type { TextData } from \"api\";\r\nimport TextSegment from \"lib/TextSegment\";\r\nimport TextDetailHeadingContainer from \"./TextDetailHeadingContainer\";\r\nimport { Box, ClickAwayListener, Divider, Slide } from \"@mui/material\";\r\nimport _ from \"lodash\";\r\nimport TableOfContent from \"./TableOfContent/TableOfContent\";\r\n\r\nimport SplitTextComponent from \"components/TextDetail/SplitText\";\r\n\r\nexport type Props = {\r\n    condition: Boolean,\r\n    paginated: boolean,\r\n    pageImagesVisible: boolean,\r\n    text: TextData | null,\r\n    loading: boolean,\r\n    pageBreaks: number[],\r\n    annotatedText: AnnotatedText,\r\n    annotations: Annotation[],\r\n    activeAnnotations: Annotation[],\r\n    activeAnnotation: Annotation | null,\r\n    didSelectSegmentIds: (segmentIds: string[]) => void,\r\n    selectedSegmentId: (segmentId: string) => void,\r\n    annotationPositions: { [string]: Annotation[] },\r\n    selectedAnnotatedSegments: Array<TextSegment | number>,\r\n    textListVisible: boolean,\r\n    imagesBaseUrl: string,\r\n    selectedWitness: Witness | null,\r\n    selectedSearchResult: {\r\n        textId: number,\r\n        start: number,\r\n        length: number,\r\n    } | null,\r\n    searchValue: string | null,\r\n    fontSize: number,\r\n    isSecondWindowOpen: Boolean,\r\n    imageData: {},\r\n    isPanelLinked: boolean,\r\n    isPanelVisible: Boolean,\r\n    changeSyncIdOnClick: () => void,\r\n    changeScrollToId: () => void,\r\n    changeSelectedImage: () => void,\r\n    closeAnnotation: () => void,\r\n    textAlignmentById: {},\r\n    selectedWindow: Number,\r\n    changeSelectedWindow: () => void,\r\n    changeSelectedRange: [],\r\n    scrollToId: {},\r\n    selectedSourceRange: [],\r\n    selectedTargetRange: [],\r\n    searchResults: [],\r\n    changeShowTableContent: () => void,\r\n    showTableContent: Boolean,\r\n    syncIdOnSearch: String,\r\n    imageAlignmentById: [],\r\n    changeImageScrollId: () => void,\r\n    imageScrollId: {},\r\n};\r\n\r\nlet textDetailId = 0;\r\n\r\nclass TextDetail extends React.Component<Props> {\r\n    key: number;\r\n    ref;\r\n    selectedWindow;\r\n    constructor() {\r\n        super();\r\n        this.key = textDetailId++;\r\n        this.ref = React.createRef();\r\n        this.selectedWindow = null;\r\n    }\r\n\r\n    mouseEnter() {\r\n        if (this.selectedWindow === 2) this.props.changeSelectedWindow(1);\r\n    }\r\n    componentDidMount() {\r\n        this.ref.current.addEventListener(\r\n            \"mouseenter\",\r\n            this.mouseEnter.bind(this)\r\n        );\r\n    }\r\n    componentDidUpdate() {\r\n        this.selectedWindow = this.props.selectedWindow;\r\n    }\r\n\r\n    render() {\r\n        let text = {\r\n            name: \"\",\r\n        };\r\n        if (this.props.text) {\r\n            text = this.props.text;\r\n        }\r\n        let inlineControls = false;\r\n        let textComponent = null;\r\n        let splitText = null;\r\n        if (\r\n            !this.props.annotatedText ||\r\n            !this.props.text ||\r\n            this.props.loading\r\n        ) {\r\n            textComponent = <div key={this.key} />;\r\n        } else {\r\n            let limitWidth = false;\r\n            let splitter;\r\n            if (this.props.paginated) {\r\n                splitter = positionSplitter(this.props.pageBreaks);\r\n            } else {\r\n                splitter = lengthSplitter(1000, /^།[\\s]+(?!།[\\s]+)/, 2, 5);\r\n            }\r\n\r\n            splitText = new SplitText(this.props.annotatedText, splitter);\r\n\r\n            inlineControls = true;\r\n            textComponent = (\r\n                <SplitTextComponent\r\n                    splitText={splitText}\r\n                    annotations={this.props.annotations}\r\n                    activeAnnotations={this.props.activeAnnotations}\r\n                    activeAnnotation={this.props.activeAnnotation}\r\n                    limitWidth={limitWidth}\r\n                    didSelectSegmentIds={this.props.didSelectSegmentIds}\r\n                    selectedSegmentId={this.props.selectedSegmentId}\r\n                    annotationPositions={this.props.annotationPositions}\r\n                    selectedAnnotatedSegments={\r\n                        this.props.selectedAnnotatedSegments\r\n                    }\r\n                    syncIdOnClick={this.props.syncIdOnClick}\r\n                    textListVisible={this.props.textListVisible}\r\n                    showImages={this.props.pageImagesVisible}\r\n                    // showImages={this.props.selectedMedia.isImageVisible}\r\n                    imagesBaseUrl={this.props.imagesBaseUrl}\r\n                    selectedWitness={this.props.selectedWitness}\r\n                    selectedWitness2={this.props.selectedWitness2}\r\n                    key={this.key}\r\n                    selectedSearchResult={this.props.selectedSearchResult}\r\n                    searchValue={this.props.searchValue}\r\n                    fontSize={this.props.fontSize}\r\n                    isSecondWindowOpen={this.props.isSecondWindowOpen}\r\n                    changeScrollToId={this.props.changeScrollToId}\r\n                    changeSyncIdOnClick={this.props.changeSyncIdOnClick}\r\n                    imageData={this.props.imageData}\r\n                    isPanelLinked={this.props.isPanelLinked}\r\n                    selectedImage={this.props.selectedImage}\r\n                    changeSelectedImage={this.props.changeSelectedImage}\r\n                    isAnnotating={this.props.isAnnotating}\r\n                    closeAnnotation={this.props.closeAnnotation}\r\n                    textAlignment={this.props.textAlignment}\r\n                    textAlignmentById={this.props.textAlignmentById}\r\n                    isPanelVisible={this.props.isPanelVisible}\r\n                    scrollToId={this.props.scrollToId}\r\n                    selectedWindow={this.selectedWindow}\r\n                    selectedSourceRange={this.props.selectedSourceRange}\r\n                    selectedTargetRange={this.props.selectedTargetRange}\r\n                    changeSelectedRange={this.props.changeSelectedRange}\r\n                    searchResults={this.props.searchResults}\r\n                    showTableContent={this.props.showTableContent}\r\n                    selectedText={this.props.text}\r\n                    syncIdOnSearch={this.props.syncIdOnSearch}\r\n                    imageAlignmentById={this.props.imageAlignmentById}\r\n                    changeImageScrollId={this.props.changeImageScrollId}\r\n                    imageScrollId={this.props.imageScrollId}\r\n                    condition={this.props.condition}\r\n                />\r\n            );\r\n        }\r\n        let textComponents = [textComponent];\r\n        return (\r\n            <Box\r\n                sx={{\r\n                    height: \"100%\",\r\n                    flex: 1,\r\n                    bgcolor: \"navbar.main\",\r\n                    color: \"texts.main\",\r\n                }}\r\n                className={classnames(\r\n                    styles.textDetail,\r\n                    utilStyles.flex,\r\n                    utilStyles.flexColumn\r\n                )}\r\n                key={this.key}\r\n                ref={this.ref}\r\n            >\r\n                <TextDetailHeadingContainer />\r\n                <Divider />\r\n                <Loader loaded={!this.props.loading} zIndex={5} />\r\n                <Box\r\n                    style={{\r\n                        display: \"flex\",\r\n                        height: \"100%\",\r\n                        width: \"100%\",\r\n                        position: \"relative\",\r\n                    }}\r\n                >\r\n                    <Box\r\n                        style={{ flex: 1 }}\r\n                        className={classnames(\r\n                            styles.textContainer,\r\n                            utilStyles.flex\r\n                        )}\r\n                    >\r\n                        {!this.props.loading ? textComponents : <div />}\r\n                    </Box>\r\n\r\n                    <Slide\r\n                        direction=\"left\"\r\n                        in={this.props.showTableContent}\r\n                        container={this.ref.current}\r\n                        unmountOnExit\r\n                        mountOnEnter\r\n                    >\r\n                        <Box\r\n                            sx={{\r\n                                position: \"absolute\",\r\n                                height: \"100%\",\r\n                                minWidth: \"50%\",\r\n                                right: 0,\r\n                            }}\r\n                        >\r\n                            <TableOfContent />\r\n                        </Box>\r\n                    </Slide>\r\n                </Box>\r\n            </Box>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TextDetail;\r\n","// @flow\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport TextDetailHeading from \"./TextDetailHeading\";\r\nimport * as actions from \"actions\";\r\nimport * as reducers from \"reducers\";\r\nimport type { AppState } from \"reducers\";\r\n\r\nconst mapStateToProps = (state: AppState): {} => {\r\n    const selectedText = reducers.getSelectedText(state);\r\n    const selectedText2 = reducers.getSelectedText2(state);\r\n    let witnesses = [];\r\n    let exportingWitness = false;\r\n    let selectedWitness;\r\n    let selectedWitness2;\r\n\r\n    if (selectedText) {\r\n        witnesses = reducers.getTextWitnesses(state, selectedText.id);\r\n        const selectedWitnessId = reducers.getSelectedTextWitnessId(\r\n            state,\r\n            selectedText.id\r\n        );\r\n        if (selectedWitnessId) {\r\n            selectedWitness = reducers.getWitness(state, selectedWitnessId);\r\n            exportingWitness = reducers.getExportingWitness(\r\n                state,\r\n                selectedWitnessId\r\n            );\r\n        } else {\r\n            selectedWitness = reducers.getWorkingWitness(\r\n                state,\r\n                selectedText.id\r\n            );\r\n        }\r\n    }\r\n\r\n    if (selectedText2) {\r\n        // witnesses = reducers.getTextWitnesses(state, selectedText2.id);\r\n        const selectedWitnessId2 = reducers.getSelectedTextWitnessId2(\r\n            state,\r\n            selectedText2.id\r\n        );\r\n        if (selectedWitnessId2) {\r\n            selectedWitness2 = reducers.getWitness2(state, selectedWitnessId2);\r\n        } else {\r\n            selectedWitness2 = reducers.getWorkingWitness2(\r\n                state,\r\n                selectedText2.id\r\n            );\r\n        }\r\n    }\r\n\r\n    let textFontSize = reducers.getTextFontSize(state);\r\n    let searchValue = reducers.getSearchValue(state);\r\n    return {\r\n        witnesses,\r\n        selectedText,\r\n        selectedText2,\r\n        selectedWitness,\r\n        selectedWitness2,\r\n        textFontSize,\r\n        exportingWitness,\r\n        searchValue,\r\n        showTableContent: reducers.getShowTableContent(state),\r\n        searchResults: reducers.getSearchResults(state, searchValue),\r\n    };\r\n};\r\n\r\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\r\n    const navigationButtonClicked = () => {\r\n        dispatchProps.dispatch(\r\n            actions.changedTextListVisible(!stateProps.textListIsVisible)\r\n        );\r\n    };\r\n\r\n    const { dispatch } = dispatchProps;\r\n    const { selectedText } = stateProps;\r\n\r\n    return {\r\n        ...ownProps,\r\n        ...stateProps,\r\n        navigationButtonClicked,\r\n        onSelectedWitness: (witness: Witness) => {\r\n            dispatch(\r\n                actions.selectedTextWitness(selectedText?.id, witness?.id)\r\n            );\r\n        },\r\n        onChangedFontSize: (fontSize: number) => {\r\n            dispatch(actions.changedTextFontSize(fontSize));\r\n        },\r\n        onChangeWindowOpen: (data: boolean, textId) => {\r\n            dispatch(actions.toggleSecondWindow(data, textId));\r\n        },\r\n        onExport: () => {\r\n            dispatch(\r\n                actions.exportWitness(stateProps.selectedWitness.id, \"docx\")\r\n            );\r\n        },\r\n        navigationButtonClicked: () => {\r\n            dispatch(\r\n                actions.changedTextListVisible(!stateProps.textListIsVisible)\r\n            );\r\n        },\r\n\r\n        changeIsAnnotating: (payload) => {\r\n            dispatch(actions.changeIsAnnotating(payload));\r\n            if (payload === false) {\r\n                const dismissTextAnnotation =\r\n                    actions.changedActiveTextAnnotation(null);\r\n                dispatch(dismissTextAnnotation);\r\n                dispatch(actions.changedActiveTextAnnotation(null));\r\n            }\r\n        },\r\n        searchChanged: (searchTerm: string) => {\r\n            dispatch(actions.changedSearchValue(searchTerm));\r\n        },\r\n        changeShowTableContent: (payload) => {\r\n            dispatch(actions.showTableContent(payload));\r\n        },\r\n        changeSelectSyncId: (payload) => {\r\n            dispatch(actions.changeSyncIdOnSearch(payload));\r\n        },\r\n    };\r\n};\r\n\r\nconst TextDetailHeadingContainer = connect(\r\n    mapStateToProps,\r\n    null,\r\n    mergeProps\r\n)(TextDetailHeading);\r\n\r\nexport default TextDetailHeadingContainer;\r\n","// @flow\r\nimport type { Splitter } from \"lib/SplitText\";\r\n\r\n/**\r\n * Returns a function that accepts a string but simply\r\n * returns the initial array of positions passed to it.\r\n *\r\n * @param positions - The positions where a string should be split\r\n */\r\nexport default function positionSplitter(positions: number[]): Splitter {\r\n    const newPositions = [...positions];\r\n    if (newPositions[0] === 0) {\r\n        newPositions.shift();\r\n    }\r\n    return string => newPositions;\r\n}\r\n"],"mappings":";;;;;;;;;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AARA;AAUA;AACA;AAFA;AATA;AAeA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAUA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AADA;AAHA;AARA;AAAA;AACA;AAiBA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAAA;AAQA;AACA;AAAA;AAAA;AAFA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AAFA;AAaA;AAIA;AACA;AACA;;;;;;;;;;;AChHA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAmDA;AACA;AACA;;;;;AAIA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAJA;AAKA;AACA;;;AACA;AACA;AACA;;;AACA;AACA;AAIA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/CA;AAkDA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAKA;AACA;AAbA;AAiBA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;AAAA;AAAA;AACA;AAFA;AAWA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AAJA;AADA;AAcA;;;;AAnKA;AACA;AAqKA;;;;;;;;;;;;;;;;;;;;;;;;;ACjPA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAnBA;AAqBA;AAGA;AAGA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;AChIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;A","sourceRoot":""}