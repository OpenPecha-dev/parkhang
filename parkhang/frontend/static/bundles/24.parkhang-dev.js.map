{"version":3,"file":"24.parkhang-dev.js","sources":["webpack://parkhang/./app/components/TextDetail2/HeaderMenu/HighlightedString.js","webpack://parkhang/./app/components/TextDetail2/HeaderMenu/Refresh.js","webpack://parkhang/./app/components/TextDetail2/HeaderMenu/Search.js","webpack://parkhang/./app/components/TextDetail2/HeaderMenu/SearchList.js","webpack://parkhang/./app/components/TextDetail2/HeaderMenu/SearchStyle.css","webpack://parkhang/./app/components/TextDetail2/HeaderMenu/TableOfContent.js","webpack://parkhang/./app/components/TextDetail2/SelectVersion.css","webpack://parkhang/./app/components/TextDetail2/SelectVersion.js","webpack://parkhang/./app/components/TextDetail2/TextDetailHeading.js","webpack://parkhang/./app/components/TextDetail2/TextList.css","webpack://parkhang/./app/components/TextDetail2/TextList.js","webpack://parkhang/./app/components/TextDetail2/TextListContainer.js","webpack://parkhang/./app/components/TextDetail2/textDetailHeading.css","webpack://parkhang/./app/images/options.svg"],"sourcesContent":["// @flow\r\nimport * as React from \"react\";\r\nimport GraphemeSplitter from \"grapheme-splitter\";\r\nimport reactStringReplace from \"react-string-replace\";\r\n\r\ntype Props = {\r\n    string: string,\r\n    highlightClass: string,\r\n    stringClass?: string,\r\n    searchTerm?: string\r\n};\r\n\r\nexport default class HighlightedString extends React.Component<Props> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const string = this.props.string;\r\n        let nameHtml = string;\r\n        let stringClass = this.props.stringClass || \"\";\r\n        if (this.props.searchTerm) {\r\n            const searchTerm = this.props.searchTerm;\r\n            const splitter = new GraphemeSplitter();\r\n            const graphemes = splitter.splitGraphemes(string);\r\n            const start = string.indexOf(searchTerm);\r\n            const end = start + searchTerm.length;\r\n            let position = 0;\r\n            let foundGraphemes = \"\";\r\n            if (start > -1) {\r\n                for (let i = 0; i < graphemes.length; i++) {\r\n                    let grapheme = graphemes[i];\r\n                    if (position >= start && position < end) {\r\n                        foundGraphemes += grapheme;\r\n                    }\r\n                    position += grapheme.length;\r\n                }\r\n            }\r\n            if (foundGraphemes.length > 0) {\r\n                nameHtml = reactStringReplace(\r\n                    string,\r\n                    foundGraphemes,\r\n                    (match, i) => (\r\n                        <span className={this.props.highlightClass} key={`highlight-${i}`}>\r\n                            {match}\r\n                        </span>\r\n                    )\r\n                );\r\n            }\r\n        }\r\n        return <span className={stringClass}>{nameHtml}</span>;\r\n    }\r\n}\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport RefreshIcon from \"@mui/icons-material/Refresh\";\r\nimport { IconButton } from \"@mui/material\";\r\nfunction Refresh({ isSecondWindowOpen }) {\r\n    const handleRefresh = useCallback(() => {\r\n        let updatelistBtn2 = document.getElementById(\"updateList2\");\r\n\r\n        if (updatelistBtn2) updatelistBtn2.click();\r\n    }, [isSecondWindowOpen]);\r\n\r\n    useEffect(() => {\r\n        let timer = setTimeout(() => {\r\n            handleRefresh();\r\n        }, 500);\r\n        return () => clearTimeout(timer);\r\n    }, [isSecondWindowOpen]);\r\n\r\n    return (\r\n        <IconButton variant=\"text\" size=\"small\" onClick={handleRefresh}>\r\n            <RefreshIcon />\r\n        </IconButton>\r\n    );\r\n}\r\n\r\nexport default Refresh;\r\n","import React from \"react\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport { IconButton } from \"@mui/material\";\r\n\r\nfunction Search({ handleWindowSearch }) {\r\n    return (\r\n        <IconButton size=\"small\" variant=\"text\" onClick={handleWindowSearch}>\r\n            <SearchIcon />\r\n        </IconButton>\r\n    );\r\n}\r\n\r\nexport default Search;\r\n","import React, { useRef } from \"react\";\r\nimport {\r\n    AutoSizer,\r\n    CellMeasurer,\r\n    CellMeasurerCache,\r\n    List,\r\n} from \"react-virtualized\";\r\nimport HighlightedString from \"./HighlightedString\";\r\nimport styles from \"./SearchStyle.css\";\r\n\r\nfunction SearchList(props) {\r\n    const { handleListItemClick, searchValue, results, selectedText } = props;\r\n    let listRef = useRef();\r\n    let cache = useRef(\r\n        new CellMeasurerCache({\r\n            fixedWidth: true,\r\n            defaultHeight: 100,\r\n        })\r\n    );\r\n    let rowRenderer = ({ key, index, parent, style }) => {\r\n        let result = results[index];\r\n        return (\r\n            <CellMeasurer\r\n                key={`listkeys2-${key}`}\r\n                cache={cache.current}\r\n                parent={parent}\r\n                columnIndex={0}\r\n                rowIndex={index}\r\n            >\r\n                <div style={style}>\r\n                    {results.length > 0 && (\r\n                        <div\r\n                            className={styles.searchListItem}\r\n                            onClick={() => handleListItemClick(result[0])}\r\n                        >\r\n                            <HighlightedString\r\n                                string={result[1]}\r\n                                highlightClass={styles.highlight}\r\n                                searchTerm={searchValue}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </CellMeasurer>\r\n        );\r\n    };\r\n\r\n    if (!results) return null;\r\n    return (\r\n        <>\r\n            <AutoSizer>\r\n                {({ height, width }) => (\r\n                    <List\r\n                        ref={listRef}\r\n                        height={height}\r\n                        rowCount={results?.length}\r\n                        rowHeight={cache.current.rowHeight}\r\n                        deferredMeasurementCache={cache.current}\r\n                        rowRenderer={rowRenderer}\r\n                        width={width}\r\n                        overscanRowCount={1}\r\n                    ></List>\r\n                )}\r\n            </AutoSizer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SearchList;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"highlight\":\"SearchStyle---highlight\",\"searchListItem\":\"SearchStyle---searchListItem\"};","import React from \"react\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\nimport ClearIcon from \"@mui/icons-material/Clear\";\r\n\r\nfunction TableOfContent(props) {\r\n    const handleClick = () => {\r\n        props.changeShowTableContent(!props.showTableContent);\r\n    };\r\n    return (\r\n        <React.Fragment key=\"right\">\r\n            <IconButton onClick={handleClick}>\r\n                {props.showTableContent ? <ClearIcon /> : <MenuIcon />}\r\n            </IconButton>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default TableOfContent;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-tint\":\"#88af8e\",\"blue-tint\":\"#024279\",\"active-button\":\"#00746b\",\"mainTint\":\"#024279\",\"activeButton\":\"#00746b\",\"selectVersion\":\"SelectVersion---selectVersion\",\"selectEmpty\":\"SelectVersion---selectEmpty\",\"selectOptions\":\"SelectVersion---selectOptions\",\"styled-select\":\"SelectVersion---styled-select\"};","// @flow\r\nimport React, { useState, useEffect, memo, useLayoutEffect } from \"react\";\r\nimport _ from \"lodash\";\r\nimport { FormattedMessage, injectIntl } from \"react-intl\";\r\nimport styles from \"./SelectVersion.css\";\r\nimport Witness from \"lib/Witness\";\r\nimport { NativeSelect } from \"@mui/material\";\r\n\r\nexport type Props = {\r\n    witnesses: Witness[],\r\n    activeWitness: Witness | null,\r\n    onSelectedWitness: (witness: Witness) => void,\r\n    user: {},\r\n};\r\n\r\nconst SelectVersion = (props: Props) => {\r\n    let witnesses = [];\r\n    let tabName = \"\";\r\n    let r = \"\";\r\n    let classes = [];\r\n    if (props.witnesses) {\r\n        witnesses = props.witnesses.map((witness) => witness);\r\n        if (props.activeWitness)\r\n            r = props.witnesses.findIndex(\r\n                (l) => l.id === props.activeWitness.id\r\n            );\r\n        witnesses.sort((a, b) => {\r\n            if (a.isWorking) {\r\n                return -1;\r\n            }\r\n            if (b.isWorking) {\r\n                return 1;\r\n            }\r\n            if (a.isBase) {\r\n                return -1;\r\n            }\r\n            if (b.isBase) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n        witnesses = witnesses.sort((a, b) => a.id - b.id);\r\n    }\r\n\r\n    const handleChangeWitness = (e) => {\r\n        if (!_.isEmpty(witnesses)) {\r\n            props.onSelectedWitness(witnesses[e.target.value]);\r\n        }\r\n    };\r\n\r\n    if (_.isEmpty(witnesses) && !props.activeWitness) return null;\r\n\r\n    return (\r\n        <NativeSelect\r\n            onChange={handleChangeWitness}\r\n            className={styles.selectVersion}\r\n            value={r}\r\n            label=\"Version2\"\r\n            classes={{\r\n                root: styles.selectEmpty,\r\n                select: styles.selectOptions,\r\n            }}\r\n        >\r\n            {witnesses.map((witness, key) => {\r\n                if (witness.id === props.activeWitness?.id)\r\n                    classes.push(styles.selected);\r\n                tabName = witness.source.name;\r\n\r\n                if (witness.isWorking) {\r\n                    tabName =\r\n                        props.intl.locale === \"en\"\r\n                            ? props.user.name === \"User\"\r\n                                ? \"Working\"\r\n                                : \"My Edition\"\r\n                            : \"མཉམ་འབྲེལ་པར་མ།\";\r\n                }\r\n\r\n                return (\r\n                    <option\r\n                        key={`versionSelect2-${key}`}\r\n                        value={key}\r\n                        className={styles.selectOptions}\r\n                    >\r\n                        {tabName}\r\n                    </option>\r\n                );\r\n            })}\r\n        </NativeSelect>\r\n    );\r\n};\r\n\r\nexport default memo(injectIntl(SelectVersion));\r\n","import React, { useState, useCallback, useRef, useEffect } from \"react\";\r\nimport styles from \"./textDetailHeading.css\";\r\nimport SelectVersion from \"./SelectVersion\";\r\nimport Slider from \"../UI/Slider\";\r\nimport TextListContainer from \"./TextListContainer\";\r\nimport OptionsIcon from \"images/options.svg\";\r\nimport Settings from \"./HeaderMenu/Settings\";\r\nimport Search from \"./HeaderMenu/Search\";\r\nimport TableOfContent from \"./HeaderMenu/TableOfContent\";\r\nimport _ from \"lodash\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\n\r\nimport {\r\n    Stack,\r\n    Box,\r\n    TextField,\r\n    Button,\r\n    Collapse,\r\n    Divider,\r\n    ButtonGroup,\r\n    ListItem,\r\n    List,\r\n    IconButton,\r\n} from \"@mui/material\";\r\nimport Refresh from \"./HeaderMenu/Refresh\";\r\n\r\nimport SearchList from \"./HeaderMenu/SearchList\";\r\ntype HeaderProps = {\r\n    user: {},\r\n    textFontSize: Number,\r\n    onChangedFontSize: () => void,\r\n    searchResults: [],\r\n};\r\n\r\nfunction TextDetailHeading(props: HeaderProps) {\r\n    const [findvalue, setfindvalue] = useState(\"\");\r\n    let [showFind, setShowFind] = useState(false);\r\n    let [visible, setVisible] = useState(false);\r\n\r\n    const inputRef = useRef();\r\n    const headingRef = useRef();\r\n    const handleListItemClick = (id) => {\r\n        props.changeSelectSyncId(id);\r\n    };\r\n    const debouncedSearch = React.useRef(\r\n        _.debounce((s) => {\r\n            props.searchChanged(s);\r\n        }, 1000)\r\n    ).current;\r\n    const handleSearch = useCallback(\r\n        (e) => {\r\n            e.preventDefault();\r\n            debouncedSearch(findvalue);\r\n            setVisible(true);\r\n        },\r\n        [findvalue]\r\n    );\r\n\r\n    const handleWindowSearch = useCallback(() => {\r\n        setShowFind(!showFind);\r\n    }, [showFind]);\r\n\r\n    useEffect(() => {\r\n        if (showFind === true) {\r\n            inputRef.current.focus();\r\n        }\r\n\r\n        if (showFind === false) debouncedSearch(null);\r\n    }, [showFind]);\r\n\r\n    const closeSearchItemBox = () => {\r\n        setVisible(false);\r\n        debouncedSearch(null);\r\n        setfindvalue(\"\");\r\n    };\r\n\r\n    let condition =\r\n        _.isObject(props.searchResults) &&\r\n        props.searchResults.hasOwnProperty(props.selectedText.id);\r\n    let results = condition\r\n        ? props.searchResults[props.selectedText.id].results\r\n        : [];\r\n    return (\r\n        <Stack\r\n            direction=\"column\"\r\n            ref={headingRef}\r\n            spacing={1}\r\n            sx={{\r\n                paddingInline: { md: 2, xs: 0 },\r\n                paddingBlock: { md: 1, xs: 0 },\r\n                borderTop: { md: 0, xs: \"1px solid gray\" },\r\n                bgcolor: \"heading.main\",\r\n                color: \"text.primary\",\r\n            }}\r\n        >\r\n            {\" \"}\r\n            <Stack direction=\"row\" spacing={1} justifyContent=\"space-between\">\r\n                <Box\r\n                    sx={{\r\n                        display: \"flex\",\r\n                        gap: { md: 2, sx: 0 },\r\n                        flexDirection: { md: \"row\", xs: \"column\" },\r\n                    }}\r\n                >\r\n                    <TextListContainer />\r\n                    <SelectVersion\r\n                        witnesses={props.witnesses}\r\n                        activeWitness={props.selectedWitness}\r\n                        onSelectedWitness={props.onSelectedWitness}\r\n                        user={props.user}\r\n                    />\r\n                </Box>\r\n\r\n                <ButtonGroup\r\n                    size=\"small\"\r\n                    aria-label=\"small button group\"\r\n                    sx={{\r\n                        position: \"relative\",\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                        height: \"fit-content\",\r\n                        width: \"fit-content\",\r\n                        border: (theme) => `1px solid ${theme.palette.divider}`,\r\n                        borderRadius: 1,\r\n                        bgcolor: \"background.paper\",\r\n                        color: \"text.secondary\",\r\n                        \"& svg\": {\r\n                            m: 1.5,\r\n                        },\r\n                        \"& hr\": {\r\n                            mx: 0.5,\r\n                        },\r\n                    }}\r\n                    className={styles.button_group_menu}\r\n                >\r\n                    <Refresh isSecondWindowOpen={props.isSecondWindowOpen} />\r\n\r\n                    <Search handleWindowSearch={handleWindowSearch} />\r\n                    <Settings\r\n                        textFontSize={props.textFontSize}\r\n                        onChangedFontSize={props.onChangedFontSize}\r\n                        onExport={props.onExport}\r\n                        isPanelLinked={props.isPanelLinked}\r\n                    />\r\n                    <TableOfContent\r\n                        changeShowTableContent={props.changeShowTableContent}\r\n                        showTableContent={props.showTableContent}\r\n                    />\r\n                </ButtonGroup>\r\n            </Stack>\r\n            <Collapse in={showFind} mountOnEnter unmountOnExit>\r\n                <form onSubmit={handleSearch}>\r\n                    <Stack direction=\"row\" spacing={2} position=\"relative\">\r\n                        <TextField\r\n                            hiddenLabel\r\n                            id=\"filled-hidden-label-small\"\r\n                            inputProps={{\r\n                                style: {\r\n                                    height: 25,\r\n                                    padding: \"0 14px\",\r\n                                },\r\n                            }}\r\n                            style={{ height: 25, flex: 1 }}\r\n                            fullWidth\r\n                            inputRef={inputRef}\r\n                            value={findvalue}\r\n                            onChange={(e) => setfindvalue(e.target.value)}\r\n                        />\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            onClick={handleSearch}\r\n                            style={{ height: 25 }}\r\n                        >\r\n                            Search\r\n                        </Button>\r\n                        {props.searchResults && visible && (\r\n                            <Box\r\n                                sx={{\r\n                                    position: \"absolute\",\r\n                                    top: 35,\r\n                                    right: 0,\r\n                                    zIndex: 1,\r\n                                    bgcolor: \"heading.main\",\r\n                                    width: 350,\r\n                                    height: 350,\r\n                                    boxShadow: 3,\r\n                                    overflowX: \"hidden\",\r\n                                    boxShadow: 3,\r\n                                }}\r\n                            >\r\n                                {results.length === 0 && (\r\n                                    <p>no such word present</p>\r\n                                )}\r\n                                {condition && results.length > 0 && (\r\n                                    <SearchList\r\n                                        handleListItemClick={\r\n                                            handleListItemClick\r\n                                        }\r\n                                        searchValue={props.searchValue}\r\n                                        results={results}\r\n                                        selectedText={props.selectedText}\r\n                                    />\r\n                                )}\r\n                                <IconButton\r\n                                    aria-label=\"closeButton\"\r\n                                    onClick={closeSearchItemBox}\r\n                                    size=\"small\"\r\n                                    sx={{\r\n                                        right: 15,\r\n                                        top: 0,\r\n                                        position: \"absolute\",\r\n                                    }}\r\n                                >\r\n                                    <CloseIcon fontSize=\"inherit\" />\r\n                                </IconButton>\r\n                            </Box>\r\n                        )}\r\n                    </Stack>\r\n                </form>\r\n            </Collapse>\r\n        </Stack>\r\n    );\r\n}\r\n\r\nexport default TextDetailHeading;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textlist\":\"TextList---textlist\",\"open\":\"TextList---open\"};","import React, { useState, useRef, useEffect } from \"react\";\r\nimport {\r\n    List,\r\n    AutoSizer,\r\n    CellMeasurer,\r\n    CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport classname from \"classnames\";\r\nimport styles from \"./TextList.css\";\r\nimport addShay from \"lib/addTibetanShay\";\r\n\r\nimport {\r\n    TextField,\r\n    ClickAwayListener,\r\n    Box,\r\n    Typography,\r\n    Button,\r\n    Grow,\r\n} from \"@mui/material\";\r\nimport { useMemo } from \"react\";\r\nfunction TextList(props) {\r\n    const temptext = useRef(props.texts);\r\n    const [textslist, setTextList] = useState(temptext.current);\r\n    const [filterValue, setFilterValue] = useState(null);\r\n\r\n    const onSelectedText = props.onSelectedText;\r\n    const selectedText = props.selectedText;\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    let selected = useMemo(() => {\r\n        return selectedText ? selectedText.name : textslist[0].name;\r\n    }, [selectedText, textslist]);\r\n    useEffect(() => {\r\n        let temp = [];\r\n        if (filterValue === \"\") {\r\n            setTextList([...temptext.current]);\r\n        }\r\n        if (filterValue !== null && filterValue !== \"\") {\r\n            temp = temptext.current.filter((val) => {\r\n                return val.name.includes(filterValue);\r\n            });\r\n            setTextList([...temp]);\r\n        }\r\n    }, [filterValue]);\r\n\r\n    const cache = useRef(\r\n        new CellMeasurerCache({\r\n            fixedHeight: true,\r\n            defaultHeight: 40,\r\n        })\r\n    );\r\n\r\n    let classes = [styles.textlist];\r\n\r\n    const handleClick = () => {\r\n        setIsOpen((prev) => !prev);\r\n        if (isOpen === false) classes.push(styles.open);\r\n    };\r\n    const handleChange = (e) => {\r\n        let value = e.target.value;\r\n        setFilterValue(value);\r\n    };\r\n    const rowRenderer = React.useCallback(\r\n        ({ key, index, style, parent }) => {\r\n            let data = textslist[index];\r\n            return (\r\n                <CellMeasurer\r\n                    key={`optionvalues-${key}`}\r\n                    cache={cache.current}\r\n                    parent={parent}\r\n                    columnIndex={0}\r\n                    rowIndex={index}\r\n                >\r\n                    <div\r\n                        style={style}\r\n                        onClick={() => {\r\n                            setIsOpen(false);\r\n                            onSelectedText(data);\r\n                        }}\r\n                    >\r\n                        <Box\r\n                            sx={{\r\n                                overflow: \"hidden\",\r\n                                textOverflow: \"ellipsis\",\r\n                                width: \"13rem\",\r\n                                paddingLeft: 2,\r\n                                fontSize: {\r\n                                    lg: 12,\r\n                                    md: 11,\r\n                                    sm: 10,\r\n                                    xs: 10,\r\n                                },\r\n                                color: \"text.primary\",\r\n                            }}\r\n                            component=\"div\"\r\n                        >\r\n                            <Typography noWrap={true}>\r\n                                {addShay(data.name)}\r\n                            </Typography>\r\n                        </Box>\r\n                    </div>\r\n                </CellMeasurer>\r\n            );\r\n        },\r\n        [textslist]\r\n    );\r\n    return (\r\n        <ClickAwayListener onClickAway={() => setIsOpen(false)}>\r\n            <div style={{ position: \"relative\", marginLeft: 10 }}>\r\n                <Button\r\n                    onClick={handleClick}\r\n                    component=\"div\"\r\n                    variant=\"outlined\"\r\n                    sx={{\r\n                        overflow: \"hidden\",\r\n                        textOverflow: \"ellipsis\",\r\n                        width: \"10rem\",\r\n                        height: \"100%\",\r\n                        color: \"text.primary\",\r\n                    }}\r\n                >\r\n                    <Typography noWrap={true}>{selected}</Typography>\r\n                </Button>\r\n                <Grow in={isOpen}>\r\n                    <Box\r\n                        className={classname(classes)}\r\n                        sx={{\r\n                            position: \"absolute\",\r\n                            bgcolor: \"heading.main\",\r\n                            zIndex: 1,\r\n                        }}\r\n                    >\r\n                        <TextField\r\n                            onChange={handleChange}\r\n                            id=\"standard-basic\"\r\n                            label=\"filter\"\r\n                            variant=\"standard\"\r\n                            style={{ width: \"100%\" }}\r\n                        />\r\n                        <AutoSizer>\r\n                            {({ width, height }) => (\r\n                                <List\r\n                                    width={width}\r\n                                    height={height}\r\n                                    rowHeight={40}\r\n                                    deferredMeasurementCache={cache.current}\r\n                                    rowCount={textslist.length}\r\n                                    rowRenderer={rowRenderer}\r\n                                />\r\n                            )}\r\n                        </AutoSizer>\r\n                    </Box>\r\n                </Grow>\r\n            </div>\r\n        </ClickAwayListener>\r\n    );\r\n}\r\n\r\nexport default React.memo(TextList);\r\n","// @flow\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport TextList from \"./TextList\";\r\nimport * as actions from \"actions\";\r\nimport { getSelectedText2 } from \"reducers\";\r\nimport type { AppState } from \"reducers\";\r\nimport * as api from \"api\";\r\nimport * as reducers from \"reducers\";\r\nimport { batchActions } from \"redux-batched-actions\";\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    const searchValue = reducers.getSearchValue(state);\r\n    const searchResults = reducers.getSearchResults(state, searchValue);\r\n    const selectedSearchResult = reducers.getSelectedSearchResult(state);\r\n    // TODO: display search results or spinner depending on when anything\r\n    // returned\r\n\r\n    let searching = false;\r\n    let texts = state.data.texts;\r\n    if (searchValue.length > 0) {\r\n        if (searchResults === null) {\r\n            searching = true;\r\n            texts = [];\r\n        } else {\r\n            texts = texts.filter((text) =>\r\n                searchResults.hasOwnProperty(text.id)\r\n            );\r\n        }\r\n    }\r\n\r\n    return {\r\n        texts: texts,\r\n        selectedText: getSelectedText2(state),\r\n        searchTerm: searchValue,\r\n        searchResults,\r\n        selectedSearchResult,\r\n        searching,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSelectedText: (text: api.TextData) => {\r\n            dispatch(actions.selectedText2(text));\r\n        },\r\n    };\r\n};\r\n\r\nconst TextListContainer = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TextList);\r\n\r\nexport default TextListContainer;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_group_menu\":\"textDetailHeading---button_group_menu\"};","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\n\nvar _ref =\n/*#__PURE__*/\n\n/*#__PURE__*/\nReact.createElement(\"g\", {\n  fill: \"#010002\"\n}, /*#__PURE__*/React.createElement(\"circle\", {\n  cx: 26.465,\n  cy: 25.59,\n  r: 4.462\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M52.791 32.256c-.187-1.034-1.345-2.119-2.327-2.492l-2.645-1.004c-.982-.373-1.699-1.237-1.651-1.935.029-.417.046-.838.046-1.263 0-.284-.008-.566-.021-.846-.023-.467.719-1.193 1.677-1.624l2.39-1.074c.958-.432 2.121-1.565 2.194-2.613.064-.929-.047-2.196-.648-3.765a8.336 8.336 0 00-2.779-3.718c-.839-.633-2.423-.595-3.381-.163l-2.08.936c-.958.431-2.274.119-3.025-.616a17.282 17.282 0 00-.54-.509c-.778-.705-1.17-2-.796-2.983l.819-2.162c.373-.982.368-2.594-.322-3.385-.635-.728-1.643-1.579-3.215-2.281-1.764-.788-3.346-.811-4.483-.639-1.039.158-2.121 1.331-2.494 2.312l-.946 2.491c-.373.982-.798 1.775-.949 1.771a6.289 6.289 0 00-.274-.005c-.622 0-1.238.03-1.846.09-1.016.1-2.176-.507-2.607-1.465l-1.124-2.5c-.431-.959-1.538-2.21-2.589-2.227-.916-.016-2.207.209-3.936 1.028-1.874.889-2.971 1.742-3.611 2.437-.712.771-.554 2.416-.122 3.374l1.481 3.296c.431.958.256 2.266-.324 2.979-.579.714-1.786 1.033-2.768.661l-3.598-1.365c-.982-.373-2.65-.476-3.406.256-.658.637-1.412 1.709-2.056 3.51-.696 1.954-.867 3.332-.83 4.276.042 1.05 1.317 2.101 2.3 2.474l4.392 1.667c.982.373 1.782 1.244 1.839 1.941.055.699-.635 1.61-1.593 2.042l-4.382 1.97c-.958.431-2.211 1.539-2.227 2.589-.015.916.21 2.208 1.028 3.935.89 1.874 1.742 2.971 2.437 3.611.773.713 2.417.554 3.375.123l4.698-2.112c.958-.432 2.076-.412 2.525.013s.535 1.541.162 2.524L12.743 46.6c-.373.982-.476 2.65.256 3.404.638.659 1.709 1.414 3.51 2.057 1.954.697 3.333.868 4.277.831 1.05-.042 2.1-1.318 2.473-2.3l1.693-4.46c.373-.982 1.058-1.742 1.531-1.719a17.414 17.414 0 001.255.016c.219-.007.747.762 1.178 1.721l1.963 4.364c.431.958 1.605 1.986 2.653 2.038 1.121.056 2.669-.062 4.43-.734 1.685-.645 2.659-1.604 3.219-2.442.584-.873.388-2.517-.044-3.475l-1.606-3.573c-.431-.958-.169-2.191.527-2.824.693-.633 2-.9 2.981-.526l3.432 1.303c.982.373 2.64.489 3.478-.145.738-.56 1.591-1.49 2.281-3.034.827-1.854.785-3.605.561-4.846zM26.465 39.79c-7.844 0-14.201-6.357-14.201-14.2s6.357-14.2 14.201-14.2c7.842 0 14.2 6.357 14.2 14.2.001 7.843-6.358 14.2-14.2 14.2z\"\n}));\n\nvar SvgOptions = function SvgOptions(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 52.93 52.93\"\n  }, props), _ref);\n};\n\nexport default SvgOptions;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAQA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AADA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;AAvCA;AACA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAGA;AACA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AAHA;AAUA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AADA;AAeA;AACA;AACA;;;;;;;;;;;ACpEA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AACA;;;;;;;;;;;AClBA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AALA;AAUA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAQA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAYA;AAEA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AALA;AAJA;AAaA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAHA;AADA;AASA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAdA;AAkBA;AArBA;AAuBA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAFA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAbA;AAgBA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AADA;AAmBA;AAGA;AACA;AACA;AANA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAUA;AAAA;AASA;AACA;AACA;;;;;;;;;;;AClOA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AAMA;AACA;AACA;AAEA;AAQA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAFA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAXA;AAaA;AAdA;AAgBA;AAAA;AAOA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAJA;AAYA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAFA;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAQA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAgBA;AACA;AACA;;;;;;;;;;;;AC5JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAKA;;;;;;;;;;;ACtDA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}